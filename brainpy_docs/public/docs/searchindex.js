Search.setIndex({"docnames": ["apis/auto/analysis", "apis/auto/brainpy", "apis/auto/changelog", "apis/auto/channels", "apis/auto/connect", "apis/auto/encoding", "apis/auto/generated/brainpy.BPFF", "apis/auto/generated/brainpy.BPTT", "apis/auto/generated/brainpy.Channel", "apis/auto/generated/brainpy.CondNeuGroup", "apis/auto/generated/brainpy.Container", "apis/auto/generated/brainpy.DSRunner", "apis/auto/generated/brainpy.DSTrainer", "apis/auto/generated/brainpy.DynamicalSystem", "apis/auto/generated/brainpy.ForceTrainer", "apis/auto/generated/brainpy.Integrator", "apis/auto/generated/brainpy.IntegratorRunner", "apis/auto/generated/brainpy.JointEq", "apis/auto/generated/brainpy.LoopOverTime", "apis/auto/generated/brainpy.Network", "apis/auto/generated/brainpy.NeuGroup", "apis/auto/generated/brainpy.NoSharedArg", "apis/auto/generated/brainpy.OfflineTrainer", "apis/auto/generated/brainpy.OnlineTrainer", "apis/auto/generated/brainpy.RidgeTrainer", "apis/auto/generated/brainpy.Sequential", "apis/auto/generated/brainpy.SynConn", "apis/auto/generated/brainpy.SynLTP", "apis/auto/generated/brainpy.SynOut", "apis/auto/generated/brainpy.SynSTP", "apis/auto/generated/brainpy.TwoEndConn", "apis/auto/generated/brainpy.analysis.Bifurcation1D", "apis/auto/generated/brainpy.analysis.Bifurcation2D", "apis/auto/generated/brainpy.analysis.FastSlow1D", "apis/auto/generated/brainpy.analysis.FastSlow2D", "apis/auto/generated/brainpy.analysis.PhasePlane1D", "apis/auto/generated/brainpy.analysis.PhasePlane2D", "apis/auto/generated/brainpy.analysis.SlowPointFinder", "apis/auto/generated/brainpy.channels.Calcium", "apis/auto/generated/brainpy.channels.CalciumChannel", "apis/auto/generated/brainpy.channels.CalciumDetailed", "apis/auto/generated/brainpy.channels.CalciumDyna", "apis/auto/generated/brainpy.channels.CalciumFirstOrder", "apis/auto/generated/brainpy.channels.CalciumFixed", "apis/auto/generated/brainpy.channels.IAHP_De1994", "apis/auto/generated/brainpy.channels.ICaHT_HM1992", "apis/auto/generated/brainpy.channels.ICaL_IS2008", "apis/auto/generated/brainpy.channels.ICaN_IS2008", "apis/auto/generated/brainpy.channels.ICaT_HM1992", "apis/auto/generated/brainpy.channels.ICaT_HP1992", "apis/auto/generated/brainpy.channels.IKA1_HM1992", "apis/auto/generated/brainpy.channels.IKA2_HM1992", "apis/auto/generated/brainpy.channels.IKDR_Ba2002", "apis/auto/generated/brainpy.channels.IKK2A_HM1992", "apis/auto/generated/brainpy.channels.IKK2B_HM1992", "apis/auto/generated/brainpy.channels.IKL", "apis/auto/generated/brainpy.channels.IKNI_Ya1989", "apis/auto/generated/brainpy.channels.IK_HH1952", "apis/auto/generated/brainpy.channels.IK_TM1991", "apis/auto/generated/brainpy.channels.IL", "apis/auto/generated/brainpy.channels.INa_Ba2002", "apis/auto/generated/brainpy.channels.INa_HH1952", "apis/auto/generated/brainpy.channels.INa_TM1991", "apis/auto/generated/brainpy.channels.IhChannel", "apis/auto/generated/brainpy.channels.Ih_De1996", "apis/auto/generated/brainpy.channels.Ih_HM1992", "apis/auto/generated/brainpy.channels.Ion", "apis/auto/generated/brainpy.channels.IonChannel", "apis/auto/generated/brainpy.channels.LeakyChannel", "apis/auto/generated/brainpy.channels.PotassiumChannel", "apis/auto/generated/brainpy.channels.SodiumChannel", "apis/auto/generated/brainpy.connect.All2All", "apis/auto/generated/brainpy.connect.CONN_MAT", "apis/auto/generated/brainpy.connect.CSRConn", "apis/auto/generated/brainpy.connect.Connector", "apis/auto/generated/brainpy.connect.FixedPostNum", "apis/auto/generated/brainpy.connect.FixedPreNum", "apis/auto/generated/brainpy.connect.FixedProb", "apis/auto/generated/brainpy.connect.FixedTotalNum", "apis/auto/generated/brainpy.connect.GaussianProb", "apis/auto/generated/brainpy.connect.GridEight", "apis/auto/generated/brainpy.connect.GridFour", "apis/auto/generated/brainpy.connect.GridN", "apis/auto/generated/brainpy.connect.IJConn", "apis/auto/generated/brainpy.connect.MatConn", "apis/auto/generated/brainpy.connect.One2One", "apis/auto/generated/brainpy.connect.OneEndConnector", "apis/auto/generated/brainpy.connect.POST2PRE", "apis/auto/generated/brainpy.connect.POST2SYN", "apis/auto/generated/brainpy.connect.POST_IDS", "apis/auto/generated/brainpy.connect.PRE2POST", "apis/auto/generated/brainpy.connect.PRE2SYN", "apis/auto/generated/brainpy.connect.PRE_IDS", "apis/auto/generated/brainpy.connect.PowerLaw", "apis/auto/generated/brainpy.connect.ProbDist", "apis/auto/generated/brainpy.connect.ScaleFreeBA", "apis/auto/generated/brainpy.connect.ScaleFreeBADual", "apis/auto/generated/brainpy.connect.SmallWorld", "apis/auto/generated/brainpy.connect.SparseMatConn", "apis/auto/generated/brainpy.connect.TwoEndConnector", "apis/auto/generated/brainpy.connect.coo2csc", "apis/auto/generated/brainpy.connect.coo2csr", "apis/auto/generated/brainpy.connect.coo2mat", "apis/auto/generated/brainpy.connect.csr2coo", "apis/auto/generated/brainpy.connect.csr2csc", "apis/auto/generated/brainpy.connect.csr2mat", "apis/auto/generated/brainpy.connect.grid_eight", "apis/auto/generated/brainpy.connect.grid_four", "apis/auto/generated/brainpy.connect.mat2coo", "apis/auto/generated/brainpy.connect.mat2csc", "apis/auto/generated/brainpy.connect.mat2csr", "apis/auto/generated/brainpy.encoding.Encoder", "apis/auto/generated/brainpy.encoding.LatencyEncoder", "apis/auto/generated/brainpy.encoding.PoissonEncoder", "apis/auto/generated/brainpy.encoding.WeightedPhaseEncoder", "apis/auto/generated/brainpy.fdeint", "apis/auto/generated/brainpy.initialize.Constant", "apis/auto/generated/brainpy.initialize.DOGDecay", "apis/auto/generated/brainpy.initialize.DeltaOrthogonal", "apis/auto/generated/brainpy.initialize.GaussianDecay", "apis/auto/generated/brainpy.initialize.Identity", "apis/auto/generated/brainpy.initialize.Initializer", "apis/auto/generated/brainpy.initialize.InterLayerInitializer", "apis/auto/generated/brainpy.initialize.IntraLayerInitializer", "apis/auto/generated/brainpy.initialize.KaimingNormal", "apis/auto/generated/brainpy.initialize.KaimingUniform", "apis/auto/generated/brainpy.initialize.LecunNormal", "apis/auto/generated/brainpy.initialize.LecunUniform", "apis/auto/generated/brainpy.initialize.Normal", "apis/auto/generated/brainpy.initialize.OneInit", "apis/auto/generated/brainpy.initialize.Orthogonal", "apis/auto/generated/brainpy.initialize.Uniform", "apis/auto/generated/brainpy.initialize.VarianceScaling", "apis/auto/generated/brainpy.initialize.XavierNormal", "apis/auto/generated/brainpy.initialize.XavierUniform", "apis/auto/generated/brainpy.initialize.ZeroInit", "apis/auto/generated/brainpy.inputs.constant_input", "apis/auto/generated/brainpy.inputs.ou_process", "apis/auto/generated/brainpy.inputs.ramp_input", "apis/auto/generated/brainpy.inputs.section_input", "apis/auto/generated/brainpy.inputs.sinusoidal_input", "apis/auto/generated/brainpy.inputs.spike_input", "apis/auto/generated/brainpy.inputs.square_input", "apis/auto/generated/brainpy.inputs.wiener_process", "apis/auto/generated/brainpy.integrators.fde.CaputoEuler", "apis/auto/generated/brainpy.integrators.fde.CaputoL1Schema", "apis/auto/generated/brainpy.integrators.fde.FDEIntegrator", "apis/auto/generated/brainpy.integrators.fde.GLShortMemory", "apis/auto/generated/brainpy.integrators.fde.get_default_fdeint", "apis/auto/generated/brainpy.integrators.fde.get_supported_methods", "apis/auto/generated/brainpy.integrators.fde.register_fde_integrator", "apis/auto/generated/brainpy.integrators.fde.set_default_fdeint", "apis/auto/generated/brainpy.integrators.ode.AdaptiveRKIntegrator", "apis/auto/generated/brainpy.integrators.ode.BogackiShampine", "apis/auto/generated/brainpy.integrators.ode.CashKarp", "apis/auto/generated/brainpy.integrators.ode.DormandPrince", "apis/auto/generated/brainpy.integrators.ode.Euler", "apis/auto/generated/brainpy.integrators.ode.ExplicitRKIntegrator", "apis/auto/generated/brainpy.integrators.ode.ExponentialEuler", "apis/auto/generated/brainpy.integrators.ode.Heun2", "apis/auto/generated/brainpy.integrators.ode.Heun3", "apis/auto/generated/brainpy.integrators.ode.HeunEuler", "apis/auto/generated/brainpy.integrators.ode.MidPoint", "apis/auto/generated/brainpy.integrators.ode.ODEIntegrator", "apis/auto/generated/brainpy.integrators.ode.RK2", "apis/auto/generated/brainpy.integrators.ode.RK3", "apis/auto/generated/brainpy.integrators.ode.RK4", "apis/auto/generated/brainpy.integrators.ode.RK4Rule38", "apis/auto/generated/brainpy.integrators.ode.RKF12", "apis/auto/generated/brainpy.integrators.ode.RKF45", "apis/auto/generated/brainpy.integrators.ode.Ralston2", "apis/auto/generated/brainpy.integrators.ode.Ralston3", "apis/auto/generated/brainpy.integrators.ode.Ralston4", "apis/auto/generated/brainpy.integrators.ode.SSPRK3", "apis/auto/generated/brainpy.integrators.ode.get_default_odeint", "apis/auto/generated/brainpy.integrators.ode.get_supported_methods", "apis/auto/generated/brainpy.integrators.ode.register_ode_integrator", "apis/auto/generated/brainpy.integrators.ode.set_default_odeint", "apis/auto/generated/brainpy.integrators.sde.Euler", "apis/auto/generated/brainpy.integrators.sde.ExponentialEuler", "apis/auto/generated/brainpy.integrators.sde.Heun", "apis/auto/generated/brainpy.integrators.sde.KlPl", "apis/auto/generated/brainpy.integrators.sde.Milstein", "apis/auto/generated/brainpy.integrators.sde.MilsteinGradFree", "apis/auto/generated/brainpy.integrators.sde.SDEIntegrator", "apis/auto/generated/brainpy.integrators.sde.SRK1W1", "apis/auto/generated/brainpy.integrators.sde.SRK2W1", "apis/auto/generated/brainpy.integrators.sde.get_default_sdeint", "apis/auto/generated/brainpy.integrators.sde.get_supported_methods", "apis/auto/generated/brainpy.integrators.sde.register_sde_integrator", "apis/auto/generated/brainpy.integrators.sde.set_default_sdeint", "apis/auto/generated/brainpy.layers.Activation", "apis/auto/generated/brainpy.layers.AdaptiveAvgPool1d", "apis/auto/generated/brainpy.layers.AdaptiveAvgPool2d", "apis/auto/generated/brainpy.layers.AdaptiveAvgPool3d", "apis/auto/generated/brainpy.layers.AdaptiveMaxPool1d", "apis/auto/generated/brainpy.layers.AdaptiveMaxPool2d", "apis/auto/generated/brainpy.layers.AdaptiveMaxPool3d", "apis/auto/generated/brainpy.layers.AvgPool", "apis/auto/generated/brainpy.layers.AvgPool1d", "apis/auto/generated/brainpy.layers.AvgPool2d", "apis/auto/generated/brainpy.layers.AvgPool3d", "apis/auto/generated/brainpy.layers.BatchNorm1D", "apis/auto/generated/brainpy.layers.BatchNorm2D", "apis/auto/generated/brainpy.layers.BatchNorm3D", "apis/auto/generated/brainpy.layers.Conv1D", "apis/auto/generated/brainpy.layers.Conv1dLSTMCell", "apis/auto/generated/brainpy.layers.Conv2D", "apis/auto/generated/brainpy.layers.Conv2dLSTMCell", "apis/auto/generated/brainpy.layers.Conv3D", "apis/auto/generated/brainpy.layers.Conv3dLSTMCell", "apis/auto/generated/brainpy.layers.ConvTranspose1d", "apis/auto/generated/brainpy.layers.ConvTranspose2d", "apis/auto/generated/brainpy.layers.ConvTranspose3d", "apis/auto/generated/brainpy.layers.Dense", "apis/auto/generated/brainpy.layers.Dropout", "apis/auto/generated/brainpy.layers.Flatten", "apis/auto/generated/brainpy.layers.FunAsLayer", "apis/auto/generated/brainpy.layers.GRU", "apis/auto/generated/brainpy.layers.GRUCell", "apis/auto/generated/brainpy.layers.GroupNorm", "apis/auto/generated/brainpy.layers.Identity", "apis/auto/generated/brainpy.layers.InstanceNorm", "apis/auto/generated/brainpy.layers.LSTM", "apis/auto/generated/brainpy.layers.LSTMCell", "apis/auto/generated/brainpy.layers.Layer", "apis/auto/generated/brainpy.layers.LayerNorm", "apis/auto/generated/brainpy.layers.Linear", "apis/auto/generated/brainpy.layers.MaxPool", "apis/auto/generated/brainpy.layers.MaxPool1d", "apis/auto/generated/brainpy.layers.MaxPool2d", "apis/auto/generated/brainpy.layers.MaxPool3d", "apis/auto/generated/brainpy.layers.MinPool", "apis/auto/generated/brainpy.layers.NVAR", "apis/auto/generated/brainpy.layers.RNNCell", "apis/auto/generated/brainpy.layers.Reservoir", "apis/auto/generated/brainpy.layers.VanillaRNN", "apis/auto/generated/brainpy.losses.binary_logistic_loss", "apis/auto/generated/brainpy.losses.cross_entropy_loss", "apis/auto/generated/brainpy.losses.cross_entropy_sigmoid", "apis/auto/generated/brainpy.losses.cross_entropy_sparse", "apis/auto/generated/brainpy.losses.ctc_loss", "apis/auto/generated/brainpy.losses.ctc_loss_with_forward_probs", "apis/auto/generated/brainpy.losses.huber_loss", "apis/auto/generated/brainpy.losses.l1_loos", "apis/auto/generated/brainpy.losses.l2_loss", "apis/auto/generated/brainpy.losses.l2_norm", "apis/auto/generated/brainpy.losses.log_cosh", "apis/auto/generated/brainpy.losses.log_cosh_loss", "apis/auto/generated/brainpy.losses.mean_absolute", "apis/auto/generated/brainpy.losses.mean_absolute_error", "apis/auto/generated/brainpy.losses.mean_square", "apis/auto/generated/brainpy.losses.mean_squared_error", "apis/auto/generated/brainpy.losses.mean_squared_log_error", "apis/auto/generated/brainpy.losses.multiclass_logistic_loss", "apis/auto/generated/brainpy.losses.sigmoid_binary_cross_entropy", "apis/auto/generated/brainpy.losses.smooth_labels", "apis/auto/generated/brainpy.losses.softmax_cross_entropy", "apis/auto/generated/brainpy.math.BatchingMode", "apis/auto/generated/brainpy.math.BrainPyObject", "apis/auto/generated/brainpy.math.CONCAT_UPDATE", "apis/auto/generated/brainpy.math.DelayVariable", "apis/auto/generated/brainpy.math.FunAsObject", "apis/auto/generated/brainpy.math.LengthDelay", "apis/auto/generated/brainpy.math.Mode", "apis/auto/generated/brainpy.math.NeuLenDelay", "apis/auto/generated/brainpy.math.NeuTimeDelay", "apis/auto/generated/brainpy.math.NonBatchingMode", "apis/auto/generated/brainpy.math.ObjectTransform", "apis/auto/generated/brainpy.math.Parameter", "apis/auto/generated/brainpy.math.Partial", "apis/auto/generated/brainpy.math.ROTATE_UPDATE", "apis/auto/generated/brainpy.math.Tensor", "apis/auto/generated/brainpy.math.TimeDelay", "apis/auto/generated/brainpy.math.TrainVar", "apis/auto/generated/brainpy.math.TrainingMode", "apis/auto/generated/brainpy.math.Variable", "apis/auto/generated/brainpy.math.XLACustomOp", "apis/auto/generated/brainpy.math.abs", "apis/auto/generated/brainpy.math.absolute", "apis/auto/generated/brainpy.math.acos", "apis/auto/generated/brainpy.math.acosh", "apis/auto/generated/brainpy.math.add", "apis/auto/generated/brainpy.math.add_docstring", "apis/auto/generated/brainpy.math.add_newdoc", "apis/auto/generated/brainpy.math.add_newdoc_ufunc", "apis/auto/generated/brainpy.math.addcdiv", "apis/auto/generated/brainpy.math.addcmul", "apis/auto/generated/brainpy.math.all", "apis/auto/generated/brainpy.math.allclose", "apis/auto/generated/brainpy.math.alltrue", "apis/auto/generated/brainpy.math.amax", "apis/auto/generated/brainpy.math.amin", "apis/auto/generated/brainpy.math.angle", "apis/auto/generated/brainpy.math.any", "apis/auto/generated/brainpy.math.append", "apis/auto/generated/brainpy.math.apply_along_axis", "apis/auto/generated/brainpy.math.apply_over_axes", "apis/auto/generated/brainpy.math.arange", "apis/auto/generated/brainpy.math.arccos", "apis/auto/generated/brainpy.math.arccosh", "apis/auto/generated/brainpy.math.arcsin", "apis/auto/generated/brainpy.math.arcsinh", "apis/auto/generated/brainpy.math.arctan", "apis/auto/generated/brainpy.math.arctan2", "apis/auto/generated/brainpy.math.arctanh", "apis/auto/generated/brainpy.math.argmax", "apis/auto/generated/brainpy.math.argmin", "apis/auto/generated/brainpy.math.argsort", "apis/auto/generated/brainpy.math.argwhere", "apis/auto/generated/brainpy.math.around", "apis/auto/generated/brainpy.math.array", "apis/auto/generated/brainpy.math.array2string", "apis/auto/generated/brainpy.math.array_equal", "apis/auto/generated/brainpy.math.array_equiv", "apis/auto/generated/brainpy.math.array_repr", "apis/auto/generated/brainpy.math.array_split", "apis/auto/generated/brainpy.math.array_str", "apis/auto/generated/brainpy.math.as_device_array", "apis/auto/generated/brainpy.math.as_jax", "apis/auto/generated/brainpy.math.as_ndarray", "apis/auto/generated/brainpy.math.as_numpy", "apis/auto/generated/brainpy.math.as_variable", "apis/auto/generated/brainpy.math.asanyarray", "apis/auto/generated/brainpy.math.asarray", "apis/auto/generated/brainpy.math.ascontiguousarray", "apis/auto/generated/brainpy.math.asfarray", "apis/auto/generated/brainpy.math.asin", "apis/auto/generated/brainpy.math.asinh", "apis/auto/generated/brainpy.math.asmatrix", "apis/auto/generated/brainpy.math.asscalar", "apis/auto/generated/brainpy.math.atan", "apis/auto/generated/brainpy.math.atan2", "apis/auto/generated/brainpy.math.atanh", "apis/auto/generated/brainpy.math.atleast_1d", "apis/auto/generated/brainpy.math.atleast_2d", "apis/auto/generated/brainpy.math.atleast_3d", "apis/auto/generated/brainpy.math.average", "apis/auto/generated/brainpy.math.bartlett", "apis/auto/generated/brainpy.math.batching_environment", "apis/auto/generated/brainpy.math.batching_mode", "apis/auto/generated/brainpy.math.bincount", "apis/auto/generated/brainpy.math.bitwise_and", "apis/auto/generated/brainpy.math.bitwise_not", "apis/auto/generated/brainpy.math.bitwise_or", "apis/auto/generated/brainpy.math.bitwise_xor", "apis/auto/generated/brainpy.math.blackman", "apis/auto/generated/brainpy.math.block", "apis/auto/generated/brainpy.math.broadcast_arrays", "apis/auto/generated/brainpy.math.broadcast_shapes", "apis/auto/generated/brainpy.math.broadcast_to", "apis/auto/generated/brainpy.math.can_cast", "apis/auto/generated/brainpy.math.cast", "apis/auto/generated/brainpy.math.cat", "apis/auto/generated/brainpy.math.cbrt", "apis/auto/generated/brainpy.math.ceil", "apis/auto/generated/brainpy.math.celu", "apis/auto/generated/brainpy.math.choose", "apis/auto/generated/brainpy.math.clear_buffer_memory", "apis/auto/generated/brainpy.math.clip", "apis/auto/generated/brainpy.math.clip_by_value", "apis/auto/generated/brainpy.math.column_stack", "apis/auto/generated/brainpy.math.common_type", "apis/auto/generated/brainpy.math.compress", "apis/auto/generated/brainpy.math.concat", "apis/auto/generated/brainpy.math.concatenate", "apis/auto/generated/brainpy.math.cond", "apis/auto/generated/brainpy.math.conj", "apis/auto/generated/brainpy.math.conjugate", "apis/auto/generated/brainpy.math.convolve", "apis/auto/generated/brainpy.math.copy", "apis/auto/generated/brainpy.math.copysign", "apis/auto/generated/brainpy.math.copyto", "apis/auto/generated/brainpy.math.corrcoef", "apis/auto/generated/brainpy.math.correlate", "apis/auto/generated/brainpy.math.cos", "apis/auto/generated/brainpy.math.cosh", "apis/auto/generated/brainpy.math.count_nonzero", "apis/auto/generated/brainpy.math.cov", "apis/auto/generated/brainpy.math.cross", "apis/auto/generated/brainpy.math.csr_matvec", "apis/auto/generated/brainpy.math.cumprod", "apis/auto/generated/brainpy.math.cumproduct", "apis/auto/generated/brainpy.math.cumsum", "apis/auto/generated/brainpy.math.deg2rad", "apis/auto/generated/brainpy.math.degrees", "apis/auto/generated/brainpy.math.delete", "apis/auto/generated/brainpy.math.dftype", "apis/auto/generated/brainpy.math.diag", "apis/auto/generated/brainpy.math.diag_indices", "apis/auto/generated/brainpy.math.diag_indices_from", "apis/auto/generated/brainpy.math.diagflat", "apis/auto/generated/brainpy.math.diagonal", "apis/auto/generated/brainpy.math.diff", "apis/auto/generated/brainpy.math.digitize", "apis/auto/generated/brainpy.math.disable_gpu_memory_preallocation", "apis/auto/generated/brainpy.math.disable_x64", "apis/auto/generated/brainpy.math.disp", "apis/auto/generated/brainpy.math.ditype", "apis/auto/generated/brainpy.math.divide", "apis/auto/generated/brainpy.math.divmod", "apis/auto/generated/brainpy.math.dot", "apis/auto/generated/brainpy.math.dsplit", "apis/auto/generated/brainpy.math.dstack", "apis/auto/generated/brainpy.math.dtype", "apis/auto/generated/brainpy.math.dyn_dict", "apis/auto/generated/brainpy.math.dyn_seq", "apis/auto/generated/brainpy.math.e", "apis/auto/generated/brainpy.math.ediff1d", "apis/auto/generated/brainpy.math.einsum", "apis/auto/generated/brainpy.math.einsum_path", "apis/auto/generated/brainpy.math.elu", "apis/auto/generated/brainpy.math.empty", "apis/auto/generated/brainpy.math.empty_like", "apis/auto/generated/brainpy.math.enable_gpu_memory_preallocation", "apis/auto/generated/brainpy.math.enable_x64", "apis/auto/generated/brainpy.math.environment", "apis/auto/generated/brainpy.math.equal", "apis/auto/generated/brainpy.math.event_csr_matvec", "apis/auto/generated/brainpy.math.exp", "apis/auto/generated/brainpy.math.exp2", "apis/auto/generated/brainpy.math.expand_dims", "apis/auto/generated/brainpy.math.expm1", "apis/auto/generated/brainpy.math.extract", "apis/auto/generated/brainpy.math.eye", "apis/auto/generated/brainpy.math.fabs", "apis/auto/generated/brainpy.math.fft.fft", "apis/auto/generated/brainpy.math.fft.fft2", "apis/auto/generated/brainpy.math.fft.fftfreq", "apis/auto/generated/brainpy.math.fft.fftn", "apis/auto/generated/brainpy.math.fft.fftshift", "apis/auto/generated/brainpy.math.fft.hfft", "apis/auto/generated/brainpy.math.fft.ifft", "apis/auto/generated/brainpy.math.fft.ifft2", "apis/auto/generated/brainpy.math.fft.ifftn", "apis/auto/generated/brainpy.math.fft.ifftshift", "apis/auto/generated/brainpy.math.fft.ihfft", "apis/auto/generated/brainpy.math.fft.irfft", "apis/auto/generated/brainpy.math.fft.irfft2", "apis/auto/generated/brainpy.math.fft.irfftn", "apis/auto/generated/brainpy.math.fft.rfft", "apis/auto/generated/brainpy.math.fft.rfft2", "apis/auto/generated/brainpy.math.fft.rfftfreq", "apis/auto/generated/brainpy.math.fft.rfftn", "apis/auto/generated/brainpy.math.fill_diagonal", "apis/auto/generated/brainpy.math.finfo", "apis/auto/generated/brainpy.math.fix", "apis/auto/generated/brainpy.math.flatnonzero", "apis/auto/generated/brainpy.math.flatten", "apis/auto/generated/brainpy.math.flip", "apis/auto/generated/brainpy.math.fliplr", "apis/auto/generated/brainpy.math.flipud", "apis/auto/generated/brainpy.math.float_power", "apis/auto/generated/brainpy.math.floor", "apis/auto/generated/brainpy.math.floor_divide", "apis/auto/generated/brainpy.math.fmax", "apis/auto/generated/brainpy.math.fmin", "apis/auto/generated/brainpy.math.fmod", "apis/auto/generated/brainpy.math.for_loop", "apis/auto/generated/brainpy.math.frexp", "apis/auto/generated/brainpy.math.frombuffer", "apis/auto/generated/brainpy.math.fromfile", "apis/auto/generated/brainpy.math.fromfunction", "apis/auto/generated/brainpy.math.fromiter", "apis/auto/generated/brainpy.math.fromstring", "apis/auto/generated/brainpy.math.full", "apis/auto/generated/brainpy.math.full_like", "apis/auto/generated/brainpy.math.function", "apis/auto/generated/brainpy.math.gcd", "apis/auto/generated/brainpy.math.gelu", "apis/auto/generated/brainpy.math.genfromtxt", "apis/auto/generated/brainpy.math.geomspace", "apis/auto/generated/brainpy.math.get_bool", "apis/auto/generated/brainpy.math.get_complex", "apis/auto/generated/brainpy.math.get_dt", "apis/auto/generated/brainpy.math.get_float", "apis/auto/generated/brainpy.math.get_int", "apis/auto/generated/brainpy.math.get_mode", "apis/auto/generated/brainpy.math.get_platform", "apis/auto/generated/brainpy.math.get_printoptions", "apis/auto/generated/brainpy.math.glu", "apis/auto/generated/brainpy.math.grad", "apis/auto/generated/brainpy.math.gradient", "apis/auto/generated/brainpy.math.greater", "apis/auto/generated/brainpy.math.greater_equal", "apis/auto/generated/brainpy.math.hamming", "apis/auto/generated/brainpy.math.hanning", "apis/auto/generated/brainpy.math.hard_sigmoid", "apis/auto/generated/brainpy.math.hard_silu", "apis/auto/generated/brainpy.math.hard_swish", "apis/auto/generated/brainpy.math.hard_tanh", "apis/auto/generated/brainpy.math.heaviside", "apis/auto/generated/brainpy.math.hessian", "apis/auto/generated/brainpy.math.histogram", "apis/auto/generated/brainpy.math.histogram2d", "apis/auto/generated/brainpy.math.histogram_bin_edges", "apis/auto/generated/brainpy.math.histogramdd", "apis/auto/generated/brainpy.math.hsplit", "apis/auto/generated/brainpy.math.hstack", "apis/auto/generated/brainpy.math.hypot", "apis/auto/generated/brainpy.math.i0", "apis/auto/generated/brainpy.math.identity", "apis/auto/generated/brainpy.math.ifelse", "apis/auto/generated/brainpy.math.iinfo", "apis/auto/generated/brainpy.math.imag", "apis/auto/generated/brainpy.math.in1d", "apis/auto/generated/brainpy.math.indices", "apis/auto/generated/brainpy.math.inf", "apis/auto/generated/brainpy.math.info", "apis/auto/generated/brainpy.math.inner", "apis/auto/generated/brainpy.math.insert", "apis/auto/generated/brainpy.math.interp", "apis/auto/generated/brainpy.math.intersect1d", "apis/auto/generated/brainpy.math.invert", "apis/auto/generated/brainpy.math.isclose", "apis/auto/generated/brainpy.math.iscomplex", "apis/auto/generated/brainpy.math.iscomplexobj", "apis/auto/generated/brainpy.math.isfinite", "apis/auto/generated/brainpy.math.isin", "apis/auto/generated/brainpy.math.isinf", "apis/auto/generated/brainpy.math.isnan", "apis/auto/generated/brainpy.math.isneginf", "apis/auto/generated/brainpy.math.isposinf", "apis/auto/generated/brainpy.math.isreal", "apis/auto/generated/brainpy.math.isrealobj", "apis/auto/generated/brainpy.math.isscalar", "apis/auto/generated/brainpy.math.issubclass_", "apis/auto/generated/brainpy.math.issubdtype", "apis/auto/generated/brainpy.math.issubsctype", "apis/auto/generated/brainpy.math.iterable", "apis/auto/generated/brainpy.math.ix_", "apis/auto/generated/brainpy.math.jacfwd", "apis/auto/generated/brainpy.math.jacobian", "apis/auto/generated/brainpy.math.jacrev", "apis/auto/generated/brainpy.math.jit", "apis/auto/generated/brainpy.math.kaiser", "apis/auto/generated/brainpy.math.kron", "apis/auto/generated/brainpy.math.lcm", "apis/auto/generated/brainpy.math.ldexp", "apis/auto/generated/brainpy.math.leaky_relu", "apis/auto/generated/brainpy.math.left_shift", "apis/auto/generated/brainpy.math.less", "apis/auto/generated/brainpy.math.less_equal", "apis/auto/generated/brainpy.math.lexsort", "apis/auto/generated/brainpy.math.linalg.cholesky", "apis/auto/generated/brainpy.math.linalg.cond", "apis/auto/generated/brainpy.math.linalg.det", "apis/auto/generated/brainpy.math.linalg.eig", "apis/auto/generated/brainpy.math.linalg.eigh", "apis/auto/generated/brainpy.math.linalg.eigvals", "apis/auto/generated/brainpy.math.linalg.eigvalsh", "apis/auto/generated/brainpy.math.linalg.inv", "apis/auto/generated/brainpy.math.linalg.lstsq", "apis/auto/generated/brainpy.math.linalg.matrix_power", "apis/auto/generated/brainpy.math.linalg.matrix_rank", "apis/auto/generated/brainpy.math.linalg.multi_dot", "apis/auto/generated/brainpy.math.linalg.norm", "apis/auto/generated/brainpy.math.linalg.pinv", "apis/auto/generated/brainpy.math.linalg.qr", "apis/auto/generated/brainpy.math.linalg.slogdet", "apis/auto/generated/brainpy.math.linalg.solve", "apis/auto/generated/brainpy.math.linalg.svd", "apis/auto/generated/brainpy.math.linalg.tensorinv", "apis/auto/generated/brainpy.math.linalg.tensorsolve", "apis/auto/generated/brainpy.math.linspace", "apis/auto/generated/brainpy.math.load", "apis/auto/generated/brainpy.math.loadtxt", "apis/auto/generated/brainpy.math.log", "apis/auto/generated/brainpy.math.log10", "apis/auto/generated/brainpy.math.log1p", "apis/auto/generated/brainpy.math.log2", "apis/auto/generated/brainpy.math.log_sigmoid", "apis/auto/generated/brainpy.math.log_softmax", "apis/auto/generated/brainpy.math.logaddexp", "apis/auto/generated/brainpy.math.logaddexp2", "apis/auto/generated/brainpy.math.logical_and", "apis/auto/generated/brainpy.math.logical_not", "apis/auto/generated/brainpy.math.logical_or", "apis/auto/generated/brainpy.math.logical_xor", "apis/auto/generated/brainpy.math.logspace", "apis/auto/generated/brainpy.math.make_cond", "apis/auto/generated/brainpy.math.make_loop", "apis/auto/generated/brainpy.math.make_while", "apis/auto/generated/brainpy.math.mask_indices", "apis/auto/generated/brainpy.math.mat", "apis/auto/generated/brainpy.math.matmul", "apis/auto/generated/brainpy.math.matrix", "apis/auto/generated/brainpy.math.max", "apis/auto/generated/brainpy.math.maximum", "apis/auto/generated/brainpy.math.mean", "apis/auto/generated/brainpy.math.median", "apis/auto/generated/brainpy.math.meshgrid", "apis/auto/generated/brainpy.math.min", "apis/auto/generated/brainpy.math.minimum", "apis/auto/generated/brainpy.math.mod", "apis/auto/generated/brainpy.math.modf", "apis/auto/generated/brainpy.math.moveaxis", "apis/auto/generated/brainpy.math.msort", "apis/auto/generated/brainpy.math.multiply", "apis/auto/generated/brainpy.math.nan_to_num", "apis/auto/generated/brainpy.math.nanargmax", "apis/auto/generated/brainpy.math.nanargmin", "apis/auto/generated/brainpy.math.nancumprod", "apis/auto/generated/brainpy.math.nancumsum", "apis/auto/generated/brainpy.math.nanmax", "apis/auto/generated/brainpy.math.nanmean", "apis/auto/generated/brainpy.math.nanmedian", "apis/auto/generated/brainpy.math.nanmin", "apis/auto/generated/brainpy.math.nanpercentile", "apis/auto/generated/brainpy.math.nanprod", "apis/auto/generated/brainpy.math.nanquantile", "apis/auto/generated/brainpy.math.nanstd", "apis/auto/generated/brainpy.math.nansum", "apis/auto/generated/brainpy.math.nanvar", "apis/auto/generated/brainpy.math.ndim", "apis/auto/generated/brainpy.math.negative", "apis/auto/generated/brainpy.math.nextafter", "apis/auto/generated/brainpy.math.nonbatching_mode", "apis/auto/generated/brainpy.math.nonzero", "apis/auto/generated/brainpy.math.normalize", "apis/auto/generated/brainpy.math.not_equal", "apis/auto/generated/brainpy.math.one_hot", "apis/auto/generated/brainpy.math.ones", "apis/auto/generated/brainpy.math.ones_like", "apis/auto/generated/brainpy.math.outer", "apis/auto/generated/brainpy.math.packbits", "apis/auto/generated/brainpy.math.pad", "apis/auto/generated/brainpy.math.percentile", "apis/auto/generated/brainpy.math.pi", "apis/auto/generated/brainpy.math.piecewise", "apis/auto/generated/brainpy.math.place", "apis/auto/generated/brainpy.math.poly", "apis/auto/generated/brainpy.math.polyadd", "apis/auto/generated/brainpy.math.polyder", "apis/auto/generated/brainpy.math.polydiv", "apis/auto/generated/brainpy.math.polyfit", "apis/auto/generated/brainpy.math.polyint", "apis/auto/generated/brainpy.math.polymul", "apis/auto/generated/brainpy.math.polysub", "apis/auto/generated/brainpy.math.polyval", "apis/auto/generated/brainpy.math.positive", "apis/auto/generated/brainpy.math.power", "apis/auto/generated/brainpy.math.pre2post_coo_event_sum", "apis/auto/generated/brainpy.math.pre2post_event_prod", "apis/auto/generated/brainpy.math.pre2post_event_sum", "apis/auto/generated/brainpy.math.pre2post_max", "apis/auto/generated/brainpy.math.pre2post_mean", "apis/auto/generated/brainpy.math.pre2post_min", "apis/auto/generated/brainpy.math.pre2post_prod", "apis/auto/generated/brainpy.math.pre2post_sum", "apis/auto/generated/brainpy.math.pre2syn", "apis/auto/generated/brainpy.math.printoptions", "apis/auto/generated/brainpy.math.prod", "apis/auto/generated/brainpy.math.product", "apis/auto/generated/brainpy.math.promote_types", "apis/auto/generated/brainpy.math.ptp", "apis/auto/generated/brainpy.math.put", "apis/auto/generated/brainpy.math.putmask", "apis/auto/generated/brainpy.math.quantile", "apis/auto/generated/brainpy.math.rad2deg", "apis/auto/generated/brainpy.math.radians", "apis/auto/generated/brainpy.math.random.DEFAULT", "apis/auto/generated/brainpy.math.random.Generator", "apis/auto/generated/brainpy.math.random.RandomState", "apis/auto/generated/brainpy.math.random.bernoulli", "apis/auto/generated/brainpy.math.random.beta", "apis/auto/generated/brainpy.math.random.binomial", "apis/auto/generated/brainpy.math.random.categorical", "apis/auto/generated/brainpy.math.random.chisquare", "apis/auto/generated/brainpy.math.random.choice", "apis/auto/generated/brainpy.math.random.default_rng", "apis/auto/generated/brainpy.math.random.dirichlet", "apis/auto/generated/brainpy.math.random.exponential", "apis/auto/generated/brainpy.math.random.f", "apis/auto/generated/brainpy.math.random.gamma", "apis/auto/generated/brainpy.math.random.geometric", "apis/auto/generated/brainpy.math.random.gumbel", "apis/auto/generated/brainpy.math.random.hypergeometric", "apis/auto/generated/brainpy.math.random.laplace", "apis/auto/generated/brainpy.math.random.loggamma", "apis/auto/generated/brainpy.math.random.logistic", "apis/auto/generated/brainpy.math.random.lognormal", "apis/auto/generated/brainpy.math.random.logseries", "apis/auto/generated/brainpy.math.random.maxwell", "apis/auto/generated/brainpy.math.random.multinomial", "apis/auto/generated/brainpy.math.random.multivariate_normal", "apis/auto/generated/brainpy.math.random.negative_binomial", "apis/auto/generated/brainpy.math.random.noncentral_chisquare", "apis/auto/generated/brainpy.math.random.noncentral_f", "apis/auto/generated/brainpy.math.random.normal", "apis/auto/generated/brainpy.math.random.orthogonal", "apis/auto/generated/brainpy.math.random.pareto", "apis/auto/generated/brainpy.math.random.permutation", "apis/auto/generated/brainpy.math.random.poisson", "apis/auto/generated/brainpy.math.random.power", "apis/auto/generated/brainpy.math.random.rand", "apis/auto/generated/brainpy.math.random.rand_like", "apis/auto/generated/brainpy.math.random.randint", "apis/auto/generated/brainpy.math.random.randint_like", "apis/auto/generated/brainpy.math.random.randn", "apis/auto/generated/brainpy.math.random.randn_like", "apis/auto/generated/brainpy.math.random.random", "apis/auto/generated/brainpy.math.random.random_integers", "apis/auto/generated/brainpy.math.random.random_sample", "apis/auto/generated/brainpy.math.random.ranf", "apis/auto/generated/brainpy.math.random.rayleigh", "apis/auto/generated/brainpy.math.random.sample", "apis/auto/generated/brainpy.math.random.seed", "apis/auto/generated/brainpy.math.random.shuffle", "apis/auto/generated/brainpy.math.random.split_key", "apis/auto/generated/brainpy.math.random.standard_cauchy", "apis/auto/generated/brainpy.math.random.standard_exponential", "apis/auto/generated/brainpy.math.random.standard_gamma", "apis/auto/generated/brainpy.math.random.standard_normal", "apis/auto/generated/brainpy.math.random.standard_t", "apis/auto/generated/brainpy.math.random.t", "apis/auto/generated/brainpy.math.random.triangular", "apis/auto/generated/brainpy.math.random.truncated_normal", "apis/auto/generated/brainpy.math.random.uniform", "apis/auto/generated/brainpy.math.random.vonmises", "apis/auto/generated/brainpy.math.random.wald", "apis/auto/generated/brainpy.math.random.weibull", "apis/auto/generated/brainpy.math.random.weibull_min", "apis/auto/generated/brainpy.math.random.zipf", "apis/auto/generated/brainpy.math.ravel", "apis/auto/generated/brainpy.math.ravel_multi_index", "apis/auto/generated/brainpy.math.real", "apis/auto/generated/brainpy.math.reciprocal", "apis/auto/generated/brainpy.math.reduce_all", "apis/auto/generated/brainpy.math.reduce_any", "apis/auto/generated/brainpy.math.reduce_euclidean_norm", "apis/auto/generated/brainpy.math.reduce_logsumexp", "apis/auto/generated/brainpy.math.reduce_max", "apis/auto/generated/brainpy.math.reduce_mean", "apis/auto/generated/brainpy.math.reduce_min", "apis/auto/generated/brainpy.math.reduce_prod", "apis/auto/generated/brainpy.math.reduce_std", "apis/auto/generated/brainpy.math.reduce_sum", "apis/auto/generated/brainpy.math.reduce_variance", "apis/auto/generated/brainpy.math.relu", "apis/auto/generated/brainpy.math.relu6", "apis/auto/generated/brainpy.math.remainder", "apis/auto/generated/brainpy.math.repeat", "apis/auto/generated/brainpy.math.reshape", "apis/auto/generated/brainpy.math.resize", "apis/auto/generated/brainpy.math.result_type", "apis/auto/generated/brainpy.math.right_shift", "apis/auto/generated/brainpy.math.rint", "apis/auto/generated/brainpy.math.roll", "apis/auto/generated/brainpy.math.rollaxis", "apis/auto/generated/brainpy.math.roots", "apis/auto/generated/brainpy.math.rot90", "apis/auto/generated/brainpy.math.round", "apis/auto/generated/brainpy.math.round_", "apis/auto/generated/brainpy.math.row_stack", "apis/auto/generated/brainpy.math.safe_eval", "apis/auto/generated/brainpy.math.save", "apis/auto/generated/brainpy.math.savetxt", "apis/auto/generated/brainpy.math.savez", "apis/auto/generated/brainpy.math.savez_compressed", "apis/auto/generated/brainpy.math.searchsorted", "apis/auto/generated/brainpy.math.segment_max", "apis/auto/generated/brainpy.math.segment_mean", "apis/auto/generated/brainpy.math.segment_min", "apis/auto/generated/brainpy.math.segment_prod", "apis/auto/generated/brainpy.math.segment_sum", "apis/auto/generated/brainpy.math.select", "apis/auto/generated/brainpy.math.selu", "apis/auto/generated/brainpy.math.set_bool", "apis/auto/generated/brainpy.math.set_complex", "apis/auto/generated/brainpy.math.set_dt", "apis/auto/generated/brainpy.math.set_environment", "apis/auto/generated/brainpy.math.set_float", "apis/auto/generated/brainpy.math.set_host_device_count", "apis/auto/generated/brainpy.math.set_int", "apis/auto/generated/brainpy.math.set_mode", "apis/auto/generated/brainpy.math.set_platform", "apis/auto/generated/brainpy.math.set_printoptions", "apis/auto/generated/brainpy.math.setdiff1d", "apis/auto/generated/brainpy.math.setxor1d", "apis/auto/generated/brainpy.math.shape", "apis/auto/generated/brainpy.math.show_config", "apis/auto/generated/brainpy.math.sigmoid", "apis/auto/generated/brainpy.math.sign", "apis/auto/generated/brainpy.math.signbit", "apis/auto/generated/brainpy.math.silu", "apis/auto/generated/brainpy.math.sin", "apis/auto/generated/brainpy.math.sinc", "apis/auto/generated/brainpy.math.sinh", "apis/auto/generated/brainpy.math.size", "apis/auto/generated/brainpy.math.soft_sign", "apis/auto/generated/brainpy.math.softmax", "apis/auto/generated/brainpy.math.softplus", "apis/auto/generated/brainpy.math.sometrue", "apis/auto/generated/brainpy.math.sort", "apis/auto/generated/brainpy.math.sort_complex", "apis/auto/generated/brainpy.math.sparse_matmul", "apis/auto/generated/brainpy.math.split", "apis/auto/generated/brainpy.math.sqrt", "apis/auto/generated/brainpy.math.square", "apis/auto/generated/brainpy.math.squeeze", "apis/auto/generated/brainpy.math.stack", "apis/auto/generated/brainpy.math.std", "apis/auto/generated/brainpy.math.subtract", "apis/auto/generated/brainpy.math.sum", "apis/auto/generated/brainpy.math.surrogate.arctan", "apis/auto/generated/brainpy.math.surrogate.erf", "apis/auto/generated/brainpy.math.surrogate.gaussian_grad", "apis/auto/generated/brainpy.math.surrogate.inv_square_grad", "apis/auto/generated/brainpy.math.surrogate.inv_square_grad2", "apis/auto/generated/brainpy.math.surrogate.leaky_relu", "apis/auto/generated/brainpy.math.surrogate.log_tailed_relu", "apis/auto/generated/brainpy.math.surrogate.multi_gaussian_grad", "apis/auto/generated/brainpy.math.surrogate.nonzero_sign_log", "apis/auto/generated/brainpy.math.surrogate.piecewise_exp", "apis/auto/generated/brainpy.math.surrogate.piecewise_leaky_relu", "apis/auto/generated/brainpy.math.surrogate.piecewise_quadratic", "apis/auto/generated/brainpy.math.surrogate.q_pseudo_spike", "apis/auto/generated/brainpy.math.surrogate.relu_grad", "apis/auto/generated/brainpy.math.surrogate.relu_grad2", "apis/auto/generated/brainpy.math.surrogate.s2nn", "apis/auto/generated/brainpy.math.surrogate.sigmoid", "apis/auto/generated/brainpy.math.surrogate.slayer_grad", "apis/auto/generated/brainpy.math.surrogate.soft_sign", "apis/auto/generated/brainpy.math.surrogate.squarewave_fourier_series", "apis/auto/generated/brainpy.math.swapaxes", "apis/auto/generated/brainpy.math.swish", "apis/auto/generated/brainpy.math.syn2post", "apis/auto/generated/brainpy.math.syn2post_max", "apis/auto/generated/brainpy.math.syn2post_mean", "apis/auto/generated/brainpy.math.syn2post_min", "apis/auto/generated/brainpy.math.syn2post_prod", "apis/auto/generated/brainpy.math.syn2post_softmax", "apis/auto/generated/brainpy.math.syn2post_sum", "apis/auto/generated/brainpy.math.take", "apis/auto/generated/brainpy.math.take_along_axis", "apis/auto/generated/brainpy.math.tan", "apis/auto/generated/brainpy.math.tanh", "apis/auto/generated/brainpy.math.tensordot", "apis/auto/generated/brainpy.math.tile", "apis/auto/generated/brainpy.math.to_dynsys", "apis/auto/generated/brainpy.math.to_object", "apis/auto/generated/brainpy.math.trace", "apis/auto/generated/brainpy.math.training_environment", "apis/auto/generated/brainpy.math.training_mode", "apis/auto/generated/brainpy.math.transpose", "apis/auto/generated/brainpy.math.trapz", "apis/auto/generated/brainpy.math.tri", "apis/auto/generated/brainpy.math.tril", "apis/auto/generated/brainpy.math.tril_indices", "apis/auto/generated/brainpy.math.tril_indices_from", "apis/auto/generated/brainpy.math.trim_zeros", "apis/auto/generated/brainpy.math.triu", "apis/auto/generated/brainpy.math.triu_indices", "apis/auto/generated/brainpy.math.triu_indices_from", "apis/auto/generated/brainpy.math.true_divide", "apis/auto/generated/brainpy.math.trunc", "apis/auto/generated/brainpy.math.typename", "apis/auto/generated/brainpy.math.union1d", "apis/auto/generated/brainpy.math.unique", "apis/auto/generated/brainpy.math.unpackbits", "apis/auto/generated/brainpy.math.unravel_index", "apis/auto/generated/brainpy.math.unsorted_segment_max", "apis/auto/generated/brainpy.math.unsorted_segment_mean", "apis/auto/generated/brainpy.math.unsorted_segment_min", "apis/auto/generated/brainpy.math.unsorted_segment_prod", "apis/auto/generated/brainpy.math.unsorted_segment_sqrt_n", "apis/auto/generated/brainpy.math.unsorted_segment_sum", "apis/auto/generated/brainpy.math.unsqueeze", "apis/auto/generated/brainpy.math.unwrap", "apis/auto/generated/brainpy.math.vander", "apis/auto/generated/brainpy.math.var", "apis/auto/generated/brainpy.math.vdot", "apis/auto/generated/brainpy.math.vector_grad", "apis/auto/generated/brainpy.math.vsplit", "apis/auto/generated/brainpy.math.vstack", "apis/auto/generated/brainpy.math.where", "apis/auto/generated/brainpy.math.while_loop", "apis/auto/generated/brainpy.math.zeros", "apis/auto/generated/brainpy.math.zeros_like", "apis/auto/generated/brainpy.measure.cross_correlation", "apis/auto/generated/brainpy.measure.firing_rate", "apis/auto/generated/brainpy.measure.functional_connectivity", "apis/auto/generated/brainpy.measure.matrix_correlation", "apis/auto/generated/brainpy.measure.raster_plot", "apis/auto/generated/brainpy.measure.unitary_LFP", "apis/auto/generated/brainpy.measure.voltage_fluctuation", "apis/auto/generated/brainpy.measure.weighted_correlation", "apis/auto/generated/brainpy.neurons.ALIFBellec2020", "apis/auto/generated/brainpy.neurons.AdExIF", "apis/auto/generated/brainpy.neurons.AdQuaIF", "apis/auto/generated/brainpy.neurons.ExpIF", "apis/auto/generated/brainpy.neurons.FHN", "apis/auto/generated/brainpy.neurons.FractionalFHR", "apis/auto/generated/brainpy.neurons.FractionalIzhikevich", "apis/auto/generated/brainpy.neurons.FractionalNeuron", "apis/auto/generated/brainpy.neurons.GIF", "apis/auto/generated/brainpy.neurons.HH", "apis/auto/generated/brainpy.neurons.HindmarshRose", "apis/auto/generated/brainpy.neurons.InputGroup", "apis/auto/generated/brainpy.neurons.Izhikevich", "apis/auto/generated/brainpy.neurons.LIF", "apis/auto/generated/brainpy.neurons.LeakyIntegrator", "apis/auto/generated/brainpy.neurons.MorrisLecar", "apis/auto/generated/brainpy.neurons.OUProcess", "apis/auto/generated/brainpy.neurons.OutputGroup", "apis/auto/generated/brainpy.neurons.PinskyRinzelModel", "apis/auto/generated/brainpy.neurons.PoissonGroup", "apis/auto/generated/brainpy.neurons.QuaIF", "apis/auto/generated/brainpy.neurons.SpikeTimeGroup", "apis/auto/generated/brainpy.neurons.WangBuzsakiModel", "apis/auto/generated/brainpy.odeint", "apis/auto/generated/brainpy.optim.Adadelta", "apis/auto/generated/brainpy.optim.Adagrad", "apis/auto/generated/brainpy.optim.Adam", "apis/auto/generated/brainpy.optim.AdamW", "apis/auto/generated/brainpy.optim.Adan", "apis/auto/generated/brainpy.optim.Constant", "apis/auto/generated/brainpy.optim.CosineAnnealingLR", "apis/auto/generated/brainpy.optim.CosineAnnealingWarmRestarts", "apis/auto/generated/brainpy.optim.ExponentialDecay", "apis/auto/generated/brainpy.optim.ExponentialLR", "apis/auto/generated/brainpy.optim.InverseTimeDecay", "apis/auto/generated/brainpy.optim.LARS", "apis/auto/generated/brainpy.optim.Momentum", "apis/auto/generated/brainpy.optim.MomentumNesterov", "apis/auto/generated/brainpy.optim.MultiStepLR", "apis/auto/generated/brainpy.optim.Optimizer", "apis/auto/generated/brainpy.optim.PiecewiseConstant", "apis/auto/generated/brainpy.optim.PolynomialDecay", "apis/auto/generated/brainpy.optim.RMSProp", "apis/auto/generated/brainpy.optim.SGD", "apis/auto/generated/brainpy.optim.Scheduler", "apis/auto/generated/brainpy.optim.StepLR", "apis/auto/generated/brainpy.optim.make_schedule", "apis/auto/generated/brainpy.rates.FHN", "apis/auto/generated/brainpy.rates.FeedbackFHN", "apis/auto/generated/brainpy.rates.QIF", "apis/auto/generated/brainpy.rates.RateModel", "apis/auto/generated/brainpy.rates.StuartLandauOscillator", "apis/auto/generated/brainpy.rates.ThresholdLinearModel", "apis/auto/generated/brainpy.rates.WilsonCowanModel", "apis/auto/generated/brainpy.running.cpu_ordered_parallel", "apis/auto/generated/brainpy.running.cpu_unordered_parallel", "apis/auto/generated/brainpy.running.jax_parallelize_map", "apis/auto/generated/brainpy.running.jax_vectorize_map", "apis/auto/generated/brainpy.running.process_pool", "apis/auto/generated/brainpy.running.process_pool_lock", "apis/auto/generated/brainpy.sdeint", "apis/auto/generated/brainpy.synapses.AMPA", "apis/auto/generated/brainpy.synapses.AdditiveCoupling", "apis/auto/generated/brainpy.synapses.Alpha", "apis/auto/generated/brainpy.synapses.BioNMDA", "apis/auto/generated/brainpy.synapses.DelayCoupling", "apis/auto/generated/brainpy.synapses.Delta", "apis/auto/generated/brainpy.synapses.DiffusiveCoupling", "apis/auto/generated/brainpy.synapses.DualExponential", "apis/auto/generated/brainpy.synapses.Exponential", "apis/auto/generated/brainpy.synapses.GABAa", "apis/auto/generated/brainpy.synapses.GapJunction", "apis/auto/generated/brainpy.synapses.NMDA", "apis/auto/generated/brainpy.synapses.PoissonInput", "apis/auto/generated/brainpy.synouts.COBA", "apis/auto/generated/brainpy.synouts.CUBA", "apis/auto/generated/brainpy.synouts.MgBlock", "apis/auto/generated/brainpy.synplast.STD", "apis/auto/generated/brainpy.synplast.STP", "apis/auto/initialize", "apis/auto/inputs", "apis/auto/integrators", "apis/auto/layers", "apis/auto/losses", "apis/auto/math", "apis/auto/math_random", "apis/auto/math_surrogate", "apis/auto/measure", "apis/auto/neurons", "apis/auto/optim", "apis/auto/rates", "apis/auto/running", "apis/auto/synapses", "apis/auto/synouts", "apis/auto/synplast", "core_concept/brainpy_dynamical_system", "core_concept/brainpy_transform_concept", "core_concept/index", "index", "quickstart/analysis", "quickstart/installation", "quickstart/simulation", "quickstart/training", "tutorial_FAQs/brainpy_ecosystem", "tutorial_FAQs/citing_and_publication", "tutorial_FAQs/uniqueness_of-brainpy-math", "tutorial_advanced/adavanced_lowdim_analysis", "tutorial_advanced/base_and_collector", "tutorial_advanced/compilation", "tutorial_advanced/differentiation", "tutorial_advanced/interoperation", "tutorial_analysis/decision_making_model", "tutorial_analysis/highdim_analysis", "tutorial_analysis/index", "tutorial_analysis/lowdim_analysis", "tutorial_building/build_conductance_neurons", "tutorial_building/build_network_models", "tutorial_building/build_synapse_models", "tutorial_building/customize_dynamical_systems", "tutorial_building/customize_neuron_models", "tutorial_building/customize_synapse_models", "tutorial_building/index", "tutorial_building/overview_of_dynamic_model", "tutorial_math/arrays_and_variables", "tutorial_math/control_flows", "tutorial_math/index", "tutorial_math/random_number_generation", "tutorial_math/variables", "tutorial_simulation/index", "tutorial_simulation/parallel_computing", "tutorial_simulation/simulation_dsrunner", "tutorial_toolbox/dde_numerical_solvers", "tutorial_toolbox/fde_numerical_solvers", "tutorial_toolbox/inputs", "tutorial_toolbox/joint_equations", "tutorial_toolbox/ode_numerical_solvers", "tutorial_toolbox/optimizers", "tutorial_toolbox/saving_and_loading", "tutorial_toolbox/sde_numerical_solvers", "tutorial_toolbox/synaptic_connections", "tutorial_toolbox/synaptic_weights", "tutorial_training/bp_training", "tutorial_training/build_training_models", "tutorial_training/esn_introduction", "tutorial_training/index", "tutorial_training/offline_training", "tutorial_training/online_training"], "filenames": ["apis\\auto\\analysis.rst", "apis\\auto\\brainpy.rst", "apis\\auto\\changelog.rst", "apis\\auto\\channels.rst", "apis\\auto\\connect.rst", "apis\\auto\\encoding.rst", "apis\\auto\\generated\\brainpy.BPFF.rst", "apis\\auto\\generated\\brainpy.BPTT.rst", "apis\\auto\\generated\\brainpy.Channel.rst", "apis\\auto\\generated\\brainpy.CondNeuGroup.rst", "apis\\auto\\generated\\brainpy.Container.rst", "apis\\auto\\generated\\brainpy.DSRunner.rst", "apis\\auto\\generated\\brainpy.DSTrainer.rst", "apis\\auto\\generated\\brainpy.DynamicalSystem.rst", "apis\\auto\\generated\\brainpy.ForceTrainer.rst", "apis\\auto\\generated\\brainpy.Integrator.rst", "apis\\auto\\generated\\brainpy.IntegratorRunner.rst", "apis\\auto\\generated\\brainpy.JointEq.rst", "apis\\auto\\generated\\brainpy.LoopOverTime.rst", "apis\\auto\\generated\\brainpy.Network.rst", "apis\\auto\\generated\\brainpy.NeuGroup.rst", "apis\\auto\\generated\\brainpy.NoSharedArg.rst", "apis\\auto\\generated\\brainpy.OfflineTrainer.rst", "apis\\auto\\generated\\brainpy.OnlineTrainer.rst", "apis\\auto\\generated\\brainpy.RidgeTrainer.rst", "apis\\auto\\generated\\brainpy.Sequential.rst", "apis\\auto\\generated\\brainpy.SynConn.rst", "apis\\auto\\generated\\brainpy.SynLTP.rst", "apis\\auto\\generated\\brainpy.SynOut.rst", "apis\\auto\\generated\\brainpy.SynSTP.rst", "apis\\auto\\generated\\brainpy.TwoEndConn.rst", "apis\\auto\\generated\\brainpy.analysis.Bifurcation1D.rst", "apis\\auto\\generated\\brainpy.analysis.Bifurcation2D.rst", "apis\\auto\\generated\\brainpy.analysis.FastSlow1D.rst", "apis\\auto\\generated\\brainpy.analysis.FastSlow2D.rst", "apis\\auto\\generated\\brainpy.analysis.PhasePlane1D.rst", "apis\\auto\\generated\\brainpy.analysis.PhasePlane2D.rst", "apis\\auto\\generated\\brainpy.analysis.SlowPointFinder.rst", "apis\\auto\\generated\\brainpy.channels.Calcium.rst", "apis\\auto\\generated\\brainpy.channels.CalciumChannel.rst", "apis\\auto\\generated\\brainpy.channels.CalciumDetailed.rst", "apis\\auto\\generated\\brainpy.channels.CalciumDyna.rst", "apis\\auto\\generated\\brainpy.channels.CalciumFirstOrder.rst", "apis\\auto\\generated\\brainpy.channels.CalciumFixed.rst", "apis\\auto\\generated\\brainpy.channels.IAHP_De1994.rst", "apis\\auto\\generated\\brainpy.channels.ICaHT_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.ICaL_IS2008.rst", "apis\\auto\\generated\\brainpy.channels.ICaN_IS2008.rst", "apis\\auto\\generated\\brainpy.channels.ICaT_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.ICaT_HP1992.rst", "apis\\auto\\generated\\brainpy.channels.IKA1_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.IKA2_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.IKDR_Ba2002.rst", "apis\\auto\\generated\\brainpy.channels.IKK2A_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.IKK2B_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.IKL.rst", "apis\\auto\\generated\\brainpy.channels.IKNI_Ya1989.rst", "apis\\auto\\generated\\brainpy.channels.IK_HH1952.rst", "apis\\auto\\generated\\brainpy.channels.IK_TM1991.rst", "apis\\auto\\generated\\brainpy.channels.IL.rst", "apis\\auto\\generated\\brainpy.channels.INa_Ba2002.rst", "apis\\auto\\generated\\brainpy.channels.INa_HH1952.rst", "apis\\auto\\generated\\brainpy.channels.INa_TM1991.rst", "apis\\auto\\generated\\brainpy.channels.IhChannel.rst", "apis\\auto\\generated\\brainpy.channels.Ih_De1996.rst", "apis\\auto\\generated\\brainpy.channels.Ih_HM1992.rst", "apis\\auto\\generated\\brainpy.channels.Ion.rst", "apis\\auto\\generated\\brainpy.channels.IonChannel.rst", "apis\\auto\\generated\\brainpy.channels.LeakyChannel.rst", "apis\\auto\\generated\\brainpy.channels.PotassiumChannel.rst", "apis\\auto\\generated\\brainpy.channels.SodiumChannel.rst", "apis\\auto\\generated\\brainpy.connect.All2All.rst", "apis\\auto\\generated\\brainpy.connect.CONN_MAT.rst", "apis\\auto\\generated\\brainpy.connect.CSRConn.rst", "apis\\auto\\generated\\brainpy.connect.Connector.rst", "apis\\auto\\generated\\brainpy.connect.FixedPostNum.rst", "apis\\auto\\generated\\brainpy.connect.FixedPreNum.rst", "apis\\auto\\generated\\brainpy.connect.FixedProb.rst", "apis\\auto\\generated\\brainpy.connect.FixedTotalNum.rst", "apis\\auto\\generated\\brainpy.connect.GaussianProb.rst", "apis\\auto\\generated\\brainpy.connect.GridEight.rst", "apis\\auto\\generated\\brainpy.connect.GridFour.rst", "apis\\auto\\generated\\brainpy.connect.GridN.rst", "apis\\auto\\generated\\brainpy.connect.IJConn.rst", "apis\\auto\\generated\\brainpy.connect.MatConn.rst", "apis\\auto\\generated\\brainpy.connect.One2One.rst", "apis\\auto\\generated\\brainpy.connect.OneEndConnector.rst", "apis\\auto\\generated\\brainpy.connect.POST2PRE.rst", "apis\\auto\\generated\\brainpy.connect.POST2SYN.rst", "apis\\auto\\generated\\brainpy.connect.POST_IDS.rst", "apis\\auto\\generated\\brainpy.connect.PRE2POST.rst", "apis\\auto\\generated\\brainpy.connect.PRE2SYN.rst", "apis\\auto\\generated\\brainpy.connect.PRE_IDS.rst", "apis\\auto\\generated\\brainpy.connect.PowerLaw.rst", "apis\\auto\\generated\\brainpy.connect.ProbDist.rst", "apis\\auto\\generated\\brainpy.connect.ScaleFreeBA.rst", "apis\\auto\\generated\\brainpy.connect.ScaleFreeBADual.rst", "apis\\auto\\generated\\brainpy.connect.SmallWorld.rst", "apis\\auto\\generated\\brainpy.connect.SparseMatConn.rst", "apis\\auto\\generated\\brainpy.connect.TwoEndConnector.rst", "apis\\auto\\generated\\brainpy.connect.coo2csc.rst", "apis\\auto\\generated\\brainpy.connect.coo2csr.rst", "apis\\auto\\generated\\brainpy.connect.coo2mat.rst", "apis\\auto\\generated\\brainpy.connect.csr2coo.rst", "apis\\auto\\generated\\brainpy.connect.csr2csc.rst", "apis\\auto\\generated\\brainpy.connect.csr2mat.rst", "apis\\auto\\generated\\brainpy.connect.grid_eight.rst", "apis\\auto\\generated\\brainpy.connect.grid_four.rst", "apis\\auto\\generated\\brainpy.connect.mat2coo.rst", "apis\\auto\\generated\\brainpy.connect.mat2csc.rst", "apis\\auto\\generated\\brainpy.connect.mat2csr.rst", "apis\\auto\\generated\\brainpy.encoding.Encoder.rst", "apis\\auto\\generated\\brainpy.encoding.LatencyEncoder.rst", "apis\\auto\\generated\\brainpy.encoding.PoissonEncoder.rst", "apis\\auto\\generated\\brainpy.encoding.WeightedPhaseEncoder.rst", "apis\\auto\\generated\\brainpy.fdeint.rst", "apis\\auto\\generated\\brainpy.initialize.Constant.rst", "apis\\auto\\generated\\brainpy.initialize.DOGDecay.rst", "apis\\auto\\generated\\brainpy.initialize.DeltaOrthogonal.rst", "apis\\auto\\generated\\brainpy.initialize.GaussianDecay.rst", "apis\\auto\\generated\\brainpy.initialize.Identity.rst", "apis\\auto\\generated\\brainpy.initialize.Initializer.rst", "apis\\auto\\generated\\brainpy.initialize.InterLayerInitializer.rst", "apis\\auto\\generated\\brainpy.initialize.IntraLayerInitializer.rst", "apis\\auto\\generated\\brainpy.initialize.KaimingNormal.rst", "apis\\auto\\generated\\brainpy.initialize.KaimingUniform.rst", "apis\\auto\\generated\\brainpy.initialize.LecunNormal.rst", "apis\\auto\\generated\\brainpy.initialize.LecunUniform.rst", "apis\\auto\\generated\\brainpy.initialize.Normal.rst", "apis\\auto\\generated\\brainpy.initialize.OneInit.rst", "apis\\auto\\generated\\brainpy.initialize.Orthogonal.rst", "apis\\auto\\generated\\brainpy.initialize.Uniform.rst", "apis\\auto\\generated\\brainpy.initialize.VarianceScaling.rst", "apis\\auto\\generated\\brainpy.initialize.XavierNormal.rst", "apis\\auto\\generated\\brainpy.initialize.XavierUniform.rst", "apis\\auto\\generated\\brainpy.initialize.ZeroInit.rst", "apis\\auto\\generated\\brainpy.inputs.constant_input.rst", "apis\\auto\\generated\\brainpy.inputs.ou_process.rst", "apis\\auto\\generated\\brainpy.inputs.ramp_input.rst", "apis\\auto\\generated\\brainpy.inputs.section_input.rst", "apis\\auto\\generated\\brainpy.inputs.sinusoidal_input.rst", "apis\\auto\\generated\\brainpy.inputs.spike_input.rst", "apis\\auto\\generated\\brainpy.inputs.square_input.rst", "apis\\auto\\generated\\brainpy.inputs.wiener_process.rst", "apis\\auto\\generated\\brainpy.integrators.fde.CaputoEuler.rst", "apis\\auto\\generated\\brainpy.integrators.fde.CaputoL1Schema.rst", "apis\\auto\\generated\\brainpy.integrators.fde.FDEIntegrator.rst", "apis\\auto\\generated\\brainpy.integrators.fde.GLShortMemory.rst", "apis\\auto\\generated\\brainpy.integrators.fde.get_default_fdeint.rst", "apis\\auto\\generated\\brainpy.integrators.fde.get_supported_methods.rst", "apis\\auto\\generated\\brainpy.integrators.fde.register_fde_integrator.rst", "apis\\auto\\generated\\brainpy.integrators.fde.set_default_fdeint.rst", "apis\\auto\\generated\\brainpy.integrators.ode.AdaptiveRKIntegrator.rst", "apis\\auto\\generated\\brainpy.integrators.ode.BogackiShampine.rst", "apis\\auto\\generated\\brainpy.integrators.ode.CashKarp.rst", "apis\\auto\\generated\\brainpy.integrators.ode.DormandPrince.rst", "apis\\auto\\generated\\brainpy.integrators.ode.Euler.rst", "apis\\auto\\generated\\brainpy.integrators.ode.ExplicitRKIntegrator.rst", "apis\\auto\\generated\\brainpy.integrators.ode.ExponentialEuler.rst", "apis\\auto\\generated\\brainpy.integrators.ode.Heun2.rst", "apis\\auto\\generated\\brainpy.integrators.ode.Heun3.rst", "apis\\auto\\generated\\brainpy.integrators.ode.HeunEuler.rst", "apis\\auto\\generated\\brainpy.integrators.ode.MidPoint.rst", "apis\\auto\\generated\\brainpy.integrators.ode.ODEIntegrator.rst", "apis\\auto\\generated\\brainpy.integrators.ode.RK2.rst", "apis\\auto\\generated\\brainpy.integrators.ode.RK3.rst", "apis\\auto\\generated\\brainpy.integrators.ode.RK4.rst", "apis\\auto\\generated\\brainpy.integrators.ode.RK4Rule38.rst", "apis\\auto\\generated\\brainpy.integrators.ode.RKF12.rst", "apis\\auto\\generated\\brainpy.integrators.ode.RKF45.rst", "apis\\auto\\generated\\brainpy.integrators.ode.Ralston2.rst", "apis\\auto\\generated\\brainpy.integrators.ode.Ralston3.rst", "apis\\auto\\generated\\brainpy.integrators.ode.Ralston4.rst", "apis\\auto\\generated\\brainpy.integrators.ode.SSPRK3.rst", "apis\\auto\\generated\\brainpy.integrators.ode.get_default_odeint.rst", "apis\\auto\\generated\\brainpy.integrators.ode.get_supported_methods.rst", "apis\\auto\\generated\\brainpy.integrators.ode.register_ode_integrator.rst", "apis\\auto\\generated\\brainpy.integrators.ode.set_default_odeint.rst", "apis\\auto\\generated\\brainpy.integrators.sde.Euler.rst", "apis\\auto\\generated\\brainpy.integrators.sde.ExponentialEuler.rst", "apis\\auto\\generated\\brainpy.integrators.sde.Heun.rst", "apis\\auto\\generated\\brainpy.integrators.sde.KlPl.rst", "apis\\auto\\generated\\brainpy.integrators.sde.Milstein.rst", "apis\\auto\\generated\\brainpy.integrators.sde.MilsteinGradFree.rst", "apis\\auto\\generated\\brainpy.integrators.sde.SDEIntegrator.rst", "apis\\auto\\generated\\brainpy.integrators.sde.SRK1W1.rst", "apis\\auto\\generated\\brainpy.integrators.sde.SRK2W1.rst", "apis\\auto\\generated\\brainpy.integrators.sde.get_default_sdeint.rst", "apis\\auto\\generated\\brainpy.integrators.sde.get_supported_methods.rst", "apis\\auto\\generated\\brainpy.integrators.sde.register_sde_integrator.rst", "apis\\auto\\generated\\brainpy.integrators.sde.set_default_sdeint.rst", "apis\\auto\\generated\\brainpy.layers.Activation.rst", "apis\\auto\\generated\\brainpy.layers.AdaptiveAvgPool1d.rst", "apis\\auto\\generated\\brainpy.layers.AdaptiveAvgPool2d.rst", "apis\\auto\\generated\\brainpy.layers.AdaptiveAvgPool3d.rst", "apis\\auto\\generated\\brainpy.layers.AdaptiveMaxPool1d.rst", "apis\\auto\\generated\\brainpy.layers.AdaptiveMaxPool2d.rst", "apis\\auto\\generated\\brainpy.layers.AdaptiveMaxPool3d.rst", "apis\\auto\\generated\\brainpy.layers.AvgPool.rst", "apis\\auto\\generated\\brainpy.layers.AvgPool1d.rst", "apis\\auto\\generated\\brainpy.layers.AvgPool2d.rst", "apis\\auto\\generated\\brainpy.layers.AvgPool3d.rst", "apis\\auto\\generated\\brainpy.layers.BatchNorm1D.rst", "apis\\auto\\generated\\brainpy.layers.BatchNorm2D.rst", "apis\\auto\\generated\\brainpy.layers.BatchNorm3D.rst", "apis\\auto\\generated\\brainpy.layers.Conv1D.rst", "apis\\auto\\generated\\brainpy.layers.Conv1dLSTMCell.rst", "apis\\auto\\generated\\brainpy.layers.Conv2D.rst", "apis\\auto\\generated\\brainpy.layers.Conv2dLSTMCell.rst", "apis\\auto\\generated\\brainpy.layers.Conv3D.rst", "apis\\auto\\generated\\brainpy.layers.Conv3dLSTMCell.rst", "apis\\auto\\generated\\brainpy.layers.ConvTranspose1d.rst", "apis\\auto\\generated\\brainpy.layers.ConvTranspose2d.rst", "apis\\auto\\generated\\brainpy.layers.ConvTranspose3d.rst", "apis\\auto\\generated\\brainpy.layers.Dense.rst", "apis\\auto\\generated\\brainpy.layers.Dropout.rst", "apis\\auto\\generated\\brainpy.layers.Flatten.rst", "apis\\auto\\generated\\brainpy.layers.FunAsLayer.rst", "apis\\auto\\generated\\brainpy.layers.GRU.rst", "apis\\auto\\generated\\brainpy.layers.GRUCell.rst", "apis\\auto\\generated\\brainpy.layers.GroupNorm.rst", "apis\\auto\\generated\\brainpy.layers.Identity.rst", "apis\\auto\\generated\\brainpy.layers.InstanceNorm.rst", "apis\\auto\\generated\\brainpy.layers.LSTM.rst", "apis\\auto\\generated\\brainpy.layers.LSTMCell.rst", "apis\\auto\\generated\\brainpy.layers.Layer.rst", "apis\\auto\\generated\\brainpy.layers.LayerNorm.rst", "apis\\auto\\generated\\brainpy.layers.Linear.rst", "apis\\auto\\generated\\brainpy.layers.MaxPool.rst", "apis\\auto\\generated\\brainpy.layers.MaxPool1d.rst", "apis\\auto\\generated\\brainpy.layers.MaxPool2d.rst", "apis\\auto\\generated\\brainpy.layers.MaxPool3d.rst", "apis\\auto\\generated\\brainpy.layers.MinPool.rst", "apis\\auto\\generated\\brainpy.layers.NVAR.rst", "apis\\auto\\generated\\brainpy.layers.RNNCell.rst", "apis\\auto\\generated\\brainpy.layers.Reservoir.rst", "apis\\auto\\generated\\brainpy.layers.VanillaRNN.rst", "apis\\auto\\generated\\brainpy.losses.binary_logistic_loss.rst", "apis\\auto\\generated\\brainpy.losses.cross_entropy_loss.rst", "apis\\auto\\generated\\brainpy.losses.cross_entropy_sigmoid.rst", "apis\\auto\\generated\\brainpy.losses.cross_entropy_sparse.rst", "apis\\auto\\generated\\brainpy.losses.ctc_loss.rst", "apis\\auto\\generated\\brainpy.losses.ctc_loss_with_forward_probs.rst", "apis\\auto\\generated\\brainpy.losses.huber_loss.rst", "apis\\auto\\generated\\brainpy.losses.l1_loos.rst", "apis\\auto\\generated\\brainpy.losses.l2_loss.rst", "apis\\auto\\generated\\brainpy.losses.l2_norm.rst", "apis\\auto\\generated\\brainpy.losses.log_cosh.rst", "apis\\auto\\generated\\brainpy.losses.log_cosh_loss.rst", "apis\\auto\\generated\\brainpy.losses.mean_absolute.rst", "apis\\auto\\generated\\brainpy.losses.mean_absolute_error.rst", "apis\\auto\\generated\\brainpy.losses.mean_square.rst", "apis\\auto\\generated\\brainpy.losses.mean_squared_error.rst", "apis\\auto\\generated\\brainpy.losses.mean_squared_log_error.rst", "apis\\auto\\generated\\brainpy.losses.multiclass_logistic_loss.rst", "apis\\auto\\generated\\brainpy.losses.sigmoid_binary_cross_entropy.rst", "apis\\auto\\generated\\brainpy.losses.smooth_labels.rst", "apis\\auto\\generated\\brainpy.losses.softmax_cross_entropy.rst", "apis\\auto\\generated\\brainpy.math.BatchingMode.rst", "apis\\auto\\generated\\brainpy.math.BrainPyObject.rst", "apis\\auto\\generated\\brainpy.math.CONCAT_UPDATE.rst", "apis\\auto\\generated\\brainpy.math.DelayVariable.rst", "apis\\auto\\generated\\brainpy.math.FunAsObject.rst", "apis\\auto\\generated\\brainpy.math.LengthDelay.rst", "apis\\auto\\generated\\brainpy.math.Mode.rst", "apis\\auto\\generated\\brainpy.math.NeuLenDelay.rst", "apis\\auto\\generated\\brainpy.math.NeuTimeDelay.rst", "apis\\auto\\generated\\brainpy.math.NonBatchingMode.rst", "apis\\auto\\generated\\brainpy.math.ObjectTransform.rst", "apis\\auto\\generated\\brainpy.math.Parameter.rst", "apis\\auto\\generated\\brainpy.math.Partial.rst", "apis\\auto\\generated\\brainpy.math.ROTATE_UPDATE.rst", "apis\\auto\\generated\\brainpy.math.Tensor.rst", "apis\\auto\\generated\\brainpy.math.TimeDelay.rst", "apis\\auto\\generated\\brainpy.math.TrainVar.rst", "apis\\auto\\generated\\brainpy.math.TrainingMode.rst", "apis\\auto\\generated\\brainpy.math.Variable.rst", "apis\\auto\\generated\\brainpy.math.XLACustomOp.rst", "apis\\auto\\generated\\brainpy.math.abs.rst", "apis\\auto\\generated\\brainpy.math.absolute.rst", "apis\\auto\\generated\\brainpy.math.acos.rst", "apis\\auto\\generated\\brainpy.math.acosh.rst", "apis\\auto\\generated\\brainpy.math.add.rst", "apis\\auto\\generated\\brainpy.math.add_docstring.rst", "apis\\auto\\generated\\brainpy.math.add_newdoc.rst", "apis\\auto\\generated\\brainpy.math.add_newdoc_ufunc.rst", "apis\\auto\\generated\\brainpy.math.addcdiv.rst", "apis\\auto\\generated\\brainpy.math.addcmul.rst", "apis\\auto\\generated\\brainpy.math.all.rst", "apis\\auto\\generated\\brainpy.math.allclose.rst", "apis\\auto\\generated\\brainpy.math.alltrue.rst", "apis\\auto\\generated\\brainpy.math.amax.rst", "apis\\auto\\generated\\brainpy.math.amin.rst", "apis\\auto\\generated\\brainpy.math.angle.rst", "apis\\auto\\generated\\brainpy.math.any.rst", "apis\\auto\\generated\\brainpy.math.append.rst", "apis\\auto\\generated\\brainpy.math.apply_along_axis.rst", "apis\\auto\\generated\\brainpy.math.apply_over_axes.rst", "apis\\auto\\generated\\brainpy.math.arange.rst", "apis\\auto\\generated\\brainpy.math.arccos.rst", "apis\\auto\\generated\\brainpy.math.arccosh.rst", "apis\\auto\\generated\\brainpy.math.arcsin.rst", "apis\\auto\\generated\\brainpy.math.arcsinh.rst", "apis\\auto\\generated\\brainpy.math.arctan.rst", "apis\\auto\\generated\\brainpy.math.arctan2.rst", "apis\\auto\\generated\\brainpy.math.arctanh.rst", "apis\\auto\\generated\\brainpy.math.argmax.rst", "apis\\auto\\generated\\brainpy.math.argmin.rst", "apis\\auto\\generated\\brainpy.math.argsort.rst", "apis\\auto\\generated\\brainpy.math.argwhere.rst", "apis\\auto\\generated\\brainpy.math.around.rst", "apis\\auto\\generated\\brainpy.math.array.rst", "apis\\auto\\generated\\brainpy.math.array2string.rst", "apis\\auto\\generated\\brainpy.math.array_equal.rst", "apis\\auto\\generated\\brainpy.math.array_equiv.rst", "apis\\auto\\generated\\brainpy.math.array_repr.rst", "apis\\auto\\generated\\brainpy.math.array_split.rst", "apis\\auto\\generated\\brainpy.math.array_str.rst", "apis\\auto\\generated\\brainpy.math.as_device_array.rst", "apis\\auto\\generated\\brainpy.math.as_jax.rst", "apis\\auto\\generated\\brainpy.math.as_ndarray.rst", "apis\\auto\\generated\\brainpy.math.as_numpy.rst", "apis\\auto\\generated\\brainpy.math.as_variable.rst", "apis\\auto\\generated\\brainpy.math.asanyarray.rst", "apis\\auto\\generated\\brainpy.math.asarray.rst", "apis\\auto\\generated\\brainpy.math.ascontiguousarray.rst", "apis\\auto\\generated\\brainpy.math.asfarray.rst", "apis\\auto\\generated\\brainpy.math.asin.rst", "apis\\auto\\generated\\brainpy.math.asinh.rst", "apis\\auto\\generated\\brainpy.math.asmatrix.rst", "apis\\auto\\generated\\brainpy.math.asscalar.rst", "apis\\auto\\generated\\brainpy.math.atan.rst", "apis\\auto\\generated\\brainpy.math.atan2.rst", "apis\\auto\\generated\\brainpy.math.atanh.rst", "apis\\auto\\generated\\brainpy.math.atleast_1d.rst", "apis\\auto\\generated\\brainpy.math.atleast_2d.rst", "apis\\auto\\generated\\brainpy.math.atleast_3d.rst", "apis\\auto\\generated\\brainpy.math.average.rst", "apis\\auto\\generated\\brainpy.math.bartlett.rst", "apis\\auto\\generated\\brainpy.math.batching_environment.rst", "apis\\auto\\generated\\brainpy.math.batching_mode.rst", "apis\\auto\\generated\\brainpy.math.bincount.rst", "apis\\auto\\generated\\brainpy.math.bitwise_and.rst", "apis\\auto\\generated\\brainpy.math.bitwise_not.rst", "apis\\auto\\generated\\brainpy.math.bitwise_or.rst", "apis\\auto\\generated\\brainpy.math.bitwise_xor.rst", "apis\\auto\\generated\\brainpy.math.blackman.rst", "apis\\auto\\generated\\brainpy.math.block.rst", "apis\\auto\\generated\\brainpy.math.broadcast_arrays.rst", "apis\\auto\\generated\\brainpy.math.broadcast_shapes.rst", "apis\\auto\\generated\\brainpy.math.broadcast_to.rst", "apis\\auto\\generated\\brainpy.math.can_cast.rst", "apis\\auto\\generated\\brainpy.math.cast.rst", "apis\\auto\\generated\\brainpy.math.cat.rst", "apis\\auto\\generated\\brainpy.math.cbrt.rst", "apis\\auto\\generated\\brainpy.math.ceil.rst", "apis\\auto\\generated\\brainpy.math.celu.rst", "apis\\auto\\generated\\brainpy.math.choose.rst", "apis\\auto\\generated\\brainpy.math.clear_buffer_memory.rst", "apis\\auto\\generated\\brainpy.math.clip.rst", "apis\\auto\\generated\\brainpy.math.clip_by_value.rst", "apis\\auto\\generated\\brainpy.math.column_stack.rst", "apis\\auto\\generated\\brainpy.math.common_type.rst", "apis\\auto\\generated\\brainpy.math.compress.rst", "apis\\auto\\generated\\brainpy.math.concat.rst", "apis\\auto\\generated\\brainpy.math.concatenate.rst", "apis\\auto\\generated\\brainpy.math.cond.rst", "apis\\auto\\generated\\brainpy.math.conj.rst", "apis\\auto\\generated\\brainpy.math.conjugate.rst", "apis\\auto\\generated\\brainpy.math.convolve.rst", "apis\\auto\\generated\\brainpy.math.copy.rst", "apis\\auto\\generated\\brainpy.math.copysign.rst", "apis\\auto\\generated\\brainpy.math.copyto.rst", "apis\\auto\\generated\\brainpy.math.corrcoef.rst", "apis\\auto\\generated\\brainpy.math.correlate.rst", "apis\\auto\\generated\\brainpy.math.cos.rst", "apis\\auto\\generated\\brainpy.math.cosh.rst", "apis\\auto\\generated\\brainpy.math.count_nonzero.rst", "apis\\auto\\generated\\brainpy.math.cov.rst", "apis\\auto\\generated\\brainpy.math.cross.rst", "apis\\auto\\generated\\brainpy.math.csr_matvec.rst", "apis\\auto\\generated\\brainpy.math.cumprod.rst", "apis\\auto\\generated\\brainpy.math.cumproduct.rst", "apis\\auto\\generated\\brainpy.math.cumsum.rst", "apis\\auto\\generated\\brainpy.math.deg2rad.rst", "apis\\auto\\generated\\brainpy.math.degrees.rst", "apis\\auto\\generated\\brainpy.math.delete.rst", "apis\\auto\\generated\\brainpy.math.dftype.rst", "apis\\auto\\generated\\brainpy.math.diag.rst", "apis\\auto\\generated\\brainpy.math.diag_indices.rst", "apis\\auto\\generated\\brainpy.math.diag_indices_from.rst", "apis\\auto\\generated\\brainpy.math.diagflat.rst", "apis\\auto\\generated\\brainpy.math.diagonal.rst", "apis\\auto\\generated\\brainpy.math.diff.rst", "apis\\auto\\generated\\brainpy.math.digitize.rst", "apis\\auto\\generated\\brainpy.math.disable_gpu_memory_preallocation.rst", "apis\\auto\\generated\\brainpy.math.disable_x64.rst", "apis\\auto\\generated\\brainpy.math.disp.rst", "apis\\auto\\generated\\brainpy.math.ditype.rst", "apis\\auto\\generated\\brainpy.math.divide.rst", "apis\\auto\\generated\\brainpy.math.divmod.rst", "apis\\auto\\generated\\brainpy.math.dot.rst", "apis\\auto\\generated\\brainpy.math.dsplit.rst", "apis\\auto\\generated\\brainpy.math.dstack.rst", "apis\\auto\\generated\\brainpy.math.dtype.rst", "apis\\auto\\generated\\brainpy.math.dyn_dict.rst", "apis\\auto\\generated\\brainpy.math.dyn_seq.rst", "apis\\auto\\generated\\brainpy.math.e.rst", "apis\\auto\\generated\\brainpy.math.ediff1d.rst", "apis\\auto\\generated\\brainpy.math.einsum.rst", "apis\\auto\\generated\\brainpy.math.einsum_path.rst", "apis\\auto\\generated\\brainpy.math.elu.rst", "apis\\auto\\generated\\brainpy.math.empty.rst", "apis\\auto\\generated\\brainpy.math.empty_like.rst", "apis\\auto\\generated\\brainpy.math.enable_gpu_memory_preallocation.rst", "apis\\auto\\generated\\brainpy.math.enable_x64.rst", "apis\\auto\\generated\\brainpy.math.environment.rst", "apis\\auto\\generated\\brainpy.math.equal.rst", "apis\\auto\\generated\\brainpy.math.event_csr_matvec.rst", "apis\\auto\\generated\\brainpy.math.exp.rst", "apis\\auto\\generated\\brainpy.math.exp2.rst", "apis\\auto\\generated\\brainpy.math.expand_dims.rst", "apis\\auto\\generated\\brainpy.math.expm1.rst", "apis\\auto\\generated\\brainpy.math.extract.rst", "apis\\auto\\generated\\brainpy.math.eye.rst", "apis\\auto\\generated\\brainpy.math.fabs.rst", "apis\\auto\\generated\\brainpy.math.fft.fft.rst", "apis\\auto\\generated\\brainpy.math.fft.fft2.rst", "apis\\auto\\generated\\brainpy.math.fft.fftfreq.rst", "apis\\auto\\generated\\brainpy.math.fft.fftn.rst", "apis\\auto\\generated\\brainpy.math.fft.fftshift.rst", "apis\\auto\\generated\\brainpy.math.fft.hfft.rst", "apis\\auto\\generated\\brainpy.math.fft.ifft.rst", "apis\\auto\\generated\\brainpy.math.fft.ifft2.rst", "apis\\auto\\generated\\brainpy.math.fft.ifftn.rst", "apis\\auto\\generated\\brainpy.math.fft.ifftshift.rst", "apis\\auto\\generated\\brainpy.math.fft.ihfft.rst", "apis\\auto\\generated\\brainpy.math.fft.irfft.rst", "apis\\auto\\generated\\brainpy.math.fft.irfft2.rst", "apis\\auto\\generated\\brainpy.math.fft.irfftn.rst", "apis\\auto\\generated\\brainpy.math.fft.rfft.rst", "apis\\auto\\generated\\brainpy.math.fft.rfft2.rst", "apis\\auto\\generated\\brainpy.math.fft.rfftfreq.rst", "apis\\auto\\generated\\brainpy.math.fft.rfftn.rst", "apis\\auto\\generated\\brainpy.math.fill_diagonal.rst", "apis\\auto\\generated\\brainpy.math.finfo.rst", "apis\\auto\\generated\\brainpy.math.fix.rst", "apis\\auto\\generated\\brainpy.math.flatnonzero.rst", "apis\\auto\\generated\\brainpy.math.flatten.rst", "apis\\auto\\generated\\brainpy.math.flip.rst", "apis\\auto\\generated\\brainpy.math.fliplr.rst", "apis\\auto\\generated\\brainpy.math.flipud.rst", "apis\\auto\\generated\\brainpy.math.float_power.rst", "apis\\auto\\generated\\brainpy.math.floor.rst", "apis\\auto\\generated\\brainpy.math.floor_divide.rst", "apis\\auto\\generated\\brainpy.math.fmax.rst", "apis\\auto\\generated\\brainpy.math.fmin.rst", "apis\\auto\\generated\\brainpy.math.fmod.rst", "apis\\auto\\generated\\brainpy.math.for_loop.rst", "apis\\auto\\generated\\brainpy.math.frexp.rst", "apis\\auto\\generated\\brainpy.math.frombuffer.rst", "apis\\auto\\generated\\brainpy.math.fromfile.rst", "apis\\auto\\generated\\brainpy.math.fromfunction.rst", "apis\\auto\\generated\\brainpy.math.fromiter.rst", "apis\\auto\\generated\\brainpy.math.fromstring.rst", "apis\\auto\\generated\\brainpy.math.full.rst", "apis\\auto\\generated\\brainpy.math.full_like.rst", "apis\\auto\\generated\\brainpy.math.function.rst", "apis\\auto\\generated\\brainpy.math.gcd.rst", "apis\\auto\\generated\\brainpy.math.gelu.rst", "apis\\auto\\generated\\brainpy.math.genfromtxt.rst", "apis\\auto\\generated\\brainpy.math.geomspace.rst", "apis\\auto\\generated\\brainpy.math.get_bool.rst", "apis\\auto\\generated\\brainpy.math.get_complex.rst", "apis\\auto\\generated\\brainpy.math.get_dt.rst", "apis\\auto\\generated\\brainpy.math.get_float.rst", "apis\\auto\\generated\\brainpy.math.get_int.rst", "apis\\auto\\generated\\brainpy.math.get_mode.rst", "apis\\auto\\generated\\brainpy.math.get_platform.rst", "apis\\auto\\generated\\brainpy.math.get_printoptions.rst", "apis\\auto\\generated\\brainpy.math.glu.rst", "apis\\auto\\generated\\brainpy.math.grad.rst", "apis\\auto\\generated\\brainpy.math.gradient.rst", "apis\\auto\\generated\\brainpy.math.greater.rst", "apis\\auto\\generated\\brainpy.math.greater_equal.rst", "apis\\auto\\generated\\brainpy.math.hamming.rst", "apis\\auto\\generated\\brainpy.math.hanning.rst", "apis\\auto\\generated\\brainpy.math.hard_sigmoid.rst", "apis\\auto\\generated\\brainpy.math.hard_silu.rst", "apis\\auto\\generated\\brainpy.math.hard_swish.rst", "apis\\auto\\generated\\brainpy.math.hard_tanh.rst", "apis\\auto\\generated\\brainpy.math.heaviside.rst", "apis\\auto\\generated\\brainpy.math.hessian.rst", "apis\\auto\\generated\\brainpy.math.histogram.rst", "apis\\auto\\generated\\brainpy.math.histogram2d.rst", "apis\\auto\\generated\\brainpy.math.histogram_bin_edges.rst", "apis\\auto\\generated\\brainpy.math.histogramdd.rst", "apis\\auto\\generated\\brainpy.math.hsplit.rst", "apis\\auto\\generated\\brainpy.math.hstack.rst", "apis\\auto\\generated\\brainpy.math.hypot.rst", "apis\\auto\\generated\\brainpy.math.i0.rst", "apis\\auto\\generated\\brainpy.math.identity.rst", "apis\\auto\\generated\\brainpy.math.ifelse.rst", "apis\\auto\\generated\\brainpy.math.iinfo.rst", "apis\\auto\\generated\\brainpy.math.imag.rst", "apis\\auto\\generated\\brainpy.math.in1d.rst", "apis\\auto\\generated\\brainpy.math.indices.rst", "apis\\auto\\generated\\brainpy.math.inf.rst", "apis\\auto\\generated\\brainpy.math.info.rst", "apis\\auto\\generated\\brainpy.math.inner.rst", "apis\\auto\\generated\\brainpy.math.insert.rst", "apis\\auto\\generated\\brainpy.math.interp.rst", "apis\\auto\\generated\\brainpy.math.intersect1d.rst", "apis\\auto\\generated\\brainpy.math.invert.rst", "apis\\auto\\generated\\brainpy.math.isclose.rst", "apis\\auto\\generated\\brainpy.math.iscomplex.rst", "apis\\auto\\generated\\brainpy.math.iscomplexobj.rst", "apis\\auto\\generated\\brainpy.math.isfinite.rst", "apis\\auto\\generated\\brainpy.math.isin.rst", "apis\\auto\\generated\\brainpy.math.isinf.rst", "apis\\auto\\generated\\brainpy.math.isnan.rst", "apis\\auto\\generated\\brainpy.math.isneginf.rst", "apis\\auto\\generated\\brainpy.math.isposinf.rst", "apis\\auto\\generated\\brainpy.math.isreal.rst", "apis\\auto\\generated\\brainpy.math.isrealobj.rst", "apis\\auto\\generated\\brainpy.math.isscalar.rst", "apis\\auto\\generated\\brainpy.math.issubclass_.rst", "apis\\auto\\generated\\brainpy.math.issubdtype.rst", "apis\\auto\\generated\\brainpy.math.issubsctype.rst", "apis\\auto\\generated\\brainpy.math.iterable.rst", "apis\\auto\\generated\\brainpy.math.ix_.rst", "apis\\auto\\generated\\brainpy.math.jacfwd.rst", "apis\\auto\\generated\\brainpy.math.jacobian.rst", "apis\\auto\\generated\\brainpy.math.jacrev.rst", "apis\\auto\\generated\\brainpy.math.jit.rst", "apis\\auto\\generated\\brainpy.math.kaiser.rst", "apis\\auto\\generated\\brainpy.math.kron.rst", "apis\\auto\\generated\\brainpy.math.lcm.rst", "apis\\auto\\generated\\brainpy.math.ldexp.rst", "apis\\auto\\generated\\brainpy.math.leaky_relu.rst", "apis\\auto\\generated\\brainpy.math.left_shift.rst", "apis\\auto\\generated\\brainpy.math.less.rst", "apis\\auto\\generated\\brainpy.math.less_equal.rst", "apis\\auto\\generated\\brainpy.math.lexsort.rst", "apis\\auto\\generated\\brainpy.math.linalg.cholesky.rst", "apis\\auto\\generated\\brainpy.math.linalg.cond.rst", "apis\\auto\\generated\\brainpy.math.linalg.det.rst", "apis\\auto\\generated\\brainpy.math.linalg.eig.rst", "apis\\auto\\generated\\brainpy.math.linalg.eigh.rst", "apis\\auto\\generated\\brainpy.math.linalg.eigvals.rst", "apis\\auto\\generated\\brainpy.math.linalg.eigvalsh.rst", "apis\\auto\\generated\\brainpy.math.linalg.inv.rst", "apis\\auto\\generated\\brainpy.math.linalg.lstsq.rst", "apis\\auto\\generated\\brainpy.math.linalg.matrix_power.rst", "apis\\auto\\generated\\brainpy.math.linalg.matrix_rank.rst", "apis\\auto\\generated\\brainpy.math.linalg.multi_dot.rst", "apis\\auto\\generated\\brainpy.math.linalg.norm.rst", "apis\\auto\\generated\\brainpy.math.linalg.pinv.rst", "apis\\auto\\generated\\brainpy.math.linalg.qr.rst", "apis\\auto\\generated\\brainpy.math.linalg.slogdet.rst", "apis\\auto\\generated\\brainpy.math.linalg.solve.rst", "apis\\auto\\generated\\brainpy.math.linalg.svd.rst", "apis\\auto\\generated\\brainpy.math.linalg.tensorinv.rst", "apis\\auto\\generated\\brainpy.math.linalg.tensorsolve.rst", "apis\\auto\\generated\\brainpy.math.linspace.rst", "apis\\auto\\generated\\brainpy.math.load.rst", "apis\\auto\\generated\\brainpy.math.loadtxt.rst", "apis\\auto\\generated\\brainpy.math.log.rst", "apis\\auto\\generated\\brainpy.math.log10.rst", "apis\\auto\\generated\\brainpy.math.log1p.rst", "apis\\auto\\generated\\brainpy.math.log2.rst", "apis\\auto\\generated\\brainpy.math.log_sigmoid.rst", "apis\\auto\\generated\\brainpy.math.log_softmax.rst", "apis\\auto\\generated\\brainpy.math.logaddexp.rst", "apis\\auto\\generated\\brainpy.math.logaddexp2.rst", "apis\\auto\\generated\\brainpy.math.logical_and.rst", "apis\\auto\\generated\\brainpy.math.logical_not.rst", "apis\\auto\\generated\\brainpy.math.logical_or.rst", "apis\\auto\\generated\\brainpy.math.logical_xor.rst", "apis\\auto\\generated\\brainpy.math.logspace.rst", "apis\\auto\\generated\\brainpy.math.make_cond.rst", "apis\\auto\\generated\\brainpy.math.make_loop.rst", "apis\\auto\\generated\\brainpy.math.make_while.rst", "apis\\auto\\generated\\brainpy.math.mask_indices.rst", "apis\\auto\\generated\\brainpy.math.mat.rst", "apis\\auto\\generated\\brainpy.math.matmul.rst", "apis\\auto\\generated\\brainpy.math.matrix.rst", "apis\\auto\\generated\\brainpy.math.max.rst", "apis\\auto\\generated\\brainpy.math.maximum.rst", "apis\\auto\\generated\\brainpy.math.mean.rst", "apis\\auto\\generated\\brainpy.math.median.rst", "apis\\auto\\generated\\brainpy.math.meshgrid.rst", "apis\\auto\\generated\\brainpy.math.min.rst", "apis\\auto\\generated\\brainpy.math.minimum.rst", "apis\\auto\\generated\\brainpy.math.mod.rst", "apis\\auto\\generated\\brainpy.math.modf.rst", "apis\\auto\\generated\\brainpy.math.moveaxis.rst", "apis\\auto\\generated\\brainpy.math.msort.rst", "apis\\auto\\generated\\brainpy.math.multiply.rst", "apis\\auto\\generated\\brainpy.math.nan_to_num.rst", "apis\\auto\\generated\\brainpy.math.nanargmax.rst", "apis\\auto\\generated\\brainpy.math.nanargmin.rst", "apis\\auto\\generated\\brainpy.math.nancumprod.rst", "apis\\auto\\generated\\brainpy.math.nancumsum.rst", "apis\\auto\\generated\\brainpy.math.nanmax.rst", "apis\\auto\\generated\\brainpy.math.nanmean.rst", "apis\\auto\\generated\\brainpy.math.nanmedian.rst", "apis\\auto\\generated\\brainpy.math.nanmin.rst", "apis\\auto\\generated\\brainpy.math.nanpercentile.rst", "apis\\auto\\generated\\brainpy.math.nanprod.rst", "apis\\auto\\generated\\brainpy.math.nanquantile.rst", "apis\\auto\\generated\\brainpy.math.nanstd.rst", "apis\\auto\\generated\\brainpy.math.nansum.rst", "apis\\auto\\generated\\brainpy.math.nanvar.rst", "apis\\auto\\generated\\brainpy.math.ndim.rst", "apis\\auto\\generated\\brainpy.math.negative.rst", "apis\\auto\\generated\\brainpy.math.nextafter.rst", "apis\\auto\\generated\\brainpy.math.nonbatching_mode.rst", "apis\\auto\\generated\\brainpy.math.nonzero.rst", "apis\\auto\\generated\\brainpy.math.normalize.rst", "apis\\auto\\generated\\brainpy.math.not_equal.rst", "apis\\auto\\generated\\brainpy.math.one_hot.rst", "apis\\auto\\generated\\brainpy.math.ones.rst", "apis\\auto\\generated\\brainpy.math.ones_like.rst", "apis\\auto\\generated\\brainpy.math.outer.rst", "apis\\auto\\generated\\brainpy.math.packbits.rst", "apis\\auto\\generated\\brainpy.math.pad.rst", "apis\\auto\\generated\\brainpy.math.percentile.rst", "apis\\auto\\generated\\brainpy.math.pi.rst", "apis\\auto\\generated\\brainpy.math.piecewise.rst", "apis\\auto\\generated\\brainpy.math.place.rst", "apis\\auto\\generated\\brainpy.math.poly.rst", "apis\\auto\\generated\\brainpy.math.polyadd.rst", "apis\\auto\\generated\\brainpy.math.polyder.rst", "apis\\auto\\generated\\brainpy.math.polydiv.rst", "apis\\auto\\generated\\brainpy.math.polyfit.rst", "apis\\auto\\generated\\brainpy.math.polyint.rst", "apis\\auto\\generated\\brainpy.math.polymul.rst", "apis\\auto\\generated\\brainpy.math.polysub.rst", "apis\\auto\\generated\\brainpy.math.polyval.rst", "apis\\auto\\generated\\brainpy.math.positive.rst", "apis\\auto\\generated\\brainpy.math.power.rst", "apis\\auto\\generated\\brainpy.math.pre2post_coo_event_sum.rst", "apis\\auto\\generated\\brainpy.math.pre2post_event_prod.rst", "apis\\auto\\generated\\brainpy.math.pre2post_event_sum.rst", "apis\\auto\\generated\\brainpy.math.pre2post_max.rst", "apis\\auto\\generated\\brainpy.math.pre2post_mean.rst", "apis\\auto\\generated\\brainpy.math.pre2post_min.rst", "apis\\auto\\generated\\brainpy.math.pre2post_prod.rst", "apis\\auto\\generated\\brainpy.math.pre2post_sum.rst", "apis\\auto\\generated\\brainpy.math.pre2syn.rst", "apis\\auto\\generated\\brainpy.math.printoptions.rst", "apis\\auto\\generated\\brainpy.math.prod.rst", "apis\\auto\\generated\\brainpy.math.product.rst", "apis\\auto\\generated\\brainpy.math.promote_types.rst", "apis\\auto\\generated\\brainpy.math.ptp.rst", "apis\\auto\\generated\\brainpy.math.put.rst", "apis\\auto\\generated\\brainpy.math.putmask.rst", "apis\\auto\\generated\\brainpy.math.quantile.rst", "apis\\auto\\generated\\brainpy.math.rad2deg.rst", "apis\\auto\\generated\\brainpy.math.radians.rst", "apis\\auto\\generated\\brainpy.math.random.DEFAULT.rst", "apis\\auto\\generated\\brainpy.math.random.Generator.rst", "apis\\auto\\generated\\brainpy.math.random.RandomState.rst", "apis\\auto\\generated\\brainpy.math.random.bernoulli.rst", "apis\\auto\\generated\\brainpy.math.random.beta.rst", "apis\\auto\\generated\\brainpy.math.random.binomial.rst", "apis\\auto\\generated\\brainpy.math.random.categorical.rst", "apis\\auto\\generated\\brainpy.math.random.chisquare.rst", "apis\\auto\\generated\\brainpy.math.random.choice.rst", "apis\\auto\\generated\\brainpy.math.random.default_rng.rst", "apis\\auto\\generated\\brainpy.math.random.dirichlet.rst", "apis\\auto\\generated\\brainpy.math.random.exponential.rst", "apis\\auto\\generated\\brainpy.math.random.f.rst", "apis\\auto\\generated\\brainpy.math.random.gamma.rst", "apis\\auto\\generated\\brainpy.math.random.geometric.rst", "apis\\auto\\generated\\brainpy.math.random.gumbel.rst", "apis\\auto\\generated\\brainpy.math.random.hypergeometric.rst", "apis\\auto\\generated\\brainpy.math.random.laplace.rst", "apis\\auto\\generated\\brainpy.math.random.loggamma.rst", "apis\\auto\\generated\\brainpy.math.random.logistic.rst", "apis\\auto\\generated\\brainpy.math.random.lognormal.rst", "apis\\auto\\generated\\brainpy.math.random.logseries.rst", "apis\\auto\\generated\\brainpy.math.random.maxwell.rst", "apis\\auto\\generated\\brainpy.math.random.multinomial.rst", "apis\\auto\\generated\\brainpy.math.random.multivariate_normal.rst", "apis\\auto\\generated\\brainpy.math.random.negative_binomial.rst", "apis\\auto\\generated\\brainpy.math.random.noncentral_chisquare.rst", "apis\\auto\\generated\\brainpy.math.random.noncentral_f.rst", "apis\\auto\\generated\\brainpy.math.random.normal.rst", "apis\\auto\\generated\\brainpy.math.random.orthogonal.rst", "apis\\auto\\generated\\brainpy.math.random.pareto.rst", "apis\\auto\\generated\\brainpy.math.random.permutation.rst", "apis\\auto\\generated\\brainpy.math.random.poisson.rst", "apis\\auto\\generated\\brainpy.math.random.power.rst", "apis\\auto\\generated\\brainpy.math.random.rand.rst", "apis\\auto\\generated\\brainpy.math.random.rand_like.rst", "apis\\auto\\generated\\brainpy.math.random.randint.rst", "apis\\auto\\generated\\brainpy.math.random.randint_like.rst", "apis\\auto\\generated\\brainpy.math.random.randn.rst", "apis\\auto\\generated\\brainpy.math.random.randn_like.rst", "apis\\auto\\generated\\brainpy.math.random.random.rst", "apis\\auto\\generated\\brainpy.math.random.random_integers.rst", "apis\\auto\\generated\\brainpy.math.random.random_sample.rst", "apis\\auto\\generated\\brainpy.math.random.ranf.rst", "apis\\auto\\generated\\brainpy.math.random.rayleigh.rst", "apis\\auto\\generated\\brainpy.math.random.sample.rst", "apis\\auto\\generated\\brainpy.math.random.seed.rst", "apis\\auto\\generated\\brainpy.math.random.shuffle.rst", "apis\\auto\\generated\\brainpy.math.random.split_key.rst", "apis\\auto\\generated\\brainpy.math.random.standard_cauchy.rst", "apis\\auto\\generated\\brainpy.math.random.standard_exponential.rst", "apis\\auto\\generated\\brainpy.math.random.standard_gamma.rst", "apis\\auto\\generated\\brainpy.math.random.standard_normal.rst", "apis\\auto\\generated\\brainpy.math.random.standard_t.rst", "apis\\auto\\generated\\brainpy.math.random.t.rst", "apis\\auto\\generated\\brainpy.math.random.triangular.rst", "apis\\auto\\generated\\brainpy.math.random.truncated_normal.rst", "apis\\auto\\generated\\brainpy.math.random.uniform.rst", "apis\\auto\\generated\\brainpy.math.random.vonmises.rst", "apis\\auto\\generated\\brainpy.math.random.wald.rst", "apis\\auto\\generated\\brainpy.math.random.weibull.rst", "apis\\auto\\generated\\brainpy.math.random.weibull_min.rst", "apis\\auto\\generated\\brainpy.math.random.zipf.rst", "apis\\auto\\generated\\brainpy.math.ravel.rst", "apis\\auto\\generated\\brainpy.math.ravel_multi_index.rst", "apis\\auto\\generated\\brainpy.math.real.rst", "apis\\auto\\generated\\brainpy.math.reciprocal.rst", "apis\\auto\\generated\\brainpy.math.reduce_all.rst", "apis\\auto\\generated\\brainpy.math.reduce_any.rst", "apis\\auto\\generated\\brainpy.math.reduce_euclidean_norm.rst", "apis\\auto\\generated\\brainpy.math.reduce_logsumexp.rst", "apis\\auto\\generated\\brainpy.math.reduce_max.rst", "apis\\auto\\generated\\brainpy.math.reduce_mean.rst", "apis\\auto\\generated\\brainpy.math.reduce_min.rst", "apis\\auto\\generated\\brainpy.math.reduce_prod.rst", "apis\\auto\\generated\\brainpy.math.reduce_std.rst", "apis\\auto\\generated\\brainpy.math.reduce_sum.rst", "apis\\auto\\generated\\brainpy.math.reduce_variance.rst", "apis\\auto\\generated\\brainpy.math.relu.rst", "apis\\auto\\generated\\brainpy.math.relu6.rst", "apis\\auto\\generated\\brainpy.math.remainder.rst", "apis\\auto\\generated\\brainpy.math.repeat.rst", "apis\\auto\\generated\\brainpy.math.reshape.rst", "apis\\auto\\generated\\brainpy.math.resize.rst", "apis\\auto\\generated\\brainpy.math.result_type.rst", "apis\\auto\\generated\\brainpy.math.right_shift.rst", "apis\\auto\\generated\\brainpy.math.rint.rst", "apis\\auto\\generated\\brainpy.math.roll.rst", "apis\\auto\\generated\\brainpy.math.rollaxis.rst", "apis\\auto\\generated\\brainpy.math.roots.rst", "apis\\auto\\generated\\brainpy.math.rot90.rst", "apis\\auto\\generated\\brainpy.math.round.rst", "apis\\auto\\generated\\brainpy.math.round_.rst", "apis\\auto\\generated\\brainpy.math.row_stack.rst", "apis\\auto\\generated\\brainpy.math.safe_eval.rst", "apis\\auto\\generated\\brainpy.math.save.rst", "apis\\auto\\generated\\brainpy.math.savetxt.rst", "apis\\auto\\generated\\brainpy.math.savez.rst", "apis\\auto\\generated\\brainpy.math.savez_compressed.rst", "apis\\auto\\generated\\brainpy.math.searchsorted.rst", "apis\\auto\\generated\\brainpy.math.segment_max.rst", "apis\\auto\\generated\\brainpy.math.segment_mean.rst", "apis\\auto\\generated\\brainpy.math.segment_min.rst", "apis\\auto\\generated\\brainpy.math.segment_prod.rst", "apis\\auto\\generated\\brainpy.math.segment_sum.rst", "apis\\auto\\generated\\brainpy.math.select.rst", "apis\\auto\\generated\\brainpy.math.selu.rst", "apis\\auto\\generated\\brainpy.math.set_bool.rst", "apis\\auto\\generated\\brainpy.math.set_complex.rst", "apis\\auto\\generated\\brainpy.math.set_dt.rst", "apis\\auto\\generated\\brainpy.math.set_environment.rst", "apis\\auto\\generated\\brainpy.math.set_float.rst", "apis\\auto\\generated\\brainpy.math.set_host_device_count.rst", "apis\\auto\\generated\\brainpy.math.set_int.rst", "apis\\auto\\generated\\brainpy.math.set_mode.rst", "apis\\auto\\generated\\brainpy.math.set_platform.rst", "apis\\auto\\generated\\brainpy.math.set_printoptions.rst", "apis\\auto\\generated\\brainpy.math.setdiff1d.rst", "apis\\auto\\generated\\brainpy.math.setxor1d.rst", "apis\\auto\\generated\\brainpy.math.shape.rst", "apis\\auto\\generated\\brainpy.math.show_config.rst", "apis\\auto\\generated\\brainpy.math.sigmoid.rst", "apis\\auto\\generated\\brainpy.math.sign.rst", "apis\\auto\\generated\\brainpy.math.signbit.rst", "apis\\auto\\generated\\brainpy.math.silu.rst", "apis\\auto\\generated\\brainpy.math.sin.rst", "apis\\auto\\generated\\brainpy.math.sinc.rst", "apis\\auto\\generated\\brainpy.math.sinh.rst", "apis\\auto\\generated\\brainpy.math.size.rst", "apis\\auto\\generated\\brainpy.math.soft_sign.rst", "apis\\auto\\generated\\brainpy.math.softmax.rst", "apis\\auto\\generated\\brainpy.math.softplus.rst", "apis\\auto\\generated\\brainpy.math.sometrue.rst", "apis\\auto\\generated\\brainpy.math.sort.rst", "apis\\auto\\generated\\brainpy.math.sort_complex.rst", "apis\\auto\\generated\\brainpy.math.sparse_matmul.rst", "apis\\auto\\generated\\brainpy.math.split.rst", "apis\\auto\\generated\\brainpy.math.sqrt.rst", "apis\\auto\\generated\\brainpy.math.square.rst", "apis\\auto\\generated\\brainpy.math.squeeze.rst", "apis\\auto\\generated\\brainpy.math.stack.rst", "apis\\auto\\generated\\brainpy.math.std.rst", "apis\\auto\\generated\\brainpy.math.subtract.rst", "apis\\auto\\generated\\brainpy.math.sum.rst", "apis\\auto\\generated\\brainpy.math.surrogate.arctan.rst", "apis\\auto\\generated\\brainpy.math.surrogate.erf.rst", "apis\\auto\\generated\\brainpy.math.surrogate.gaussian_grad.rst", "apis\\auto\\generated\\brainpy.math.surrogate.inv_square_grad.rst", "apis\\auto\\generated\\brainpy.math.surrogate.inv_square_grad2.rst", "apis\\auto\\generated\\brainpy.math.surrogate.leaky_relu.rst", "apis\\auto\\generated\\brainpy.math.surrogate.log_tailed_relu.rst", "apis\\auto\\generated\\brainpy.math.surrogate.multi_gaussian_grad.rst", "apis\\auto\\generated\\brainpy.math.surrogate.nonzero_sign_log.rst", "apis\\auto\\generated\\brainpy.math.surrogate.piecewise_exp.rst", "apis\\auto\\generated\\brainpy.math.surrogate.piecewise_leaky_relu.rst", "apis\\auto\\generated\\brainpy.math.surrogate.piecewise_quadratic.rst", "apis\\auto\\generated\\brainpy.math.surrogate.q_pseudo_spike.rst", "apis\\auto\\generated\\brainpy.math.surrogate.relu_grad.rst", "apis\\auto\\generated\\brainpy.math.surrogate.relu_grad2.rst", "apis\\auto\\generated\\brainpy.math.surrogate.s2nn.rst", "apis\\auto\\generated\\brainpy.math.surrogate.sigmoid.rst", "apis\\auto\\generated\\brainpy.math.surrogate.slayer_grad.rst", "apis\\auto\\generated\\brainpy.math.surrogate.soft_sign.rst", "apis\\auto\\generated\\brainpy.math.surrogate.squarewave_fourier_series.rst", "apis\\auto\\generated\\brainpy.math.swapaxes.rst", "apis\\auto\\generated\\brainpy.math.swish.rst", "apis\\auto\\generated\\brainpy.math.syn2post.rst", "apis\\auto\\generated\\brainpy.math.syn2post_max.rst", "apis\\auto\\generated\\brainpy.math.syn2post_mean.rst", "apis\\auto\\generated\\brainpy.math.syn2post_min.rst", "apis\\auto\\generated\\brainpy.math.syn2post_prod.rst", "apis\\auto\\generated\\brainpy.math.syn2post_softmax.rst", "apis\\auto\\generated\\brainpy.math.syn2post_sum.rst", "apis\\auto\\generated\\brainpy.math.take.rst", "apis\\auto\\generated\\brainpy.math.take_along_axis.rst", "apis\\auto\\generated\\brainpy.math.tan.rst", "apis\\auto\\generated\\brainpy.math.tanh.rst", "apis\\auto\\generated\\brainpy.math.tensordot.rst", "apis\\auto\\generated\\brainpy.math.tile.rst", "apis\\auto\\generated\\brainpy.math.to_dynsys.rst", "apis\\auto\\generated\\brainpy.math.to_object.rst", "apis\\auto\\generated\\brainpy.math.trace.rst", "apis\\auto\\generated\\brainpy.math.training_environment.rst", "apis\\auto\\generated\\brainpy.math.training_mode.rst", "apis\\auto\\generated\\brainpy.math.transpose.rst", "apis\\auto\\generated\\brainpy.math.trapz.rst", "apis\\auto\\generated\\brainpy.math.tri.rst", "apis\\auto\\generated\\brainpy.math.tril.rst", "apis\\auto\\generated\\brainpy.math.tril_indices.rst", "apis\\auto\\generated\\brainpy.math.tril_indices_from.rst", "apis\\auto\\generated\\brainpy.math.trim_zeros.rst", "apis\\auto\\generated\\brainpy.math.triu.rst", "apis\\auto\\generated\\brainpy.math.triu_indices.rst", "apis\\auto\\generated\\brainpy.math.triu_indices_from.rst", "apis\\auto\\generated\\brainpy.math.true_divide.rst", "apis\\auto\\generated\\brainpy.math.trunc.rst", "apis\\auto\\generated\\brainpy.math.typename.rst", "apis\\auto\\generated\\brainpy.math.union1d.rst", "apis\\auto\\generated\\brainpy.math.unique.rst", "apis\\auto\\generated\\brainpy.math.unpackbits.rst", "apis\\auto\\generated\\brainpy.math.unravel_index.rst", "apis\\auto\\generated\\brainpy.math.unsorted_segment_max.rst", "apis\\auto\\generated\\brainpy.math.unsorted_segment_mean.rst", "apis\\auto\\generated\\brainpy.math.unsorted_segment_min.rst", "apis\\auto\\generated\\brainpy.math.unsorted_segment_prod.rst", "apis\\auto\\generated\\brainpy.math.unsorted_segment_sqrt_n.rst", "apis\\auto\\generated\\brainpy.math.unsorted_segment_sum.rst", "apis\\auto\\generated\\brainpy.math.unsqueeze.rst", "apis\\auto\\generated\\brainpy.math.unwrap.rst", "apis\\auto\\generated\\brainpy.math.vander.rst", "apis\\auto\\generated\\brainpy.math.var.rst", "apis\\auto\\generated\\brainpy.math.vdot.rst", "apis\\auto\\generated\\brainpy.math.vector_grad.rst", "apis\\auto\\generated\\brainpy.math.vsplit.rst", "apis\\auto\\generated\\brainpy.math.vstack.rst", "apis\\auto\\generated\\brainpy.math.where.rst", "apis\\auto\\generated\\brainpy.math.while_loop.rst", "apis\\auto\\generated\\brainpy.math.zeros.rst", "apis\\auto\\generated\\brainpy.math.zeros_like.rst", "apis\\auto\\generated\\brainpy.measure.cross_correlation.rst", "apis\\auto\\generated\\brainpy.measure.firing_rate.rst", "apis\\auto\\generated\\brainpy.measure.functional_connectivity.rst", "apis\\auto\\generated\\brainpy.measure.matrix_correlation.rst", "apis\\auto\\generated\\brainpy.measure.raster_plot.rst", "apis\\auto\\generated\\brainpy.measure.unitary_LFP.rst", "apis\\auto\\generated\\brainpy.measure.voltage_fluctuation.rst", "apis\\auto\\generated\\brainpy.measure.weighted_correlation.rst", "apis\\auto\\generated\\brainpy.neurons.ALIFBellec2020.rst", "apis\\auto\\generated\\brainpy.neurons.AdExIF.rst", "apis\\auto\\generated\\brainpy.neurons.AdQuaIF.rst", "apis\\auto\\generated\\brainpy.neurons.ExpIF.rst", "apis\\auto\\generated\\brainpy.neurons.FHN.rst", "apis\\auto\\generated\\brainpy.neurons.FractionalFHR.rst", "apis\\auto\\generated\\brainpy.neurons.FractionalIzhikevich.rst", "apis\\auto\\generated\\brainpy.neurons.FractionalNeuron.rst", "apis\\auto\\generated\\brainpy.neurons.GIF.rst", "apis\\auto\\generated\\brainpy.neurons.HH.rst", "apis\\auto\\generated\\brainpy.neurons.HindmarshRose.rst", "apis\\auto\\generated\\brainpy.neurons.InputGroup.rst", "apis\\auto\\generated\\brainpy.neurons.Izhikevich.rst", "apis\\auto\\generated\\brainpy.neurons.LIF.rst", "apis\\auto\\generated\\brainpy.neurons.LeakyIntegrator.rst", "apis\\auto\\generated\\brainpy.neurons.MorrisLecar.rst", "apis\\auto\\generated\\brainpy.neurons.OUProcess.rst", "apis\\auto\\generated\\brainpy.neurons.OutputGroup.rst", "apis\\auto\\generated\\brainpy.neurons.PinskyRinzelModel.rst", "apis\\auto\\generated\\brainpy.neurons.PoissonGroup.rst", "apis\\auto\\generated\\brainpy.neurons.QuaIF.rst", "apis\\auto\\generated\\brainpy.neurons.SpikeTimeGroup.rst", "apis\\auto\\generated\\brainpy.neurons.WangBuzsakiModel.rst", "apis\\auto\\generated\\brainpy.odeint.rst", "apis\\auto\\generated\\brainpy.optim.Adadelta.rst", "apis\\auto\\generated\\brainpy.optim.Adagrad.rst", "apis\\auto\\generated\\brainpy.optim.Adam.rst", "apis\\auto\\generated\\brainpy.optim.AdamW.rst", "apis\\auto\\generated\\brainpy.optim.Adan.rst", "apis\\auto\\generated\\brainpy.optim.Constant.rst", "apis\\auto\\generated\\brainpy.optim.CosineAnnealingLR.rst", "apis\\auto\\generated\\brainpy.optim.CosineAnnealingWarmRestarts.rst", "apis\\auto\\generated\\brainpy.optim.ExponentialDecay.rst", "apis\\auto\\generated\\brainpy.optim.ExponentialLR.rst", "apis\\auto\\generated\\brainpy.optim.InverseTimeDecay.rst", "apis\\auto\\generated\\brainpy.optim.LARS.rst", "apis\\auto\\generated\\brainpy.optim.Momentum.rst", "apis\\auto\\generated\\brainpy.optim.MomentumNesterov.rst", "apis\\auto\\generated\\brainpy.optim.MultiStepLR.rst", "apis\\auto\\generated\\brainpy.optim.Optimizer.rst", "apis\\auto\\generated\\brainpy.optim.PiecewiseConstant.rst", "apis\\auto\\generated\\brainpy.optim.PolynomialDecay.rst", "apis\\auto\\generated\\brainpy.optim.RMSProp.rst", "apis\\auto\\generated\\brainpy.optim.SGD.rst", "apis\\auto\\generated\\brainpy.optim.Scheduler.rst", "apis\\auto\\generated\\brainpy.optim.StepLR.rst", "apis\\auto\\generated\\brainpy.optim.make_schedule.rst", "apis\\auto\\generated\\brainpy.rates.FHN.rst", "apis\\auto\\generated\\brainpy.rates.FeedbackFHN.rst", "apis\\auto\\generated\\brainpy.rates.QIF.rst", "apis\\auto\\generated\\brainpy.rates.RateModel.rst", "apis\\auto\\generated\\brainpy.rates.StuartLandauOscillator.rst", "apis\\auto\\generated\\brainpy.rates.ThresholdLinearModel.rst", "apis\\auto\\generated\\brainpy.rates.WilsonCowanModel.rst", "apis\\auto\\generated\\brainpy.running.cpu_ordered_parallel.rst", "apis\\auto\\generated\\brainpy.running.cpu_unordered_parallel.rst", "apis\\auto\\generated\\brainpy.running.jax_parallelize_map.rst", "apis\\auto\\generated\\brainpy.running.jax_vectorize_map.rst", "apis\\auto\\generated\\brainpy.running.process_pool.rst", "apis\\auto\\generated\\brainpy.running.process_pool_lock.rst", "apis\\auto\\generated\\brainpy.sdeint.rst", "apis\\auto\\generated\\brainpy.synapses.AMPA.rst", "apis\\auto\\generated\\brainpy.synapses.AdditiveCoupling.rst", "apis\\auto\\generated\\brainpy.synapses.Alpha.rst", "apis\\auto\\generated\\brainpy.synapses.BioNMDA.rst", "apis\\auto\\generated\\brainpy.synapses.DelayCoupling.rst", "apis\\auto\\generated\\brainpy.synapses.Delta.rst", "apis\\auto\\generated\\brainpy.synapses.DiffusiveCoupling.rst", "apis\\auto\\generated\\brainpy.synapses.DualExponential.rst", "apis\\auto\\generated\\brainpy.synapses.Exponential.rst", "apis\\auto\\generated\\brainpy.synapses.GABAa.rst", "apis\\auto\\generated\\brainpy.synapses.GapJunction.rst", "apis\\auto\\generated\\brainpy.synapses.NMDA.rst", "apis\\auto\\generated\\brainpy.synapses.PoissonInput.rst", "apis\\auto\\generated\\brainpy.synouts.COBA.rst", "apis\\auto\\generated\\brainpy.synouts.CUBA.rst", "apis\\auto\\generated\\brainpy.synouts.MgBlock.rst", "apis\\auto\\generated\\brainpy.synplast.STD.rst", "apis\\auto\\generated\\brainpy.synplast.STP.rst", "apis\\auto\\initialize.rst", "apis\\auto\\inputs.rst", "apis\\auto\\integrators.rst", "apis\\auto\\layers.rst", "apis\\auto\\losses.rst", "apis\\auto\\math.rst", "apis\\auto\\math_random.rst", "apis\\auto\\math_surrogate.rst", "apis\\auto\\measure.rst", "apis\\auto\\neurons.rst", "apis\\auto\\optim.rst", "apis\\auto\\rates.rst", "apis\\auto\\running.rst", "apis\\auto\\synapses.rst", "apis\\auto\\synouts.rst", "apis\\auto\\synplast.rst", "core_concept\\brainpy_dynamical_system.ipynb", "core_concept\\brainpy_transform_concept.ipynb", "core_concept\\index.rst", "index.rst", "quickstart\\analysis.ipynb", "quickstart\\installation.rst", "quickstart\\simulation.ipynb", "quickstart\\training.ipynb", "tutorial_FAQs\\brainpy_ecosystem.ipynb", "tutorial_FAQs\\citing_and_publication.rst", "tutorial_FAQs\\uniqueness_of-brainpy-math.ipynb", "tutorial_advanced\\adavanced_lowdim_analysis.ipynb", "tutorial_advanced\\base_and_collector.ipynb", "tutorial_advanced\\compilation.ipynb", "tutorial_advanced\\differentiation.ipynb", "tutorial_advanced\\interoperation.ipynb", "tutorial_analysis\\decision_making_model.ipynb", "tutorial_analysis\\highdim_analysis.ipynb", "tutorial_analysis\\index.rst", "tutorial_analysis\\lowdim_analysis.ipynb", "tutorial_building\\build_conductance_neurons.ipynb", "tutorial_building\\build_network_models.ipynb", "tutorial_building\\build_synapse_models.ipynb", "tutorial_building\\customize_dynamical_systems.ipynb", "tutorial_building\\customize_neuron_models.ipynb", "tutorial_building\\customize_synapse_models.ipynb", "tutorial_building\\index.rst", "tutorial_building\\overview_of_dynamic_model.ipynb", "tutorial_math\\arrays_and_variables.ipynb", "tutorial_math\\control_flows.ipynb", "tutorial_math\\index.rst", "tutorial_math\\random_number_generation.ipynb", "tutorial_math\\variables.ipynb", "tutorial_simulation\\index.rst", "tutorial_simulation\\parallel_computing.ipynb", "tutorial_simulation\\simulation_dsrunner.ipynb", "tutorial_toolbox\\dde_numerical_solvers.ipynb", "tutorial_toolbox\\fde_numerical_solvers.ipynb", "tutorial_toolbox\\inputs.ipynb", "tutorial_toolbox\\joint_equations.ipynb", "tutorial_toolbox\\ode_numerical_solvers.ipynb", "tutorial_toolbox\\optimizers.ipynb", "tutorial_toolbox\\saving_and_loading.ipynb", "tutorial_toolbox\\sde_numerical_solvers.ipynb", "tutorial_toolbox\\synaptic_connections.ipynb", "tutorial_toolbox\\synaptic_weights.ipynb", "tutorial_training\\bp_training.ipynb", "tutorial_training\\build_training_models.ipynb", "tutorial_training\\esn_introduction.ipynb", "tutorial_training\\index.rst", "tutorial_training\\offline_training.ipynb", "tutorial_training\\online_training.ipynb"], "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.analysis</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy</span></code> module", "Release notes (brainpy)", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.channels</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.connect</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.encoding</span></code> module", "brainpy.BPFF", "brainpy.BPTT", "brainpy.Channel", "brainpy.CondNeuGroup", "brainpy.Container", "brainpy.DSRunner", "brainpy.DSTrainer", "brainpy.DynamicalSystem", "brainpy.ForceTrainer", "brainpy.Integrator", "brainpy.IntegratorRunner", "brainpy.JointEq", "brainpy.LoopOverTime", "brainpy.Network", "brainpy.NeuGroup", "brainpy.NoSharedArg", "brainpy.OfflineTrainer", "brainpy.OnlineTrainer", "brainpy.RidgeTrainer", "brainpy.Sequential", "brainpy.SynConn", "brainpy.SynLTP", "brainpy.SynOut", "brainpy.SynSTP", "brainpy.TwoEndConn", "brainpy.analysis.Bifurcation1D", "brainpy.analysis.Bifurcation2D", "brainpy.analysis.FastSlow1D", "brainpy.analysis.FastSlow2D", "brainpy.analysis.PhasePlane1D", "brainpy.analysis.PhasePlane2D", "brainpy.analysis.SlowPointFinder", "brainpy.channels.Calcium", "brainpy.channels.CalciumChannel", "brainpy.channels.CalciumDetailed", "brainpy.channels.CalciumDyna", "brainpy.channels.CalciumFirstOrder", "brainpy.channels.CalciumFixed", "brainpy.channels.IAHP_De1994", "brainpy.channels.ICaHT_HM1992", "brainpy.channels.ICaL_IS2008", "brainpy.channels.ICaN_IS2008", "brainpy.channels.ICaT_HM1992", "brainpy.channels.ICaT_HP1992", "brainpy.channels.IKA1_HM1992", "brainpy.channels.IKA2_HM1992", "brainpy.channels.IKDR_Ba2002", "brainpy.channels.IKK2A_HM1992", "brainpy.channels.IKK2B_HM1992", "brainpy.channels.IKL", "brainpy.channels.IKNI_Ya1989", "brainpy.channels.IK_HH1952", "brainpy.channels.IK_TM1991", "brainpy.channels.IL", "brainpy.channels.INa_Ba2002", "brainpy.channels.INa_HH1952", "brainpy.channels.INa_TM1991", "brainpy.channels.IhChannel", "brainpy.channels.Ih_De1996", "brainpy.channels.Ih_HM1992", "brainpy.channels.Ion", "brainpy.channels.IonChannel", "brainpy.channels.LeakyChannel", "brainpy.channels.PotassiumChannel", "brainpy.channels.SodiumChannel", "brainpy.connect.all2all", "brainpy.connect.CONN_MAT", "brainpy.connect.CSRConn", "brainpy.connect.Connector", "brainpy.connect.FixedPostNum", "brainpy.connect.FixedPreNum", "brainpy.connect.FixedProb", "brainpy.connect.FixedTotalNum", "brainpy.connect.GaussianProb", "brainpy.connect.GridEight", "brainpy.connect.GridFour", "brainpy.connect.GridN", "brainpy.connect.IJConn", "brainpy.connect.MatConn", "brainpy.connect.one2one", "brainpy.connect.OneEndConnector", "brainpy.connect.POST2PRE", "brainpy.connect.POST2SYN", "brainpy.connect.POST_IDS", "brainpy.connect.PRE2POST", "brainpy.connect.PRE2SYN", "brainpy.connect.PRE_IDS", "brainpy.connect.PowerLaw", "brainpy.connect.ProbDist", "brainpy.connect.ScaleFreeBA", "brainpy.connect.ScaleFreeBADual", "brainpy.connect.SmallWorld", "brainpy.connect.SparseMatConn", "brainpy.connect.TwoEndConnector", "brainpy.connect.coo2csc", "brainpy.connect.coo2csr", "brainpy.connect.coo2mat", "brainpy.connect.csr2coo", "brainpy.connect.csr2csc", "brainpy.connect.csr2mat", "brainpy.connect.grid_eight", "brainpy.connect.grid_four", "brainpy.connect.mat2coo", "brainpy.connect.mat2csc", "brainpy.connect.mat2csr", "brainpy.encoding.Encoder", "brainpy.encoding.LatencyEncoder", "brainpy.encoding.PoissonEncoder", "brainpy.encoding.WeightedPhaseEncoder", "brainpy.fdeint", "brainpy.initialize.Constant", "brainpy.initialize.DOGDecay", "brainpy.initialize.DeltaOrthogonal", "brainpy.initialize.GaussianDecay", "brainpy.initialize.Identity", "brainpy.initialize.Initializer", "brainpy.initialize.InterLayerInitializer", "brainpy.initialize.IntraLayerInitializer", "brainpy.initialize.KaimingNormal", "brainpy.initialize.KaimingUniform", "brainpy.initialize.LecunNormal", "brainpy.initialize.LecunUniform", "brainpy.initialize.Normal", "brainpy.initialize.OneInit", "brainpy.initialize.Orthogonal", "brainpy.initialize.Uniform", "brainpy.initialize.VarianceScaling", "brainpy.initialize.XavierNormal", "brainpy.initialize.XavierUniform", "brainpy.initialize.ZeroInit", "brainpy.inputs.constant_input", "brainpy.inputs.ou_process", "brainpy.inputs.ramp_input", "brainpy.inputs.section_input", "brainpy.inputs.sinusoidal_input", "brainpy.inputs.spike_input", "brainpy.inputs.square_input", "brainpy.inputs.wiener_process", "brainpy.integrators.fde.CaputoEuler", "brainpy.integrators.fde.CaputoL1Schema", "brainpy.integrators.fde.FDEIntegrator", "brainpy.integrators.fde.GLShortMemory", "brainpy.integrators.fde.get_default_fdeint", "brainpy.integrators.fde.get_supported_methods", "brainpy.integrators.fde.register_fde_integrator", "brainpy.integrators.fde.set_default_fdeint", "brainpy.integrators.ode.AdaptiveRKIntegrator", "brainpy.integrators.ode.BogackiShampine", "brainpy.integrators.ode.CashKarp", "brainpy.integrators.ode.DormandPrince", "brainpy.integrators.ode.Euler", "brainpy.integrators.ode.ExplicitRKIntegrator", "brainpy.integrators.ode.ExponentialEuler", "brainpy.integrators.ode.Heun2", "brainpy.integrators.ode.Heun3", "brainpy.integrators.ode.HeunEuler", "brainpy.integrators.ode.MidPoint", "brainpy.integrators.ode.ODEIntegrator", "brainpy.integrators.ode.RK2", "brainpy.integrators.ode.RK3", "brainpy.integrators.ode.RK4", "brainpy.integrators.ode.RK4Rule38", "brainpy.integrators.ode.RKF12", "brainpy.integrators.ode.RKF45", "brainpy.integrators.ode.Ralston2", "brainpy.integrators.ode.Ralston3", "brainpy.integrators.ode.Ralston4", "brainpy.integrators.ode.SSPRK3", "brainpy.integrators.ode.get_default_odeint", "brainpy.integrators.ode.get_supported_methods", "brainpy.integrators.ode.register_ode_integrator", "brainpy.integrators.ode.set_default_odeint", "brainpy.integrators.sde.Euler", "brainpy.integrators.sde.ExponentialEuler", "brainpy.integrators.sde.Heun", "brainpy.integrators.sde.KlPl", "brainpy.integrators.sde.Milstein", "brainpy.integrators.sde.MilsteinGradFree", "brainpy.integrators.sde.SDEIntegrator", "brainpy.integrators.sde.SRK1W1", "brainpy.integrators.sde.SRK2W1", "brainpy.integrators.sde.get_default_sdeint", "brainpy.integrators.sde.get_supported_methods", "brainpy.integrators.sde.register_sde_integrator", "brainpy.integrators.sde.set_default_sdeint", "brainpy.layers.Activation", "brainpy.layers.AdaptiveAvgPool1d", "brainpy.layers.AdaptiveAvgPool2d", "brainpy.layers.AdaptiveAvgPool3d", "brainpy.layers.AdaptiveMaxPool1d", "brainpy.layers.AdaptiveMaxPool2d", "brainpy.layers.AdaptiveMaxPool3d", "brainpy.layers.AvgPool", "brainpy.layers.AvgPool1d", "brainpy.layers.AvgPool2d", "brainpy.layers.AvgPool3d", "brainpy.layers.BatchNorm1d", "brainpy.layers.BatchNorm2d", "brainpy.layers.BatchNorm3d", "brainpy.layers.Conv1d", "brainpy.layers.Conv1dLSTMCell", "brainpy.layers.Conv2d", "brainpy.layers.Conv2dLSTMCell", "brainpy.layers.Conv3d", "brainpy.layers.Conv3dLSTMCell", "brainpy.layers.ConvTranspose1d", "brainpy.layers.ConvTranspose2d", "brainpy.layers.ConvTranspose3d", "brainpy.layers.Dense", "brainpy.layers.Dropout", "brainpy.layers.Flatten", "brainpy.layers.FunAsLayer", "brainpy.layers.GRU", "brainpy.layers.GRUCell", "brainpy.layers.GroupNorm", "brainpy.layers.Identity", "brainpy.layers.InstanceNorm", "brainpy.layers.LSTM", "brainpy.layers.LSTMCell", "brainpy.layers.Layer", "brainpy.layers.LayerNorm", "brainpy.layers.Linear", "brainpy.layers.MaxPool", "brainpy.layers.MaxPool1d", "brainpy.layers.MaxPool2d", "brainpy.layers.MaxPool3d", "brainpy.layers.MinPool", "brainpy.layers.NVAR", "brainpy.layers.RNNCell", "brainpy.layers.Reservoir", "brainpy.layers.VanillaRNN", "brainpy.losses.binary_logistic_loss", "brainpy.losses.cross_entropy_loss", "brainpy.losses.cross_entropy_sigmoid", "brainpy.losses.cross_entropy_sparse", "brainpy.losses.ctc_loss", "brainpy.losses.ctc_loss_with_forward_probs", "brainpy.losses.huber_loss", "brainpy.losses.l1_loos", "brainpy.losses.l2_loss", "brainpy.losses.l2_norm", "brainpy.losses.log_cosh", "brainpy.losses.log_cosh_loss", "brainpy.losses.mean_absolute", "brainpy.losses.mean_absolute_error", "brainpy.losses.mean_square", "brainpy.losses.mean_squared_error", "brainpy.losses.mean_squared_log_error", "brainpy.losses.multiclass_logistic_loss", "brainpy.losses.sigmoid_binary_cross_entropy", "brainpy.losses.smooth_labels", "brainpy.losses.softmax_cross_entropy", "brainpy.math.BatchingMode", "brainpy.math.BrainPyObject", "brainpy.math.CONCAT_UPDATE", "brainpy.math.DelayVariable", "brainpy.math.FunAsObject", "brainpy.math.LengthDelay", "brainpy.math.Mode", "brainpy.math.NeuLenDelay", "brainpy.math.NeuTimeDelay", "brainpy.math.NonBatchingMode", "brainpy.math.ObjectTransform", "brainpy.math.Parameter", "brainpy.math.Partial", "brainpy.math.ROTATE_UPDATE", "brainpy.math.Tensor", "brainpy.math.TimeDelay", "brainpy.math.TrainVar", "brainpy.math.TrainingMode", "brainpy.math.Variable", "brainpy.math.XLACustomOp", "brainpy.math.abs", "brainpy.math.absolute", "brainpy.math.acos", "brainpy.math.acosh", "brainpy.math.add", "brainpy.math.add_docstring", "brainpy.math.add_newdoc", "brainpy.math.add_newdoc_ufunc", "brainpy.math.addcdiv", "brainpy.math.addcmul", "brainpy.math.all", "brainpy.math.allclose", "brainpy.math.alltrue", "brainpy.math.amax", "brainpy.math.amin", "brainpy.math.angle", "brainpy.math.any", "brainpy.math.append", "brainpy.math.apply_along_axis", "brainpy.math.apply_over_axes", "brainpy.math.arange", "brainpy.math.arccos", "brainpy.math.arccosh", "brainpy.math.arcsin", "brainpy.math.arcsinh", "brainpy.math.arctan", "brainpy.math.arctan2", "brainpy.math.arctanh", "brainpy.math.argmax", "brainpy.math.argmin", "brainpy.math.argsort", "brainpy.math.argwhere", "brainpy.math.around", "brainpy.math.array", "brainpy.math.array2string", "brainpy.math.array_equal", "brainpy.math.array_equiv", "brainpy.math.array_repr", "brainpy.math.array_split", "brainpy.math.array_str", "brainpy.math.as_device_array", "brainpy.math.as_jax", "brainpy.math.as_ndarray", "brainpy.math.as_numpy", "brainpy.math.as_variable", "brainpy.math.asanyarray", "brainpy.math.asarray", "brainpy.math.ascontiguousarray", "brainpy.math.asfarray", "brainpy.math.asin", "brainpy.math.asinh", "brainpy.math.asmatrix", "brainpy.math.asscalar", "brainpy.math.atan", "brainpy.math.atan2", "brainpy.math.atanh", "brainpy.math.atleast_1d", "brainpy.math.atleast_2d", "brainpy.math.atleast_3d", "brainpy.math.average", "brainpy.math.bartlett", "brainpy.math.batching_environment", "brainpy.math.batching_mode", "brainpy.math.bincount", "brainpy.math.bitwise_and", "brainpy.math.bitwise_not", "brainpy.math.bitwise_or", "brainpy.math.bitwise_xor", "brainpy.math.blackman", "brainpy.math.block", "brainpy.math.broadcast_arrays", "brainpy.math.broadcast_shapes", "brainpy.math.broadcast_to", "brainpy.math.can_cast", "brainpy.math.cast", "brainpy.math.cat", "brainpy.math.cbrt", "brainpy.math.ceil", "brainpy.math.celu", "brainpy.math.choose", "brainpy.math.clear_buffer_memory", "brainpy.math.clip", "brainpy.math.clip_by_value", "brainpy.math.column_stack", "brainpy.math.common_type", "brainpy.math.compress", "brainpy.math.concat", "brainpy.math.concatenate", "brainpy.math.cond", "brainpy.math.conj", "brainpy.math.conjugate", "brainpy.math.convolve", "brainpy.math.copy", "brainpy.math.copysign", "brainpy.math.copyto", "brainpy.math.corrcoef", "brainpy.math.correlate", "brainpy.math.cos", "brainpy.math.cosh", "brainpy.math.count_nonzero", "brainpy.math.cov", "brainpy.math.cross", "brainpy.math.csr_matvec", "brainpy.math.cumprod", "brainpy.math.cumproduct", "brainpy.math.cumsum", "brainpy.math.deg2rad", "brainpy.math.degrees", "brainpy.math.delete", "brainpy.math.dftype", "brainpy.math.diag", "brainpy.math.diag_indices", "brainpy.math.diag_indices_from", "brainpy.math.diagflat", "brainpy.math.diagonal", "brainpy.math.diff", "brainpy.math.digitize", "brainpy.math.disable_gpu_memory_preallocation", "brainpy.math.disable_x64", "brainpy.math.disp", "brainpy.math.ditype", "brainpy.math.divide", "brainpy.math.divmod", "brainpy.math.dot", "brainpy.math.dsplit", "brainpy.math.dstack", "brainpy.math.dtype", "brainpy.math.dyn_dict", "brainpy.math.dyn_seq", "brainpy.math.e", "brainpy.math.ediff1d", "brainpy.math.einsum", "brainpy.math.einsum_path", "brainpy.math.elu", "brainpy.math.empty", "brainpy.math.empty_like", "brainpy.math.enable_gpu_memory_preallocation", "brainpy.math.enable_x64", "brainpy.math.environment", "brainpy.math.equal", "brainpy.math.event_csr_matvec", "brainpy.math.exp", "brainpy.math.exp2", "brainpy.math.expand_dims", "brainpy.math.expm1", "brainpy.math.extract", "brainpy.math.eye", "brainpy.math.fabs", "brainpy.math.fft.fft", "brainpy.math.fft.fft2", "brainpy.math.fft.fftfreq", "brainpy.math.fft.fftn", "brainpy.math.fft.fftshift", "brainpy.math.fft.hfft", "brainpy.math.fft.ifft", "brainpy.math.fft.ifft2", "brainpy.math.fft.ifftn", "brainpy.math.fft.ifftshift", "brainpy.math.fft.ihfft", "brainpy.math.fft.irfft", "brainpy.math.fft.irfft2", "brainpy.math.fft.irfftn", "brainpy.math.fft.rfft", "brainpy.math.fft.rfft2", "brainpy.math.fft.rfftfreq", "brainpy.math.fft.rfftn", "brainpy.math.fill_diagonal", "brainpy.math.finfo", "brainpy.math.fix", "brainpy.math.flatnonzero", "brainpy.math.flatten", "brainpy.math.flip", "brainpy.math.fliplr", "brainpy.math.flipud", "brainpy.math.float_power", "brainpy.math.floor", "brainpy.math.floor_divide", "brainpy.math.fmax", "brainpy.math.fmin", "brainpy.math.fmod", "brainpy.math.for_loop", "brainpy.math.frexp", "brainpy.math.frombuffer", "brainpy.math.fromfile", "brainpy.math.fromfunction", "brainpy.math.fromiter", "brainpy.math.fromstring", "brainpy.math.full", "brainpy.math.full_like", "brainpy.math.function", "brainpy.math.gcd", "brainpy.math.gelu", "brainpy.math.genfromtxt", "brainpy.math.geomspace", "brainpy.math.get_bool", "brainpy.math.get_complex", "brainpy.math.get_dt", "brainpy.math.get_float", "brainpy.math.get_int", "brainpy.math.get_mode", "brainpy.math.get_platform", "brainpy.math.get_printoptions", "brainpy.math.glu", "brainpy.math.grad", "brainpy.math.gradient", "brainpy.math.greater", "brainpy.math.greater_equal", "brainpy.math.hamming", "brainpy.math.hanning", "brainpy.math.hard_sigmoid", "brainpy.math.hard_silu", "brainpy.math.hard_swish", "brainpy.math.hard_tanh", "brainpy.math.heaviside", "brainpy.math.hessian", "brainpy.math.histogram", "brainpy.math.histogram2d", "brainpy.math.histogram_bin_edges", "brainpy.math.histogramdd", "brainpy.math.hsplit", "brainpy.math.hstack", "brainpy.math.hypot", "brainpy.math.i0", "brainpy.math.identity", "brainpy.math.ifelse", "brainpy.math.iinfo", "brainpy.math.imag", "brainpy.math.in1d", "brainpy.math.indices", "brainpy.math.inf", "brainpy.math.info", "brainpy.math.inner", "brainpy.math.insert", "brainpy.math.interp", "brainpy.math.intersect1d", "brainpy.math.invert", "brainpy.math.isclose", "brainpy.math.iscomplex", "brainpy.math.iscomplexobj", "brainpy.math.isfinite", "brainpy.math.isin", "brainpy.math.isinf", "brainpy.math.isnan", "brainpy.math.isneginf", "brainpy.math.isposinf", "brainpy.math.isreal", "brainpy.math.isrealobj", "brainpy.math.isscalar", "brainpy.math.issubclass_", "brainpy.math.issubdtype", "brainpy.math.issubsctype", "brainpy.math.iterable", "brainpy.math.ix_", "brainpy.math.jacfwd", "brainpy.math.jacobian", "brainpy.math.jacrev", "brainpy.math.jit", "brainpy.math.kaiser", "brainpy.math.kron", "brainpy.math.lcm", "brainpy.math.ldexp", "brainpy.math.leaky_relu", "brainpy.math.left_shift", "brainpy.math.less", "brainpy.math.less_equal", "brainpy.math.lexsort", "brainpy.math.linalg.cholesky", "brainpy.math.linalg.cond", "brainpy.math.linalg.det", "brainpy.math.linalg.eig", "brainpy.math.linalg.eigh", "brainpy.math.linalg.eigvals", "brainpy.math.linalg.eigvalsh", "brainpy.math.linalg.inv", "brainpy.math.linalg.lstsq", "brainpy.math.linalg.matrix_power", "brainpy.math.linalg.matrix_rank", "brainpy.math.linalg.multi_dot", "brainpy.math.linalg.norm", "brainpy.math.linalg.pinv", "brainpy.math.linalg.qr", "brainpy.math.linalg.slogdet", "brainpy.math.linalg.solve", "brainpy.math.linalg.svd", "brainpy.math.linalg.tensorinv", "brainpy.math.linalg.tensorsolve", "brainpy.math.linspace", "brainpy.math.load", "brainpy.math.loadtxt", "brainpy.math.log", "brainpy.math.log10", "brainpy.math.log1p", "brainpy.math.log2", "brainpy.math.log_sigmoid", "brainpy.math.log_softmax", "brainpy.math.logaddexp", "brainpy.math.logaddexp2", "brainpy.math.logical_and", "brainpy.math.logical_not", "brainpy.math.logical_or", "brainpy.math.logical_xor", "brainpy.math.logspace", "brainpy.math.make_cond", "brainpy.math.make_loop", "brainpy.math.make_while", "brainpy.math.mask_indices", "brainpy.math.mat", "brainpy.math.matmul", "brainpy.math.matrix", "brainpy.math.max", "brainpy.math.maximum", "brainpy.math.mean", "brainpy.math.median", "brainpy.math.meshgrid", "brainpy.math.min", "brainpy.math.minimum", "brainpy.math.mod", "brainpy.math.modf", "brainpy.math.moveaxis", "brainpy.math.msort", "brainpy.math.multiply", "brainpy.math.nan_to_num", "brainpy.math.nanargmax", "brainpy.math.nanargmin", "brainpy.math.nancumprod", "brainpy.math.nancumsum", "brainpy.math.nanmax", "brainpy.math.nanmean", "brainpy.math.nanmedian", "brainpy.math.nanmin", "brainpy.math.nanpercentile", "brainpy.math.nanprod", "brainpy.math.nanquantile", "brainpy.math.nanstd", "brainpy.math.nansum", "brainpy.math.nanvar", "brainpy.math.ndim", "brainpy.math.negative", "brainpy.math.nextafter", "brainpy.math.nonbatching_mode", "brainpy.math.nonzero", "brainpy.math.normalize", "brainpy.math.not_equal", "brainpy.math.one_hot", "brainpy.math.ones", "brainpy.math.ones_like", "brainpy.math.outer", "brainpy.math.packbits", "brainpy.math.pad", "brainpy.math.percentile", "brainpy.math.pi", "brainpy.math.piecewise", "brainpy.math.place", "brainpy.math.poly", "brainpy.math.polyadd", "brainpy.math.polyder", "brainpy.math.polydiv", "brainpy.math.polyfit", "brainpy.math.polyint", "brainpy.math.polymul", "brainpy.math.polysub", "brainpy.math.polyval", "brainpy.math.positive", "brainpy.math.power", "brainpy.math.pre2post_coo_event_sum", "brainpy.math.pre2post_event_prod", "brainpy.math.pre2post_event_sum", "brainpy.math.pre2post_max", "brainpy.math.pre2post_mean", "brainpy.math.pre2post_min", "brainpy.math.pre2post_prod", "brainpy.math.pre2post_sum", "brainpy.math.pre2syn", "brainpy.math.printoptions", "brainpy.math.prod", "brainpy.math.product", "brainpy.math.promote_types", "brainpy.math.ptp", "brainpy.math.put", "brainpy.math.putmask", "brainpy.math.quantile", "brainpy.math.rad2deg", "brainpy.math.radians", "brainpy.math.random.DEFAULT", "brainpy.math.random.Generator", "brainpy.math.random.RandomState", "brainpy.math.random.bernoulli", "brainpy.math.random.beta", "brainpy.math.random.binomial", "brainpy.math.random.categorical", "brainpy.math.random.chisquare", "brainpy.math.random.choice", "brainpy.math.random.default_rng", "brainpy.math.random.dirichlet", "brainpy.math.random.exponential", "brainpy.math.random.f", "brainpy.math.random.gamma", "brainpy.math.random.geometric", "brainpy.math.random.gumbel", "brainpy.math.random.hypergeometric", "brainpy.math.random.laplace", "brainpy.math.random.loggamma", "brainpy.math.random.logistic", "brainpy.math.random.lognormal", "brainpy.math.random.logseries", "brainpy.math.random.maxwell", "brainpy.math.random.multinomial", "brainpy.math.random.multivariate_normal", "brainpy.math.random.negative_binomial", "brainpy.math.random.noncentral_chisquare", "brainpy.math.random.noncentral_f", "brainpy.math.random.normal", "brainpy.math.random.orthogonal", "brainpy.math.random.pareto", "brainpy.math.random.permutation", "brainpy.math.random.poisson", "brainpy.math.random.power", "brainpy.math.random.rand", "brainpy.math.random.rand_like", "brainpy.math.random.randint", "brainpy.math.random.randint_like", "brainpy.math.random.randn", "brainpy.math.random.randn_like", "brainpy.math.random.random", "brainpy.math.random.random_integers", "brainpy.math.random.random_sample", "brainpy.math.random.ranf", "brainpy.math.random.rayleigh", "brainpy.math.random.sample", "brainpy.math.random.seed", "brainpy.math.random.shuffle", "brainpy.math.random.split_key", "brainpy.math.random.standard_cauchy", "brainpy.math.random.standard_exponential", "brainpy.math.random.standard_gamma", "brainpy.math.random.standard_normal", "brainpy.math.random.standard_t", "brainpy.math.random.t", "brainpy.math.random.triangular", "brainpy.math.random.truncated_normal", "brainpy.math.random.uniform", "brainpy.math.random.vonmises", "brainpy.math.random.wald", "brainpy.math.random.weibull", "brainpy.math.random.weibull_min", "brainpy.math.random.zipf", "brainpy.math.ravel", "brainpy.math.ravel_multi_index", "brainpy.math.real", "brainpy.math.reciprocal", "brainpy.math.reduce_all", "brainpy.math.reduce_any", "brainpy.math.reduce_euclidean_norm", "brainpy.math.reduce_logsumexp", "brainpy.math.reduce_max", "brainpy.math.reduce_mean", "brainpy.math.reduce_min", "brainpy.math.reduce_prod", "brainpy.math.reduce_std", "brainpy.math.reduce_sum", "brainpy.math.reduce_variance", "brainpy.math.relu", "brainpy.math.relu6", "brainpy.math.remainder", "brainpy.math.repeat", "brainpy.math.reshape", "brainpy.math.resize", "brainpy.math.result_type", "brainpy.math.right_shift", "brainpy.math.rint", "brainpy.math.roll", "brainpy.math.rollaxis", "brainpy.math.roots", "brainpy.math.rot90", "brainpy.math.round", "brainpy.math.round_", "brainpy.math.row_stack", "brainpy.math.safe_eval", "brainpy.math.save", "brainpy.math.savetxt", "brainpy.math.savez", "brainpy.math.savez_compressed", "brainpy.math.searchsorted", "brainpy.math.segment_max", "brainpy.math.segment_mean", "brainpy.math.segment_min", "brainpy.math.segment_prod", "brainpy.math.segment_sum", "brainpy.math.select", "brainpy.math.selu", "brainpy.math.set_bool", "brainpy.math.set_complex", "brainpy.math.set_dt", "brainpy.math.set_environment", "brainpy.math.set_float", "brainpy.math.set_host_device_count", "brainpy.math.set_int", "brainpy.math.set_mode", "brainpy.math.set_platform", "brainpy.math.set_printoptions", "brainpy.math.setdiff1d", "brainpy.math.setxor1d", "brainpy.math.shape", "brainpy.math.show_config", "brainpy.math.sigmoid", "brainpy.math.sign", "brainpy.math.signbit", "brainpy.math.silu", "brainpy.math.sin", "brainpy.math.sinc", "brainpy.math.sinh", "brainpy.math.size", "brainpy.math.soft_sign", "brainpy.math.softmax", "brainpy.math.softplus", "brainpy.math.sometrue", "brainpy.math.sort", "brainpy.math.sort_complex", "brainpy.math.sparse_matmul", "brainpy.math.split", "brainpy.math.sqrt", "brainpy.math.square", "brainpy.math.squeeze", "brainpy.math.stack", "brainpy.math.std", "brainpy.math.subtract", "brainpy.math.sum", "brainpy.math.surrogate.arctan", "brainpy.math.surrogate.erf", "brainpy.math.surrogate.gaussian_grad", "brainpy.math.surrogate.inv_square_grad", "brainpy.math.surrogate.inv_square_grad2", "brainpy.math.surrogate.leaky_relu", "brainpy.math.surrogate.log_tailed_relu", "brainpy.math.surrogate.multi_gaussian_grad", "brainpy.math.surrogate.nonzero_sign_log", "brainpy.math.surrogate.piecewise_exp", "brainpy.math.surrogate.piecewise_leaky_relu", "brainpy.math.surrogate.piecewise_quadratic", "brainpy.math.surrogate.q_pseudo_spike", "brainpy.math.surrogate.relu_grad", "brainpy.math.surrogate.relu_grad2", "brainpy.math.surrogate.s2nn", "brainpy.math.surrogate.sigmoid", "brainpy.math.surrogate.slayer_grad", "brainpy.math.surrogate.soft_sign", "brainpy.math.surrogate.squarewave_fourier_series", "brainpy.math.swapaxes", "brainpy.math.swish", "brainpy.math.syn2post", "brainpy.math.syn2post_max", "brainpy.math.syn2post_mean", "brainpy.math.syn2post_min", "brainpy.math.syn2post_prod", "brainpy.math.syn2post_softmax", "brainpy.math.syn2post_sum", "brainpy.math.take", "brainpy.math.take_along_axis", "brainpy.math.tan", "brainpy.math.tanh", "brainpy.math.tensordot", "brainpy.math.tile", "brainpy.math.to_dynsys", "brainpy.math.to_object", "brainpy.math.trace", "brainpy.math.training_environment", "brainpy.math.training_mode", "brainpy.math.transpose", "brainpy.math.trapz", "brainpy.math.tri", "brainpy.math.tril", "brainpy.math.tril_indices", "brainpy.math.tril_indices_from", "brainpy.math.trim_zeros", "brainpy.math.triu", "brainpy.math.triu_indices", "brainpy.math.triu_indices_from", "brainpy.math.true_divide", "brainpy.math.trunc", "brainpy.math.typename", "brainpy.math.union1d", "brainpy.math.unique", "brainpy.math.unpackbits", "brainpy.math.unravel_index", "brainpy.math.unsorted_segment_max", "brainpy.math.unsorted_segment_mean", "brainpy.math.unsorted_segment_min", "brainpy.math.unsorted_segment_prod", "brainpy.math.unsorted_segment_sqrt_n", "brainpy.math.unsorted_segment_sum", "brainpy.math.unsqueeze", "brainpy.math.unwrap", "brainpy.math.vander", "brainpy.math.var", "brainpy.math.vdot", "brainpy.math.vector_grad", "brainpy.math.vsplit", "brainpy.math.vstack", "brainpy.math.where", "brainpy.math.while_loop", "brainpy.math.zeros", "brainpy.math.zeros_like", "brainpy.measure.cross_correlation", "brainpy.measure.firing_rate", "brainpy.measure.functional_connectivity", "brainpy.measure.matrix_correlation", "brainpy.measure.raster_plot", "brainpy.measure.unitary_LFP", "brainpy.measure.voltage_fluctuation", "brainpy.measure.weighted_correlation", "brainpy.neurons.ALIFBellec2020", "brainpy.neurons.AdExIF", "brainpy.neurons.AdQuaIF", "brainpy.neurons.ExpIF", "brainpy.neurons.FHN", "brainpy.neurons.FractionalFHR", "brainpy.neurons.FractionalIzhikevich", "brainpy.neurons.FractionalNeuron", "brainpy.neurons.GIF", "brainpy.neurons.HH", "brainpy.neurons.HindmarshRose", "brainpy.neurons.InputGroup", "brainpy.neurons.Izhikevich", "brainpy.neurons.LIF", "brainpy.neurons.LeakyIntegrator", "brainpy.neurons.MorrisLecar", "brainpy.neurons.OUProcess", "brainpy.neurons.OutputGroup", "brainpy.neurons.PinskyRinzelModel", "brainpy.neurons.PoissonGroup", "brainpy.neurons.QuaIF", "brainpy.neurons.SpikeTimeGroup", "brainpy.neurons.WangBuzsakiModel", "brainpy.odeint", "brainpy.optim.Adadelta", "brainpy.optim.Adagrad", "brainpy.optim.Adam", "brainpy.optim.AdamW", "brainpy.optim.Adan", "brainpy.optim.Constant", "brainpy.optim.CosineAnnealingLR", "brainpy.optim.CosineAnnealingWarmRestarts", "brainpy.optim.ExponentialDecay", "brainpy.optim.ExponentialLR", "brainpy.optim.InverseTimeDecay", "brainpy.optim.LARS", "brainpy.optim.Momentum", "brainpy.optim.MomentumNesterov", "brainpy.optim.MultiStepLR", "brainpy.optim.Optimizer", "brainpy.optim.PiecewiseConstant", "brainpy.optim.PolynomialDecay", "brainpy.optim.RMSProp", "brainpy.optim.SGD", "brainpy.optim.Scheduler", "brainpy.optim.StepLR", "brainpy.optim.make_schedule", "brainpy.rates.FHN", "brainpy.rates.FeedbackFHN", "brainpy.rates.QIF", "brainpy.rates.RateModel", "brainpy.rates.StuartLandauOscillator", "brainpy.rates.ThresholdLinearModel", "brainpy.rates.WilsonCowanModel", "brainpy.running.cpu_ordered_parallel", "brainpy.running.cpu_unordered_parallel", "brainpy.running.jax_parallelize_map", "brainpy.running.jax_vectorize_map", "brainpy.running.process_pool", "brainpy.running.process_pool_lock", "brainpy.sdeint", "brainpy.synapses.AMPA", "brainpy.synapses.AdditiveCoupling", "brainpy.synapses.Alpha", "brainpy.synapses.BioNMDA", "brainpy.synapses.DelayCoupling", "brainpy.synapses.Delta", "brainpy.synapses.DiffusiveCoupling", "brainpy.synapses.DualExponential", "brainpy.synapses.Exponential", "brainpy.synapses.GABAa", "brainpy.synapses.GapJunction", "brainpy.synapses.NMDA", "brainpy.synapses.PoissonInput", "brainpy.synouts.COBA", "brainpy.synouts.CUBA", "brainpy.synouts.MgBlock", "brainpy.synplast.STD", "brainpy.synplast.STP", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.initialize</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.inputs</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.integrators</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.layers</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.losses</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.math</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.math.random</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.math.surrogate</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.measure</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.neurons</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.optim</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.rates</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.running</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.synapses</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.synouts</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.synplast</span></code> module", "Concept 2: Dynamical System", "Concept 1: Object-oriented Transformation", "Math Foundation", "BrainPy documentation", "Analyzing a Brain Dynamics Model", "Installation", "Simulating a Brain Dynamics Model", "Training a Brain Dynamics Model", "BrainPy Ecosystem for Brain Dynamics Modeling", "How to cite BrainPy?", "How is <code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy</span></code> different from other frameworks?", "How does low-dimensional analyzers work?", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BrainPyObject</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Collector</span></code>", "JIT Compilation with <code class=\"docutils literal notranslate\"><span class=\"pre\">BrainPyObject</span></code>", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">BrainPyObject</span></code>", "Interoperation with other JAX frameworks", "Analysis of a Decision-making Model", "High-dimensional Analyzers", "Model Analysis", "Low-dimensional Analyzers", "Building Conductance-based Neuron Models", "Building Network Models", "Building Synapse Models", "Customizing General Dynamical Systems", "Customizing Your Neuron Models", "Customizing Your Synapse Models", "Model Building", "Using Built-in Models", "Variable", "Control Flows for JIT compilation", "Math Foundation", "Random Number Generation for JIT Compilation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">brainpy.math.Variable</span></code>", "Model Simulation", "Parallel Simulation for Parameter Exploration", "Simulation with <code class=\"docutils literal notranslate\"><span class=\"pre\">DSRunner</span></code>", "Numerical Solvers for Delay Differential Equations", "Numerical Solvers for Fractional Differential Equations", "Inputs Construction", "Joint Differential Equations", "Numerical Solvers for Ordinary Differential Equations", "Gradient Descent Optimizers", "Saving and Loading", "Numerical Solvers for Stochastic Differential Equations", "Synaptic Connections", "Synaptic Weights", "Training with Back-propagation Algorithms", "Building Training Models", "Introduction to Echo State Network", "Model Training", "Training with Offline Algorithms", "Training with Online Algorithms"], "terms": {"all": [2, 7, 11, 13, 16, 22, 23, 40, 71, 93, 99, 145, 149, 167, 175, 188, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 220, 244, 276, 290, 358, 458, 481, 669, 728, 730, 731, 732, 761, 763, 764, 765, 773, 777, 880, 886, 897, 912, 937, 942, 943, 957, 961, 983, 984, 989, 990, 993, 994, 995, 996, 997, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1030], "histori": [2, 7, 145, 877, 880, 990, 1012, 1018, 1020], "pleas": [2, 11, 22, 23, 37, 162, 226, 458, 699, 703, 721, 723, 773, 877, 897, 944, 949, 984, 987, 988, 989, 992, 993, 994, 995, 996, 997, 1000, 1002, 1003, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1020, 1022, 1024, 1027, 1031], "see": [2, 7, 17, 22, 23, 118, 162, 211, 212, 213, 219, 224, 234, 235, 241, 356, 445, 469, 479, 481, 534, 651, 697, 699, 702, 703, 704, 706, 721, 723, 762, 767, 849, 853, 862, 863, 864, 865, 866, 867, 897, 984, 987, 988, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1006, 1008, 1010, 1012, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1030, 1031], "github": [2, 988], "i": [2, 7, 9, 10, 11, 16, 17, 18, 19, 25, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 72, 75, 76, 77, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 106, 112, 113, 114, 117, 119, 130, 136, 137, 138, 139, 141, 143, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 169, 170, 178, 179, 180, 182, 183, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 219, 220, 221, 224, 226, 228, 229, 230, 231, 232, 234, 235, 238, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 260, 261, 263, 267, 271, 273, 277, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 481, 482, 483, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 663, 664, 665, 667, 669, 683, 692, 695, 696, 697, 699, 700, 702, 703, 704, 706, 708, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 773, 777, 778, 779, 780, 781, 783, 784, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 815, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 869, 870, 871, 872, 873, 874, 875, 876, 880, 881, 883, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 910, 912, 913, 915, 918, 919, 923, 924, 930, 936, 937, 939, 940, 942, 943, 945, 949, 951, 952, 954, 956, 957, 958, 960, 961, 964, 965, 966, 984, 986, 987, 988, 990, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1007, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "complet": [2, 704, 706, 952, 960, 991, 1003, 1023], "re": [2, 44, 284, 366, 502, 877, 990, 1012, 1019, 1027, 1033, 1034], "design": [2, 10, 152, 815, 817, 984, 988, 993, 994, 998, 1014, 1015, 1023, 1027, 1028], "framework": [2, 897, 986, 992, 1008], "tackl": 2, "shortcom": 2, "gener": [2, 12, 13, 22, 23, 75, 76, 77, 93, 95, 96, 113, 114, 141, 164, 202, 203, 204, 220, 222, 226, 233, 235, 481, 661, 663, 665, 669, 692, 697, 698, 699, 703, 708, 721, 723, 828, 829, 830, 831, 832, 888, 889, 890, 891, 892, 896, 897, 898, 908, 909, 910, 915, 961, 983, 986, 987, 989, 990, 992, 994, 995, 998, 999, 1004, 1005, 1007, 1008, 1010, 1012, 1013, 1017, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1033, 1034], "effect": [2, 56, 773, 776, 806, 892, 954, 956, 957, 960, 990, 1003, 1012, 1031], "bring": [2, 814, 816], "research": [2, 215, 901, 913, 991, 992, 1031], "need": [2, 21, 147, 397, 458, 534, 761, 763, 764, 765, 880, 912, 913, 930, 947, 983, 984, 988, 989, 990, 994, 995, 996, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1027, 1029, 1030, 1033], "standard": [2, 9, 137, 143, 245, 445, 481, 492, 699, 717, 906, 995, 1000, 1025, 1030], "thi": [2, 9, 11, 13, 16, 18, 21, 25, 31, 32, 35, 37, 43, 44, 50, 51, 56, 57, 58, 61, 62, 64, 71, 85, 93, 114, 120, 136, 147, 152, 154, 155, 157, 158, 159, 162, 167, 185, 186, 191, 202, 203, 204, 214, 215, 216, 220, 222, 226, 233, 235, 238, 242, 255, 256, 261, 273, 276, 277, 283, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 408, 409, 410, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 481, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 669, 695, 697, 699, 702, 704, 706, 708, 721, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 773, 776, 777, 778, 779, 781, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 813, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 881, 882, 883, 885, 886, 887, 888, 891, 892, 897, 902, 903, 906, 912, 913, 915, 918, 919, 924, 926, 930, 937, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 961, 963, 965, 966, 967, 983, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "found": [2, 162, 508, 781, 908, 952, 960, 987, 988, 989, 994, 998, 999, 1000, 1002, 1003, 1014, 1020, 1021, 1026], "codebas": 2, "improv": [2, 93, 159, 162, 761, 763, 764, 765, 815, 916], "usabl": 2, "function": [2, 7, 11, 13, 16, 17, 22, 23, 25, 35, 36, 37, 79, 99, 114, 115, 117, 119, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 166, 169, 191, 219, 224, 234, 235, 242, 259, 261, 262, 263, 273, 277, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 411, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 665, 669, 695, 699, 708, 721, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 767, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 883, 886, 887, 897, 906, 910, 911, 935, 942, 943, 944, 945, 946, 947, 948, 952, 960, 963, 987, 988, 989, 990, 993, 994, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1017, 1018, 1020, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031], "oper": [2, 11, 144, 167, 206, 208, 210, 221, 226, 235, 244, 277, 352, 358, 458, 732, 761, 763, 764, 765, 918, 984, 988, 989, 991, 993, 995, 996, 997, 1004, 1007, 1011, 1015, 1017, 1018], "custom": [2, 18, 99, 277, 777, 986, 988, 989, 990, 1003, 1005, 1009, 1010, 1015, 1018, 1023], "xlacustomop": 2, "register_op": 2, "now": [2, 156, 164, 166, 988, 989, 990, 995, 996, 1002, 1003, 1014, 1023, 1026, 1029], "support": [2, 11, 17, 22, 23, 112, 149, 175, 188, 233, 244, 273, 277, 352, 458, 481, 531, 532, 533, 534, 582, 761, 763, 764, 765, 781, 877, 880, 886, 891, 983, 984, 986, 987, 988, 989, 990, 993, 994, 995, 997, 1000, 1002, 1008, 1010, 1012, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1027, 1030, 1033], "us": [2, 7, 11, 13, 17, 18, 21, 22, 23, 25, 31, 32, 37, 40, 52, 72, 87, 88, 89, 90, 91, 92, 112, 113, 114, 141, 145, 152, 153, 154, 155, 156, 158, 159, 162, 164, 166, 169, 178, 198, 202, 203, 204, 218, 223, 226, 228, 232, 236, 238, 241, 242, 244, 250, 252, 253, 255, 256, 258, 260, 261, 263, 267, 271, 273, 284, 340, 358, 366, 387, 397, 398, 404, 445, 458, 467, 469, 481, 502, 508, 531, 532, 533, 534, 582, 617, 665, 667, 669, 683, 692, 697, 699, 702, 703, 708, 721, 722, 723, 761, 763, 764, 765, 773, 777, 781, 840, 841, 853, 868, 873, 877, 880, 881, 882, 883, 886, 887, 890, 894, 897, 898, 900, 908, 911, 913, 915, 916, 918, 919, 923, 930, 935, 942, 943, 944, 945, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 965, 966, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1028, 1029, 1031, 1033, 1034], "numpi": [2, 7, 11, 22, 219, 224, 234, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 326, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 651, 652, 653, 654, 655, 658, 659, 660, 695, 697, 699, 702, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 777, 778, 779, 781, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 880, 881, 882, 883, 886, 887, 942, 943, 989, 990, 993, 994, 995, 997, 998, 1002, 1014, 1017, 1018, 1021, 1025, 1027, 1028, 1029], "numba": [2, 988], "interfac": [2, 984, 986, 987, 990, 991, 993, 998, 1002, 1005, 1006, 1008, 1017, 1018, 1027, 1029, 1030, 1033], "For": [2, 6, 7, 12, 13, 16, 17, 18, 20, 22, 23, 24, 79, 82, 99, 117, 119, 136, 139, 141, 145, 155, 157, 165, 166, 178, 179, 182, 183, 205, 207, 209, 257, 273, 277, 356, 416, 445, 469, 479, 481, 534, 669, 699, 767, 880, 891, 947, 954, 961, 983, 984, 987, 988, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1014, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1033], "instanc": [2, 7, 10, 11, 13, 16, 17, 21, 22, 23, 37, 99, 222, 255, 261, 263, 273, 276, 366, 416, 445, 458, 467, 503, 534, 669, 699, 703, 721, 723, 775, 840, 841, 983, 984, 990, 994, 995, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1018, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1033], "import": [2, 16, 17, 18, 21, 25, 99, 136, 144, 145, 147, 158, 220, 226, 273, 276, 284, 339, 366, 397, 416, 445, 458, 481, 502, 534, 580, 581, 582, 621, 651, 702, 721, 723, 781, 796, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 843, 877, 885, 890, 891, 892, 897, 898, 903, 908, 911, 912, 936, 942, 943, 949, 951, 952, 954, 955, 956, 957, 960, 983, 984, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "bm": [2, 16, 18, 21, 25, 115, 116, 136, 138, 141, 144, 145, 146, 147, 158, 219, 220, 224, 226, 234, 273, 276, 339, 366, 416, 458, 481, 502, 534, 580, 581, 582, 697, 699, 702, 796, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 843, 877, 885, 897, 898, 942, 943, 983, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "def": [2, 7, 17, 99, 144, 145, 147, 158, 277, 366, 458, 481, 502, 534, 580, 581, 582, 721, 877, 911, 942, 943, 947, 983, 984, 987, 989, 990, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "abs_ev": 2, "event": [2, 418, 642, 643, 644, 885, 961, 991, 1007, 1008, 1019], "indic": [2, 7, 11, 73, 93, 95, 96, 101, 102, 105, 110, 241, 242, 366, 380, 418, 481, 492, 531, 532, 533, 621, 690, 761, 763, 764, 765, 777, 828, 829, 830, 831, 832, 834, 835, 849, 853, 861, 873, 893, 897, 909, 926, 983, 987, 989, 1004, 1008, 1018, 1023, 1027], "indptr": [2, 101, 102, 105, 110, 380, 418, 1027], "post_val": [2, 643, 644, 645, 646, 647, 648, 649, 827, 828, 829, 830, 831, 832, 833, 1008], "valu": [2, 7, 11, 16, 25, 40, 41, 42, 44, 79, 80, 81, 82, 106, 107, 111, 112, 113, 114, 115, 116, 117, 119, 120, 129, 139, 144, 145, 147, 152, 154, 156, 158, 159, 162, 164, 165, 166, 170, 202, 203, 204, 211, 212, 213, 215, 220, 222, 226, 233, 235, 237, 238, 241, 242, 243, 244, 245, 250, 252, 253, 254, 261, 263, 273, 276, 286, 287, 295, 312, 352, 366, 380, 405, 418, 445, 458, 481, 492, 510, 531, 532, 533, 534, 580, 581, 582, 621, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 664, 665, 667, 669, 679, 695, 697, 702, 703, 715, 717, 721, 723, 761, 763, 764, 765, 777, 796, 827, 828, 829, 830, 831, 832, 833, 868, 873, 877, 880, 888, 889, 890, 891, 892, 893, 894, 896, 898, 900, 903, 904, 906, 908, 910, 911, 912, 913, 914, 915, 928, 936, 937, 949, 951, 952, 954, 956, 957, 958, 960, 983, 984, 987, 989, 990, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031], "return": [2, 7, 17, 25, 72, 87, 88, 89, 90, 91, 92, 99, 115, 120, 136, 138, 139, 141, 144, 145, 147, 148, 158, 174, 187, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 271, 277, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 300, 301, 303, 310, 311, 313, 314, 316, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 346, 347, 348, 350, 352, 353, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 399, 400, 402, 403, 408, 418, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 508, 511, 512, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 565, 568, 570, 573, 574, 580, 581, 582, 587, 589, 590, 591, 592, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 618, 621, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 664, 665, 667, 669, 670, 679, 683, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 715, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 760, 761, 763, 764, 765, 777, 778, 779, 780, 781, 783, 784, 787, 789, 793, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 868, 869, 871, 873, 874, 875, 876, 877, 880, 881, 882, 883, 884, 886, 887, 911, 915, 942, 943, 944, 945, 946, 947, 948, 983, 984, 987, 990, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1007, 1008, 1011, 1012, 1014, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "con_comput": [2, 277], "out": [2, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 481, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 658, 659, 660, 664, 665, 679, 690, 692, 695, 697, 702, 703, 715, 717, 721, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 868, 869, 870, 871, 872, 874, 875, 876, 983, 984, 987, 989, 990, 994, 999, 1000, 1002, 1003, 1005, 1017, 1029, 1030, 1031, 1033, 1034], "ins": 2, "_": [2, 9, 18, 40, 44, 47, 56, 64, 147, 152, 156, 157, 159, 178, 180, 183, 202, 203, 204, 366, 502, 893, 897, 906, 912, 916, 918, 940, 952, 960, 964, 987, 990, 998, 1003, 1005, 1006, 1007, 1012, 1019, 1023, 1026, 1029, 1031, 1033, 1034], "rang": [2, 79, 115, 117, 119, 144, 145, 147, 216, 238, 493, 494, 495, 496, 572, 621, 643, 644, 692, 730, 731, 732, 761, 763, 764, 765, 791, 868, 893, 984, 987, 989, 990, 996, 998, 999, 1000, 1002, 1006, 1008, 1020, 1027, 1028, 1029, 1031], "size": [2, 7, 8, 9, 11, 16, 18, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 85, 93, 120, 136, 138, 139, 141, 147, 152, 153, 156, 158, 159, 166, 169, 178, 202, 203, 204, 205, 206, 207, 208, 209, 210, 220, 226, 233, 238, 241, 242, 244, 276, 309, 404, 447, 458, 618, 645, 646, 647, 648, 649, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 761, 763, 764, 765, 778, 853, 858, 859, 868, 876, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 935, 936, 937, 938, 939, 940, 941, 944, 945, 983, 989, 990, 996, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1010, 1014, 1015, 1017, 1018, 1021, 1023, 1026, 1027, 1028, 1030, 1033, 1034], "j": [2, 9, 40, 45, 47, 48, 49, 50, 51, 53, 54, 79, 83, 93, 97, 117, 119, 144, 145, 147, 154, 155, 157, 166, 179, 219, 233, 238, 643, 644, 645, 647, 648, 649, 806, 814, 815, 816, 880, 886, 892, 896, 908, 910, 913, 914, 924, 925, 931, 937, 949, 952, 954, 957, 960, 989, 999, 1000, 1002, 1004, 1005, 1008, 1011, 1015, 1017, 1027, 1028], "index": [2, 11, 79, 117, 119, 238, 240, 273, 591, 621, 650, 692, 796, 868, 880, 884, 886, 918, 919, 921, 926, 933, 983, 986, 988, 989, 1008, 1011, 1027, 1030], "old_valu": 2, "event_sum": 2, "eval_shap": [2, 277], "tool": [2, 983, 987, 990, 1002, 1004, 1010, 1019], "dotdict": 2, "compat": [2, 11, 219, 245, 248, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 664, 667, 679, 715, 717, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 777, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 1012, 1014, 1030], "transform": [2, 11, 18, 21, 25, 214, 235, 262, 268, 467, 492, 531, 532, 533, 534, 840, 841, 983, 985, 986, 993, 996, 1008, 1014, 1015, 1017, 1018, 1025, 1027, 1029], "jax": [2, 11, 202, 203, 204, 219, 224, 234, 268, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 663, 697, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 773, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 896, 944, 945, 984, 986, 991, 996, 997, 1000, 1012, 1015, 1018, 1019, 1020, 1021, 1026, 1027, 1033], "bp": [2, 16, 17, 18, 21, 22, 23, 25, 99, 144, 145, 147, 158, 220, 226, 416, 481, 534, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 885, 890, 891, 892, 897, 898, 903, 908, 911, 936, 942, 943, 949, 951, 952, 954, 955, 956, 957, 960, 983, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1031, 1033, 1034], "from": [2, 7, 11, 17, 18, 45, 46, 52, 60, 65, 72, 73, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96, 98, 114, 143, 145, 154, 156, 162, 169, 202, 203, 204, 215, 226, 243, 260, 263, 271, 284, 318, 319, 320, 321, 322, 352, 397, 404, 458, 534, 651, 665, 667, 669, 683, 690, 695, 696, 697, 698, 699, 700, 702, 703, 721, 722, 723, 781, 877, 881, 885, 886, 888, 891, 892, 897, 906, 912, 913, 914, 915, 926, 930, 937, 949, 951, 952, 954, 955, 956, 957, 960, 983, 984, 986, 987, 989, 990, 994, 995, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1014, 1015, 1017, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033], "vmap": [2, 202, 203, 204, 880, 886, 945, 998, 1015], "multiple_run": 2, "hh": [2, 16, 18, 158, 942, 943, 949, 952, 960, 983, 1003, 1007, 1010, 1017, 1023], "neuron": [2, 9, 13, 16, 17, 18, 19, 20, 26, 30, 40, 45, 48, 49, 50, 51, 53, 54, 56, 58, 62, 65, 71, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 94, 99, 106, 107, 117, 119, 158, 235, 416, 645, 646, 647, 648, 649, 650, 816, 827, 828, 829, 830, 831, 832, 833, 880, 881, 884, 885, 886, 937, 940, 942, 943, 949, 951, 952, 954, 956, 957, 958, 960, 961, 983, 986, 987, 989, 990, 995, 999, 1002, 1004, 1005, 1006, 1008, 1009, 1017, 1018, 1020, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031], "runner": [2, 11, 16, 144, 145, 147, 890, 891, 892, 897, 898, 903, 908, 936, 942, 943, 949, 951, 952, 954, 956, 957, 960, 983, 987, 989, 990, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1017, 1018, 1019, 1020, 1023, 1026, 1029, 1031], "dyn": [2, 158, 259, 949, 987, 989, 994, 998, 1000, 1003, 1004, 1010, 1017, 1018, 1025, 1029, 1030, 1031, 1033, 1034], "dsrunner": [2, 6, 7, 12, 13, 18, 22, 23, 24, 37, 158, 890, 891, 892, 897, 898, 903, 908, 936, 942, 943, 949, 951, 952, 954, 956, 957, 960, 986, 987, 989, 990, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1016, 1017], "input": [2, 11, 13, 16, 18, 25, 37, 112, 113, 114, 158, 191, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 222, 224, 226, 228, 229, 230, 231, 232, 234, 235, 238, 244, 256, 257, 277, 278, 279, 280, 281, 282, 286, 287, 293, 299, 300, 301, 303, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 356, 366, 411, 448, 458, 469, 480, 481, 487, 488, 489, 490, 508, 526, 532, 533, 539, 571, 572, 580, 581, 582, 621, 696, 698, 700, 731, 740, 767, 780, 782, 785, 789, 790, 791, 792, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 857, 868, 889, 890, 891, 892, 896, 897, 898, 899, 900, 901, 903, 908, 909, 915, 936, 942, 943, 949, 951, 952, 954, 955, 956, 957, 960, 961, 962, 963, 964, 983, 986, 987, 989, 990, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1017, 1022, 1025, 1027, 1029, 1030, 1033], "numpy_mon_after_run": [2, 7, 11, 16, 1017, 1018, 1029], "fals": [2, 6, 7, 8, 9, 11, 18, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 79, 80, 81, 82, 93, 95, 96, 97, 106, 107, 117, 119, 139, 140, 142, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 206, 208, 210, 219, 224, 233, 234, 288, 289, 290, 291, 292, 294, 313, 337, 366, 377, 378, 380, 394, 404, 409, 418, 458, 469, 481, 492, 502, 505, 506, 512, 514, 518, 526, 528, 531, 532, 533, 534, 552, 556, 557, 561, 580, 581, 587, 589, 590, 591, 592, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 627, 634, 635, 637, 652, 653, 655, 658, 669, 692, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 761, 763, 764, 765, 777, 778, 779, 793, 802, 804, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 859, 870, 871, 873, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 915, 916, 922, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 949, 951, 952, 954, 956, 957, 958, 960, 983, 984, 989, 995, 996, 1000, 1006, 1008, 1012, 1015, 1017, 1018, 1027, 1029, 1033, 1034], "run": [2, 7, 11, 13, 16, 18, 144, 145, 147, 158, 202, 203, 204, 458, 534, 781, 890, 891, 892, 897, 898, 903, 908, 916, 936, 949, 951, 952, 954, 956, 957, 960, 986, 987, 988, 990, 991, 993, 995, 996, 1002, 1003, 1004, 1006, 1008, 1010, 1012, 1017, 1019, 1020, 1023, 1026, 1030, 1031], "100": [2, 16, 18, 20, 21, 25, 46, 136, 139, 147, 158, 534, 721, 808, 885, 892, 903, 911, 936, 942, 943, 960, 983, 984, 987, 989, 990, 994, 996, 998, 999, 1000, 1002, 1004, 1006, 1008, 1010, 1014, 1018, 1019, 1021, 1023, 1029, 1030, 1031, 1033, 1034], "mon": [2, 11, 16, 144, 145, 147, 158, 890, 891, 892, 897, 898, 903, 908, 936, 942, 943, 949, 951, 952, 954, 956, 957, 960, 983, 987, 989, 990, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1017, 1018, 1019, 1020, 1023, 1026, 1029, 1031], "arang": [2, 273, 458, 581, 669, 692, 708, 721, 723, 777, 796, 885, 911, 942, 943, 984, 993, 994, 997, 998, 1000, 1002, 1011, 1015, 1021, 1023, 1024, 1027, 1028, 1029], "add": [2, 10, 93, 206, 208, 210, 211, 212, 213, 224, 283, 284, 404, 703, 947, 961, 989, 1011, 1012, 1015, 1027], "mat": [2, 99, 995, 1025, 1027, 1028], "matrix": [2, 11, 73, 84, 98, 99, 102, 105, 110, 120, 130, 202, 203, 204, 220, 222, 226, 235, 380, 418, 796, 881, 882, 883, 884, 886, 950, 953, 955, 989, 997, 1000, 1008, 1021, 1023, 1027, 1030, 1031], "asmatrix": 2, "translat": [2, 202, 203, 204, 220, 222, 226, 702, 925], "rule": [2, 159, 167, 202, 203, 204, 877, 915, 916, 983, 995, 1006, 1007, 1008, 1012, 1019, 1023, 1030], "brainpylib": [2, 1008], "its": [2, 7, 57, 61, 93, 97, 145, 156, 157, 179, 235, 358, 405, 406, 445, 458, 508, 669, 692, 699, 702, 708, 721, 723, 761, 763, 764, 765, 891, 893, 894, 897, 902, 910, 913, 916, 957, 986, 987, 989, 990, 993, 995, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1027, 1028, 1030, 1031], "speed": [2, 898, 923, 949, 951, 952, 954, 956, 957, 958, 960, 987, 989, 993, 1000, 1026], "dsview": 2, "dynamicalsystem": [2, 7, 10, 11, 12, 18, 21, 22, 23, 24, 25, 37, 259, 534, 840, 987, 990, 994, 998, 1000, 1002, 1004, 1018, 1029, 1030, 1031, 1033, 1034], "defin": [2, 13, 72, 87, 88, 89, 90, 91, 92, 144, 147, 157, 158, 198, 199, 200, 201, 206, 208, 210, 214, 228, 229, 230, 231, 232, 242, 260, 262, 271, 277, 284, 534, 781, 877, 880, 886, 891, 897, 898, 904, 906, 911, 918, 944, 945, 947, 949, 984, 987, 989, 990, 994, 995, 997, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1033], "slice": [2, 64, 458, 853, 1011, 1027, 1028], "view": [2, 448, 984], "d": [2, 9, 40, 50, 51, 53, 54, 56, 58, 62, 144, 145, 147, 156, 157, 164, 166, 179, 182, 202, 203, 204, 205, 206, 207, 208, 209, 210, 220, 233, 428, 442, 669, 780, 815, 816, 857, 886, 889, 890, 891, 893, 894, 896, 898, 900, 906, 908, 910, 912, 914, 937, 940, 949, 951, 952, 954, 956, 957, 958, 960, 987, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1011, 1015, 1019, 1020, 1021, 1023, 1026, 1027, 1028, 1029], "class": [2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93, 94, 95, 96, 97, 98, 99, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 284, 326, 339, 404, 405, 406, 416, 445, 460, 462, 464, 481, 503, 508, 526, 531, 532, 533, 534, 621, 663, 697, 702, 703, 721, 781, 843, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 983, 984, 986, 987, 989, 990, 993, 994, 995, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1018, 1024, 1025, 1029, 1030, 1031, 1033, 1034], "einet_v2": 2, "network": [2, 6, 7, 9, 11, 18, 40, 58, 62, 93, 95, 97, 114, 120, 202, 203, 204, 215, 219, 224, 225, 235, 767, 806, 807, 812, 814, 815, 816, 818, 820, 880, 885, 888, 890, 891, 897, 900, 906, 908, 910, 923, 924, 930, 937, 949, 951, 952, 954, 955, 956, 957, 958, 960, 983, 986, 987, 991, 998, 999, 1006, 1008, 1009, 1010, 1018, 1025, 1027, 1028, 1029, 1032], "__init__": [2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93, 94, 95, 96, 97, 98, 99, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 339, 404, 405, 406, 416, 445, 481, 503, 534, 663, 843, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 983, 984, 987, 989, 990, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1018, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1034], "self": [2, 97, 99, 117, 158, 481, 534, 767, 892, 983, 984, 987, 989, 990, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1018, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "scale": [2, 93, 95, 118, 120, 124, 125, 126, 127, 128, 130, 132, 133, 134, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 224, 226, 234, 235, 672, 674, 676, 678, 680, 689, 705, 717, 720, 721, 722, 767, 807, 812, 815, 893, 900, 923, 940, 989, 990, 991, 1018, 1027, 1028, 1029, 1030, 1033], "method": [2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93, 94, 95, 96, 97, 98, 99, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 284, 285, 339, 397, 404, 405, 406, 416, 445, 503, 534, 559, 608, 610, 627, 658, 663, 685, 699, 703, 721, 723, 760, 780, 843, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 983, 986, 987, 989, 990, 994, 995, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1017, 1018, 1019, 1022, 1024, 1025, 1027, 1030], "exp_auto": [2, 9, 16, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 888, 889, 890, 891, 892, 896, 897, 898, 900, 901, 902, 903, 906, 908, 910, 935, 936, 937, 939, 949, 951, 952, 956, 957, 958, 960, 965, 966, 983, 987, 989, 994, 1002, 1003, 1004, 1007, 1008, 1018, 1025], "super": [2, 158, 481, 534, 983, 984, 987, 989, 990, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1018, 1024, 1025, 1027, 1029, 1030, 1031, 1033, 1034], "num_exc": [2, 983, 989, 1004, 1018, 1025], "int": [2, 9, 16, 20, 38, 41, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 82, 93, 94, 95, 96, 97, 112, 113, 114, 115, 116, 117, 119, 120, 137, 138, 141, 143, 144, 145, 146, 147, 156, 163, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 222, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 254, 261, 263, 273, 276, 349, 366, 380, 398, 404, 405, 406, 418, 445, 448, 458, 476, 479, 480, 481, 503, 506, 508, 526, 528, 572, 642, 643, 644, 645, 646, 647, 648, 649, 663, 664, 665, 667, 669, 679, 690, 692, 695, 697, 699, 702, 703, 707, 715, 717, 721, 723, 761, 763, 764, 765, 771, 773, 777, 780, 789, 791, 824, 827, 828, 829, 830, 831, 832, 833, 849, 853, 868, 876, 880, 881, 885, 893, 897, 899, 901, 902, 904, 905, 906, 909, 910, 918, 919, 921, 926, 933, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 989, 990, 995, 1002, 1008, 1017, 1018, 1020, 1027, 1030, 1031, 1033, 1034], "3200": [2, 983, 984, 987, 989, 1004, 1018, 1025], "num_inh": [2, 983, 989, 1004, 1018, 1025], "800": [2, 983, 984, 987, 989, 998, 1000, 1004, 1018, 1025, 1029], "n": [2, 9, 18, 44, 79, 82, 93, 95, 96, 106, 117, 119, 137, 143, 144, 145, 147, 152, 156, 157, 158, 159, 162, 164, 165, 166, 170, 178, 179, 180, 182, 183, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 226, 228, 229, 230, 231, 232, 235, 238, 241, 242, 244, 246, 389, 393, 397, 424, 426, 428, 431, 432, 436, 437, 440, 442, 508, 553, 665, 666, 669, 684, 686, 690, 697, 699, 702, 703, 721, 723, 757, 773, 780, 796, 812, 817, 820, 824, 847, 849, 853, 866, 870, 886, 897, 906, 910, 916, 923, 924, 944, 949, 960, 989, 997, 1000, 1003, 1004, 1007, 1015, 1017, 1021, 1022, 1023, 1027, 1028, 1031], "lif": [2, 21, 416, 534, 888, 951, 954, 956, 957, 983, 989, 990, 1004, 1007, 1008, 1010, 1018, 1025, 1029, 1030], "v_rest": [2, 888, 889, 890, 891, 896, 898, 901, 902, 908, 983, 987, 989, 990, 1004, 1007, 1008, 1018, 1025, 1029, 1030], "60": [2, 9, 50, 58, 158, 888, 896, 897, 903, 906, 910, 989, 990, 1000, 1004, 1008, 1010, 1017, 1018, 1019, 1025], "v_th": [2, 9, 158, 888, 889, 890, 891, 892, 894, 896, 897, 898, 900, 901, 903, 906, 908, 910, 936, 983, 989, 990, 1004, 1007, 1008, 1018, 1025, 1029, 1030], "50": [2, 49, 52, 60, 61, 62, 169, 471, 721, 815, 888, 890, 896, 897, 901, 906, 908, 910, 983, 989, 990, 996, 999, 1000, 1002, 1003, 1004, 1007, 1010, 1014, 1018, 1020, 1023, 1025, 1026, 1029, 1030, 1033, 1034], "v_reset": [2, 889, 890, 891, 896, 901, 908, 989, 990, 1004, 1007, 1008, 1018, 1025, 1029, 1030], "tau": [2, 16, 40, 137, 880, 888, 889, 890, 891, 892, 894, 896, 901, 902, 904, 908, 911, 935, 936, 937, 951, 957, 965, 983, 987, 989, 990, 994, 995, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1018, 1019, 1021, 1023, 1025, 1029, 1030, 1031], "20": [2, 17, 18, 51, 56, 57, 61, 79, 117, 119, 141, 158, 220, 226, 458, 697, 702, 880, 888, 896, 897, 901, 903, 906, 908, 909, 910, 930, 935, 983, 984, 989, 990, 996, 999, 1000, 1002, 1004, 1007, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031], "tau_ref": [2, 888, 889, 891, 900, 901, 908, 989, 1004, 1018, 1025], "v_initi": [2, 9, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 908, 910, 989, 1003, 1004, 1010], "initi": [2, 16, 22, 23, 41, 45, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 93, 115, 144, 145, 147, 154, 156, 159, 164, 165, 166, 170, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 224, 226, 234, 235, 261, 263, 273, 276, 291, 292, 445, 587, 592, 604, 607, 609, 612, 652, 653, 663, 734, 735, 737, 804, 889, 890, 891, 892, 896, 897, 898, 900, 901, 902, 906, 908, 910, 911, 912, 915, 918, 919, 921, 926, 933, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 983, 986, 987, 989, 990, 994, 998, 1000, 1002, 1007, 1014, 1021, 1023, 1024, 1027, 1031], "normal": [2, 16, 79, 112, 113, 114, 117, 119, 143, 202, 203, 204, 211, 212, 213, 220, 222, 226, 235, 267, 534, 617, 665, 699, 700, 717, 767, 880, 886, 897, 903, 906, 965, 987, 988, 989, 990, 993, 996, 998, 1000, 1004, 1012, 1027, 1028, 1030, 1033], "55": [2, 45, 46, 47, 48, 158, 169, 897, 910, 983, 987, 989, 996, 1003, 1004, 1007, 1012, 1018, 1023, 1025], "synaps": [2, 19, 71, 86, 117, 119, 418, 644, 650, 983, 986, 989, 990, 1004, 1006, 1009, 1018, 1025, 1027, 1028, 1029, 1030], "we": [2, 13, 16, 17, 18, 31, 32, 40, 52, 112, 156, 159, 162, 164, 206, 208, 210, 224, 273, 481, 534, 880, 881, 882, 883, 886, 887, 893, 894, 906, 949, 952, 960, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034], "6": [2, 45, 47, 48, 50, 51, 53, 54, 64, 154, 155, 158, 164, 165, 166, 173, 186, 220, 273, 458, 487, 581, 669, 692, 697, 699, 702, 708, 740, 789, 796, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 869, 877, 888, 892, 897, 898, 900, 901, 903, 906, 910, 912, 914, 924, 930, 937, 987, 989, 990, 995, 996, 997, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1018, 1020, 1023, 1025, 1027, 1028, 1029, 1031], "excitatori": [2, 885, 936, 940, 989, 999, 1000, 1004, 1018], "synapt": [2, 26, 27, 28, 29, 30, 71, 74, 75, 76, 77, 78, 86, 94, 99, 418, 642, 643, 644, 645, 646, 647, 648, 649, 650, 815, 827, 828, 829, 830, 831, 832, 833, 880, 885, 889, 890, 891, 892, 896, 898, 900, 901, 908, 910, 936, 949, 951, 952, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 986, 989, 990, 999, 1000, 1004, 1007, 1010, 1018, 1030], "weight": [2, 114, 116, 117, 119, 120, 122, 123, 128, 131, 135, 145, 164, 166, 205, 207, 209, 211, 212, 213, 214, 219, 220, 222, 224, 226, 234, 235, 238, 337, 341, 493, 494, 495, 496, 887, 915, 916, 923, 961, 967, 986, 990, 995, 996, 1004, 1005, 1010, 1018, 1029, 1030, 1031], "voltag": [2, 64, 885, 886, 889, 890, 891, 892, 893, 894, 897, 903, 906, 908, 910, 952, 954, 960, 1003, 1007, 1010, 1018], "wi": [2, 1018], "inhibitori": [2, 886, 936, 940, 989, 999, 1004, 1018], "esyn": [2, 1004], "exponenti": [2, 158, 179, 356, 411, 721, 767, 814, 889, 891, 914, 915, 956, 983, 987, 989, 990, 1004, 1010, 1018, 1024, 1026, 1029, 1030], "pre": [2, 26, 30, 75, 76, 77, 94, 99, 395, 414, 418, 642, 643, 644, 645, 646, 647, 648, 649, 650, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 987, 988, 989, 995, 1004, 1005, 1008, 1010, 1024, 1025, 1027], "post": [2, 26, 30, 71, 75, 76, 77, 99, 418, 642, 643, 644, 645, 646, 647, 648, 649, 827, 828, 829, 830, 831, 832, 833, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 963, 964, 989, 995, 1004, 1005, 1008, 1010, 1019, 1025, 1027], "conn": [2, 26, 30, 71, 75, 76, 77, 78, 80, 82, 99, 106, 119, 828, 829, 830, 831, 832, 949, 951, 952, 954, 955, 956, 957, 958, 959, 960, 983, 989, 990, 995, 1004, 1005, 1008, 1010, 1018, 1025, 1028, 1029, 1030], "connect": [2, 25, 26, 30, 117, 119, 234, 235, 643, 644, 645, 646, 647, 648, 649, 816, 882, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 983, 986, 989, 990, 991, 995, 1000, 1004, 1010, 1028, 1031], "fixedprob": [2, 983, 989, 1004, 1005, 1008, 1010, 1018, 1025], "g_max": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 949, 951, 952, 954, 956, 957, 958, 959, 960, 983, 989, 990, 1003, 1004, 1005, 1008, 1010, 1018, 1025, 1029, 1030], "output": [2, 7, 17, 18, 25, 28, 30, 37, 113, 192, 193, 194, 195, 196, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 224, 226, 234, 238, 242, 244, 249, 277, 404, 458, 481, 508, 531, 532, 533, 581, 645, 646, 647, 648, 649, 665, 669, 695, 696, 697, 698, 699, 700, 702, 703, 721, 723, 761, 763, 764, 765, 777, 791, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 873, 880, 881, 882, 883, 886, 887, 905, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 963, 964, 965, 966, 983, 989, 990, 997, 999, 1004, 1005, 1008, 1017, 1018, 1022, 1025, 1028, 1029, 1030, 1031, 1033, 1034], "synout": [2, 949, 951, 956, 957, 986, 989, 990, 1004, 1005, 1018, 1029, 1030], "coba": [2, 949, 958, 963, 989, 1004, 1005, 1018], "e": [2, 9, 16, 17, 37, 40, 43, 44, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 79, 93, 117, 119, 120, 137, 143, 168, 179, 202, 203, 204, 220, 226, 233, 235, 239, 241, 242, 244, 257, 285, 445, 481, 571, 665, 669, 697, 702, 703, 721, 723, 767, 782, 785, 792, 806, 814, 815, 816, 818, 821, 826, 886, 889, 890, 891, 892, 908, 913, 936, 937, 940, 949, 952, 957, 958, 960, 962, 964, 983, 984, 994, 995, 996, 997, 999, 1000, 1003, 1005, 1006, 1008, 1011, 1012, 1015, 1017, 1018, 1019, 1021, 1023, 1025, 1027, 1028, 1030, 1031], "isyn": [2, 1002, 1004], "80": [2, 45, 48, 49, 57, 153, 154, 155, 158, 169, 171, 172, 892, 897, 903, 906, 910, 955, 958, 989, 990, 1000, 1002, 1003, 1004, 1005, 1007, 1010, 1018, 1019, 1020, 1023, 1025], "net": [2, 247, 248, 949, 951, 952, 954, 955, 956, 957, 960, 984, 988, 989, 990, 995, 998, 999, 1004, 1005, 1008, 1010, 1018, 1025], "monitor": [2, 7, 11, 16, 18, 19, 144, 145, 147, 158, 885, 890, 891, 892, 897, 898, 903, 908, 936, 942, 943, 949, 951, 952, 954, 956, 957, 960, 983, 987, 989, 990, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1017, 1019, 1020, 1023, 1026, 1029, 1031], "spike": [2, 11, 52, 56, 60, 111, 112, 113, 114, 141, 158, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 903, 906, 908, 909, 910, 936, 937, 942, 943, 949, 954, 956, 957, 958, 960, 961, 965, 966, 983, 989, 995, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1017, 1018, 1021, 1025, 1029], "visual": [2, 16, 158, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 890, 891, 892, 897, 898, 903, 908, 936, 949, 951, 952, 954, 956, 957, 960, 983, 987, 988, 989, 990, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1018, 1021, 1027, 1028], "raster_plot": [2, 983, 989, 1004, 1018], "t": [2, 7, 9, 11, 13, 16, 17, 18, 37, 40, 41, 42, 45, 46, 47, 48, 49, 52, 56, 60, 64, 144, 145, 147, 156, 157, 158, 159, 162, 164, 165, 166, 170, 178, 179, 180, 182, 183, 206, 208, 210, 219, 224, 234, 235, 241, 242, 273, 284, 665, 806, 815, 824, 880, 881, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 908, 910, 911, 912, 913, 915, 918, 923, 924, 925, 930, 935, 936, 937, 940, 949, 951, 952, 954, 956, 957, 958, 960, 962, 963, 964, 965, 966, 983, 987, 989, 990, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1029, 1030, 1031, 1033], "show": [2, 16, 18, 44, 144, 145, 147, 152, 157, 158, 502, 702, 721, 723, 781, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 890, 891, 892, 897, 898, 903, 908, 911, 936, 949, 951, 952, 954, 956, 957, 960, 987, 989, 990, 994, 997, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "true": [2, 6, 7, 10, 11, 16, 17, 18, 37, 71, 75, 76, 77, 79, 94, 117, 119, 140, 142, 158, 162, 191, 202, 203, 204, 211, 212, 213, 214, 216, 220, 222, 226, 277, 284, 311, 337, 366, 373, 378, 397, 404, 418, 444, 469, 471, 481, 506, 526, 527, 528, 531, 532, 533, 534, 548, 561, 580, 581, 591, 599, 621, 652, 653, 669, 670, 702, 730, 731, 732, 735, 737, 750, 756, 777, 804, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 873, 880, 881, 882, 883, 886, 887, 890, 891, 892, 897, 903, 908, 909, 936, 983, 984, 987, 989, 990, 996, 997, 998, 1000, 1002, 1004, 1006, 1007, 1008, 1010, 1012, 1015, 1017, 1018, 1021, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "ha": [2, 7, 16, 18, 37, 43, 93, 140, 142, 153, 154, 155, 158, 159, 160, 161, 164, 167, 168, 169, 171, 172, 173, 178, 185, 186, 202, 203, 204, 219, 220, 222, 226, 233, 238, 256, 261, 263, 273, 283, 352, 397, 458, 481, 502, 508, 534, 581, 665, 721, 731, 813, 828, 829, 830, 831, 832, 877, 889, 891, 897, 898, 908, 910, 918, 919, 937, 949, 952, 954, 958, 960, 983, 984, 987, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1017, 1018, 1019, 1023, 1024, 1026, 1027, 1028, 1030], "provid": [2, 7, 25, 37, 79, 99, 117, 119, 238, 248, 256, 263, 416, 481, 534, 697, 699, 702, 723, 761, 763, 764, 765, 892, 967, 983, 984, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1030, 1033, 1034], "includ": [2, 37, 94, 97, 235, 241, 242, 259, 318, 319, 320, 321, 322, 405, 416, 445, 481, 721, 777, 781, 884, 889, 984, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 1003, 1008, 1011, 1012, 1015, 1017, 1018, 1023, 1024, 1025, 1027], "other": [2, 10, 12, 19, 22, 23, 25, 169, 205, 207, 209, 215, 235, 259, 282, 695, 699, 777, 897, 918, 923, 926, 949, 952, 960, 983, 986, 987, 989, 990, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1015, 1018, 1022, 1024, 1026, 1027, 1028, 1030], "nn": [2, 990, 998], "longer": [2, 277, 458, 893, 913, 989, 996, 999, 1004], "been": [2, 7, 37, 169, 256, 458, 877, 889, 897, 912, 918, 919, 930, 937, 952, 960, 988, 990, 992, 1003, 1004, 1007, 1015, 1027, 1033], "remov": [2, 11, 16, 37, 40, 218, 223, 236, 285, 663, 949, 987, 989], "sinc": [2, 11, 16, 37, 93, 145, 147, 218, 223, 236, 277, 284, 285, 387, 398, 445, 467, 663, 761, 763, 764, 765, 913, 918, 919, 949, 989, 1002, 1005, 1011, 1017, 1019, 1022, 1027], "instead": [2, 178, 218, 223, 226, 236, 387, 398, 467, 526, 534, 669, 699, 703, 721, 723, 912, 984, 997, 1003, 1008, 1011, 1017, 1027, 1028, 1029], "user": [2, 6, 7, 11, 12, 13, 18, 22, 23, 24, 35, 99, 226, 273, 285, 534, 669, 695, 699, 880, 983, 987, 988, 989, 990, 993, 994, 995, 996, 997, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1033], "should": [2, 6, 7, 11, 12, 13, 16, 22, 23, 24, 37, 85, 115, 144, 145, 147, 156, 202, 203, 204, 220, 235, 238, 261, 263, 273, 277, 284, 458, 480, 481, 492, 502, 534, 572, 621, 664, 665, 669, 692, 697, 699, 703, 708, 721, 723, 730, 731, 732, 761, 763, 764, 765, 777, 791, 880, 894, 896, 906, 912, 946, 947, 949, 951, 952, 954, 956, 957, 958, 960, 983, 987, 988, 989, 990, 994, 995, 996, 997, 998, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1017, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1033], "train": [2, 7, 12, 18, 22, 23, 111, 112, 113, 114, 141, 191, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 224, 238, 258, 275, 340, 806, 815, 816, 820, 843, 844, 880, 885, 912, 913, 919, 923, 931, 961, 983, 986, 987, 991, 993, 996, 998, 1000, 1002, 1021, 1024, 1028], "algorithm": [2, 6, 7, 22, 23, 93, 144, 154, 211, 212, 213, 815, 912, 913, 914, 915, 916, 923, 924, 930, 986, 990, 1000, 1024, 1032], "onlin": [2, 23, 913, 986, 1032], "learn": [2, 14, 215, 224, 245, 811, 814, 815, 816, 818, 888, 912, 913, 914, 915, 916, 918, 919, 921, 923, 924, 925, 926, 927, 930, 931, 932, 933, 952, 960, 983, 984, 986, 989, 990, 993, 995, 997, 1003, 1008, 1010, 1024, 1027, 1029, 1030, 1031, 1033, 1034], "offlin": [2, 22, 986, 1032], "The": [2, 6, 7, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 75, 76, 77, 78, 79, 80, 81, 82, 85, 93, 94, 96, 97, 106, 107, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 128, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 174, 180, 182, 183, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 222, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 238, 242, 243, 244, 245, 259, 261, 262, 263, 269, 273, 274, 276, 277, 284, 285, 352, 356, 358, 366, 380, 404, 406, 411, 418, 445, 448, 458, 467, 469, 472, 473, 475, 476, 477, 480, 481, 487, 488, 489, 490, 492, 502, 503, 508, 528, 531, 532, 533, 534, 539, 571, 572, 580, 581, 582, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 664, 665, 667, 669, 679, 683, 690, 695, 696, 697, 698, 699, 700, 702, 707, 708, 715, 717, 721, 722, 723, 730, 731, 732, 740, 761, 763, 764, 765, 767, 768, 769, 771, 772, 774, 775, 777, 780, 782, 785, 790, 791, 792, 796, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 840, 841, 849, 853, 868, 873, 877, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 906, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 921, 924, 926, 930, 932, 933, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 983, 984, 987, 988, 989, 990, 993, 994, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "updat": [2, 13, 16, 25, 35, 36, 37, 152, 158, 202, 203, 204, 206, 208, 210, 219, 224, 261, 263, 534, 877, 890, 896, 908, 912, 913, 916, 923, 924, 931, 965, 984, 987, 988, 989, 990, 993, 994, 996, 997, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1012, 1014, 1018, 1021, 1022, 1024, 1028, 1029, 1030, 1031, 1033, 1034], "definit": [2, 145, 906, 984, 989, 1006, 1008, 1011, 1020, 1023, 1026, 1027, 1030], "somemodel": 2, "dt": [2, 9, 11, 15, 16, 17, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 65, 115, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 266, 273, 339, 416, 474, 665, 770, 771, 806, 843, 880, 881, 886, 897, 898, 901, 902, 903, 904, 906, 911, 935, 936, 939, 948, 949, 951, 952, 954, 956, 957, 958, 960, 965, 966, 983, 987, 989, 990, 994, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1031, 1033, 1034], "pass": [2, 25, 205, 207, 209, 243, 339, 448, 481, 534, 777, 843, 983, 989, 1000, 1004, 1010, 1014, 1015, 1018, 1023, 1024], "tdi": [2, 11, 158, 987, 989, 990, 994, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1018, 1030], "where": [2, 9, 11, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 79, 112, 113, 117, 119, 136, 139, 144, 145, 147, 152, 156, 159, 162, 164, 165, 166, 179, 182, 202, 203, 204, 206, 208, 210, 219, 220, 224, 238, 241, 242, 244, 273, 288, 290, 291, 292, 294, 458, 481, 531, 532, 533, 534, 539, 587, 589, 592, 604, 605, 607, 609, 611, 612, 613, 652, 653, 665, 721, 723, 728, 729, 733, 734, 735, 736, 737, 738, 767, 773, 793, 796, 802, 804, 813, 871, 873, 886, 891, 893, 894, 898, 901, 902, 904, 906, 908, 910, 913, 918, 919, 937, 940, 949, 952, 954, 956, 957, 960, 964, 965, 966, 983, 987, 989, 990, 994, 996, 997, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031], "can": [2, 9, 11, 16, 17, 18, 22, 23, 25, 31, 32, 35, 36, 37, 40, 47, 56, 99, 141, 145, 147, 153, 156, 158, 162, 205, 207, 209, 211, 212, 213, 214, 219, 222, 224, 234, 235, 238, 244, 256, 257, 261, 263, 273, 284, 318, 319, 320, 321, 322, 358, 366, 397, 404, 405, 406, 458, 502, 534, 663, 669, 761, 763, 764, 765, 777, 853, 868, 880, 881, 882, 883, 885, 886, 887, 891, 897, 906, 915, 916, 918, 926, 944, 945, 946, 947, 949, 951, 952, 954, 956, 957, 958, 960, 964, 967, 983, 984, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "name": [2, 7, 8, 9, 10, 13, 15, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 111, 115, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 259, 261, 262, 263, 265, 266, 268, 273, 277, 284, 404, 467, 481, 508, 534, 723, 781, 840, 841, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 923, 924, 925, 927, 930, 931, 935, 936, 937, 938, 939, 940, 941, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 983, 987, 989, 990, 996, 1002, 1003, 1004, 1005, 1011, 1017, 1018, 1022, 1025], "like": [2, 7, 11, 18, 21, 22, 23, 25, 93, 136, 141, 162, 261, 263, 397, 406, 502, 508, 527, 534, 669, 695, 697, 699, 892, 908, 916, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1015, 1018, 1021, 1023, 1026, 1027, 1028, 1030, 1033], "sha": [2, 990, 998, 1029, 1030, 1031, 1033, 1034], "repres": [2, 40, 64, 162, 178, 182, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 228, 229, 230, 231, 232, 242, 380, 405, 406, 418, 458, 664, 667, 679, 715, 717, 761, 763, 764, 765, 777, 877, 880, 892, 893, 949, 966, 989, 994, 1005, 1008, 1012, 1026, 1027], "share": [2, 11, 18, 21, 868, 983, 989, 990, 995, 999, 1006, 1018, 1029, 1030], "argument": [2, 7, 11, 15, 16, 18, 21, 22, 37, 202, 203, 204, 221, 238, 273, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 481, 482, 483, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 695, 699, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 873, 874, 875, 876, 877, 942, 943, 944, 945, 946, 947, 983, 990, 994, 997, 1000, 1002, 1004, 1008, 1010, 1012, 1018, 1019, 1022, 1023, 1025, 1026, 1030, 1033], "across": [2, 13, 202, 203, 204, 730, 731, 732, 791, 957, 983, 990, 1008, 1018, 1030], "xxx": [2, 967, 988], "ar": [2, 9, 11, 16, 18, 20, 25, 40, 44, 45, 46, 48, 49, 50, 51, 53, 54, 64, 95, 96, 97, 99, 117, 119, 147, 152, 156, 164, 167, 169, 178, 198, 202, 203, 204, 206, 208, 210, 215, 219, 224, 226, 228, 232, 241, 242, 244, 255, 257, 404, 416, 445, 448, 481, 508, 531, 532, 533, 534, 582, 665, 669, 697, 699, 702, 703, 708, 721, 723, 730, 731, 732, 761, 763, 764, 765, 773, 777, 781, 789, 828, 829, 830, 831, 832, 859, 873, 877, 880, 889, 891, 893, 894, 897, 903, 904, 906, 908, 910, 912, 913, 923, 937, 940, 944, 949, 952, 954, 960, 961, 964, 965, 966, 983, 984, 987, 988, 989, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "variabl": [2, 9, 11, 15, 16, 18, 30, 35, 36, 37, 52, 115, 137, 143, 144, 145, 147, 152, 154, 158, 163, 211, 212, 213, 235, 241, 242, 261, 262, 263, 273, 274, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 322, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 481, 482, 483, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 664, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 773, 778, 779, 781, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 873, 874, 875, 876, 877, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 903, 906, 908, 910, 911, 935, 936, 937, 939, 941, 950, 952, 953, 955, 961, 965, 966, 983, 986, 987, 989, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1010, 1013, 1014, 1018, 1022, 1023, 1024, 1026, 1028, 1030], "receiv": [2, 7, 11, 22, 37, 136, 273, 277, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 877, 913, 961, 983, 989, 990, 996, 1000, 1002, 1004, 1008, 1010, 1012, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1029, 1030], "batch_axi": [2, 263, 265, 269, 274, 276, 1015, 1030], "batch": [2, 7, 11, 18, 25, 202, 203, 204, 206, 208, 210, 220, 226, 233, 239, 240, 241, 242, 244, 258, 263, 267, 275, 276, 339, 340, 481, 617, 690, 844, 919, 923, 944, 945, 983, 987, 1000, 1017, 1029, 1030, 1033, 1034], "axi": [2, 7, 11, 37, 79, 117, 118, 119, 130, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 219, 228, 229, 230, 231, 232, 239, 246, 249, 250, 251, 252, 253, 263, 276, 288, 290, 291, 292, 294, 295, 296, 306, 307, 308, 316, 337, 353, 363, 364, 365, 377, 379, 381, 382, 383, 386, 393, 421, 426, 431, 432, 436, 437, 440, 449, 458, 471, 480, 481, 482, 508, 510, 543, 556, 572, 587, 589, 590, 592, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 621, 625, 627, 652, 653, 655, 658, 667, 669, 692, 708, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 748, 749, 761, 763, 764, 765, 789, 791, 793, 794, 797, 800, 801, 802, 804, 834, 835, 846, 859, 860, 869, 871, 897, 945, 983, 987, 990, 998, 1000, 1008, 1012, 1017, 1018, 1027, 1029, 1030], "data": [2, 7, 11, 18, 72, 87, 88, 89, 90, 91, 92, 99, 100, 104, 112, 113, 114, 202, 203, 204, 211, 212, 213, 220, 222, 226, 260, 261, 263, 271, 273, 275, 276, 277, 318, 319, 320, 321, 322, 329, 352, 358, 380, 404, 418, 445, 472, 473, 475, 476, 481, 503, 528, 531, 532, 533, 584, 586, 650, 696, 698, 700, 761, 762, 763, 764, 765, 771, 789, 796, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 844, 857, 862, 863, 864, 865, 866, 867, 868, 873, 885, 887, 888, 891, 906, 942, 943, 944, 945, 950, 953, 955, 983, 984, 989, 990, 995, 996, 1004, 1008, 1011, 1012, 1014, 1015, 1017, 1018, 1025, 1026, 1027, 1029, 1032, 1033, 1034], "zero": [2, 135, 136, 158, 211, 212, 213, 220, 222, 226, 241, 242, 243, 248, 273, 276, 366, 448, 458, 481, 580, 581, 582, 621, 644, 645, 647, 648, 649, 650, 669, 695, 699, 777, 827, 828, 830, 831, 833, 877, 880, 897, 983, 984, 987, 989, 990, 994, 995, 996, 997, 1000, 1002, 1003, 1007, 1008, 1012, 1015, 1019, 1024, 1027, 1028, 1029, 1030], "success": [2, 897, 989, 1007], "fail": [2, 1019], "matherror": [2, 1011, 1015], "shape": [2, 16, 18, 52, 118, 120, 130, 192, 193, 194, 195, 196, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 226, 235, 238, 244, 245, 247, 248, 249, 250, 252, 253, 254, 273, 276, 277, 349, 350, 352, 380, 404, 412, 413, 418, 462, 465, 466, 481, 597, 622, 623, 642, 643, 644, 664, 665, 667, 669, 674, 679, 683, 695, 697, 698, 699, 702, 703, 712, 715, 717, 721, 722, 723, 761, 763, 764, 765, 789, 796, 821, 853, 861, 878, 879, 882, 897, 906, 935, 953, 983, 989, 990, 997, 998, 1000, 1008, 1010, 1011, 1012, 1015, 1018, 1021, 1024, 1026, 1027, 1028, 1029, 1030, 1033, 1034], "origin": [2, 145, 162, 202, 203, 204, 220, 222, 226, 527, 781, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 849, 853, 893, 903, 912, 993, 997, 1011, 1015, 1022, 1027, 1030], "while": [2, 40, 156, 166, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 481, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 877, 937, 951, 983, 995, 996, 1002, 1011, 1012, 1015, 1026, 1029], "got": [2, 1011, 1015, 1019], "bptt": [2, 990, 998, 1029], "back": [2, 6, 7, 777, 815, 892, 984, 986, 990, 998, 1002, 1006, 1020, 1021, 1026, 1032], "propag": [2, 6, 7, 18, 64, 815, 892, 986, 990, 1023, 1032], "onlinetrain": [2, 1034], "offlinetrain": [2, 1033], "_excluded_var": 2, "ignor": [2, 156, 215, 702, 721, 777, 883, 908, 1000, 1008, 1018], "when": [2, 11, 37, 82, 101, 145, 155, 202, 203, 204, 220, 222, 226, 238, 273, 276, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 481, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 652, 653, 654, 655, 658, 659, 660, 721, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 773, 777, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 810, 815, 820, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 873, 874, 875, 876, 891, 893, 894, 896, 898, 912, 918, 919, 921, 926, 936, 949, 958, 983, 984, 987, 989, 994, 995, 997, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1030, 1033], "retriev": [2, 11, 40, 534, 912, 913, 984, 990, 995, 996, 998, 1002, 1008, 1015, 1018], "var": [2, 202, 203, 204, 220, 226, 619, 738, 984, 995, 996, 1006, 1019, 1024, 1025], "ourmodel": 2, "b": [2, 7, 11, 16, 17, 93, 144, 145, 147, 152, 156, 166, 202, 203, 204, 214, 220, 226, 235, 241, 242, 289, 366, 379, 401, 404, 458, 509, 514, 534, 536, 552, 560, 563, 580, 581, 585, 624, 654, 665, 702, 703, 796, 806, 807, 812, 822, 838, 857, 872, 877, 889, 890, 892, 893, 894, 896, 898, 900, 908, 911, 936, 952, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1006, 1011, 1012, 1015, 1019, 1020, 1022, 1023, 1024, 1027, 1030, 1031], "ones": [2, 18, 158, 220, 222, 226, 241, 242, 366, 458, 580, 643, 695, 699, 877, 983, 989, 995, 996, 997, 998, 1002, 1007, 1008, 1011, 1012, 1015, 1019, 1021, 1024, 1026, 1028, 1029], "c": [2, 9, 11, 40, 43, 52, 60, 64, 144, 145, 147, 152, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 186, 202, 203, 204, 219, 220, 226, 238, 284, 285, 404, 534, 702, 724, 725, 743, 781, 806, 815, 816, 889, 890, 891, 893, 894, 896, 897, 898, 900, 903, 906, 908, 910, 954, 956, 989, 992, 994, 996, 997, 999, 1002, 1007, 1008, 1011, 1015, 1017, 1019, 1020, 1023, 1027, 1029, 1031], "random": [2, 16, 18, 21, 25, 75, 76, 77, 78, 79, 93, 94, 95, 96, 97, 113, 136, 137, 215, 220, 226, 235, 481, 796, 885, 897, 983, 984, 986, 987, 989, 990, 993, 996, 997, 998, 1000, 1004, 1007, 1008, 1010, 1012, 1013, 1015, 1021, 1024, 1025, 1026, 1029, 1030], "kei": [2, 7, 11, 37, 113, 405, 479, 543, 661, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 777, 984, 986, 995, 1002, 1004, 1008, 1014, 1015, 1018, 1024, 1025, 1029], "dict_kei": [2, 984, 995], "ourmodel0": 2, "analysi": [2, 144, 159, 162, 185, 186, 890, 891, 897, 898, 986, 989, 991, 993, 1000, 1007], "slowpointfind": [2, 987, 1000], "directli": [2, 891, 987, 989, 1008, 1010, 1011, 1014, 1023], "analyz": [2, 35, 36, 156, 897, 986, 989, 999, 1001, 1006], "an": [2, 7, 16, 17, 19, 21, 22, 23, 25, 40, 64, 93, 118, 130, 136, 139, 141, 152, 153, 155, 156, 158, 159, 162, 166, 169, 191, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 222, 224, 226, 228, 229, 230, 231, 232, 235, 238, 243, 255, 257, 276, 284, 318, 319, 320, 321, 322, 339, 380, 404, 418, 445, 458, 481, 508, 532, 533, 534, 572, 582, 597, 619, 663, 669, 690, 692, 695, 699, 704, 706, 723, 761, 763, 764, 765, 777, 780, 781, 791, 805, 806, 843, 849, 853, 881, 889, 891, 892, 893, 897, 898, 903, 906, 908, 910, 912, 913, 915, 937, 949, 983, 984, 987, 993, 994, 995, 996, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1028, 1030, 1031, 1033], "finder": [2, 987, 1000], "target_var": [2, 28, 31, 32, 35, 36, 37, 950, 955, 961, 962, 963, 964, 987, 989, 990, 994, 999, 1000, 1002], "v": [2, 9, 11, 16, 17, 18, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 97, 120, 147, 158, 369, 374, 388, 391, 481, 634, 656, 760, 816, 857, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 906, 908, 910, 911, 916, 930, 935, 937, 942, 943, 949, 951, 952, 954, 956, 957, 958, 960, 962, 964, 983, 987, 990, 994, 995, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1022, 1023, 1025, 1029, 1030], "m": [2, 9, 40, 44, 47, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 93, 95, 96, 136, 137, 139, 141, 147, 158, 220, 245, 273, 338, 346, 378, 424, 449, 450, 451, 485, 486, 535, 554, 633, 636, 665, 669, 697, 702, 703, 721, 723, 751, 796, 806, 807, 812, 847, 848, 849, 852, 853, 885, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 903, 906, 908, 909, 910, 912, 916, 935, 936, 937, 939, 941, 949, 951, 952, 956, 957, 958, 960, 989, 990, 996, 997, 999, 1003, 1004, 1005, 1007, 1008, 1010, 1019, 1021, 1022, 1023, 1026, 1027, 1028, 1031, 1033, 1034], "h": [2, 45, 60, 61, 62, 64, 97, 144, 147, 152, 154, 156, 157, 158, 159, 162, 164, 165, 166, 169, 170, 178, 180, 182, 183, 203, 204, 226, 812, 814, 815, 816, 818, 857, 894, 897, 906, 910, 937, 951, 956, 989, 996, 1003, 1007, 1010, 1022, 1023, 1026, 1027, 1031], "dataset": [2, 912, 989, 998, 1029, 1033, 1034], "mnist": [2, 912, 998, 1029], "fashionmnist": [2, 1029], "conduct": [2, 9, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 891, 897, 900, 903, 906, 910, 949, 951, 952, 956, 957, 958, 960, 962, 963, 964, 986, 1005, 1007, 1008, 1009, 1010], "condneugroup": [2, 1003], "ina": [2, 158, 1003], "channel": [2, 9, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 222, 226, 228, 229, 230, 231, 232, 885, 892, 897, 898, 906, 910, 949, 952, 957, 960, 964, 986, 1005, 1007, 1008, 1010, 1018], "ina_hh1952": [2, 57, 1003], "ik": [2, 158, 1003], "ik_hh1952": [2, 61, 1003], "il": [2, 158, 1003], "54": [2, 154, 897, 910, 1003, 1007, 1017, 1023, 1029], "387": [2, 897, 910, 1007, 1023], "layer": [2, 18, 21, 25, 122, 123, 534, 822, 885, 923, 983, 984, 986, 990, 995, 998, 1018, 1028, 1029, 1030, 1031, 1033, 1034], "commonli": [2, 991, 997, 1012, 1015, 1020, 1024, 1027, 1029, 1030], "dnn": 2, "reservoir": [2, 233], "compos": [2, 17, 25, 199, 200, 201, 229, 230, 231, 777, 983, 984, 986, 989, 1004, 1005, 1010, 1022], "twoendconn": [2, 1004], "synstp": [2, 30], "synltp": [2, 30], "prob": [2, 77, 94, 97, 215, 255, 257, 989, 1004, 1010, 1018, 1025, 1027, 1030], "stp": [2, 30, 949, 951, 952, 954, 956, 957, 958, 960, 965, 1005], "synplast": [2, 986, 1005], "std": [2, 445, 736, 885, 966, 996, 1005], "surrog": [2, 888, 898, 900, 901, 983, 1030], "gradient": [2, 243, 481, 492, 531, 532, 533, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 873, 912, 913, 914, 915, 916, 918, 919, 923, 924, 925, 930, 931, 983, 984, 986, 995, 998, 1000, 1003, 1015, 1029, 1030], "spike_with_sigmoid_grad": 2, "spike_with_linear_grad": 2, "spike_with_gaussian_grad": 2, "spike_with_mg_grad": 2, "shortcut": [2, 22, 23, 97, 115, 911, 948, 1027, 1028], "gpu": [2, 101, 277, 395, 414, 478, 776, 944, 945, 988, 998, 1006, 1017, 1020, 1021, 1026], "memori": [2, 115, 145, 147, 224, 285, 358, 395, 414, 816, 880, 886, 893, 944, 945, 952, 960, 961, 1002, 1008, 1017, 1020, 1027, 1028, 1031], "manag": [2, 416, 651, 777, 993, 1017], "via": [2, 285, 534, 781, 886, 892, 983, 988, 997], "disable_gpu_memory_prealloc": 2, "clear_buffer_memori": [2, 942, 943, 1017], "207": 2, "first": [2, 7, 11, 25, 40, 42, 64, 71, 93, 97, 145, 153, 155, 156, 164, 179, 182, 273, 284, 404, 448, 458, 481, 527, 528, 531, 532, 533, 597, 692, 708, 873, 883, 886, 889, 891, 898, 910, 912, 914, 915, 919, 923, 955, 983, 984, 987, 988, 989, 990, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1006, 1008, 1010, 1012, 1017, 1018, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "final": [2, 25, 139, 162, 164, 987, 989, 990, 994, 996, 998, 1004, 1017, 1023, 1025, 1033, 1034], "delai": [2, 52, 233, 261, 263, 265, 266, 273, 815, 889, 903, 906, 910, 911, 936, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 986, 989, 990, 1004, 1010, 1030, 1031, 1034], "chaoming0625": 2, "219": 2, "doc": [2, 284, 285], "logo": 2, "ztqakita": 2, "218": 2, "biolog": [2, 897, 898, 952, 1003, 1007], "nmda": [2, 906, 952, 989, 999], "xy17": 2, "221": [2, 898], "mathjax": 2, "problem": [2, 144, 154, 159, 165, 166, 167, 168, 169, 238, 244, 285, 445, 721, 925, 994, 995, 996, 1008, 1012, 1017], "222": [2, 154], "paramet": [2, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 35, 36, 37, 38, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 75, 76, 77, 78, 79, 80, 81, 82, 93, 94, 95, 96, 97, 106, 107, 112, 113, 114, 115, 116, 117, 119, 120, 128, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 157, 158, 163, 176, 177, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 222, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 261, 262, 263, 273, 276, 277, 284, 285, 318, 319, 320, 321, 322, 352, 356, 358, 366, 380, 397, 404, 411, 418, 445, 448, 458, 467, 469, 480, 481, 487, 488, 489, 490, 492, 502, 503, 508, 526, 527, 528, 531, 532, 533, 534, 539, 571, 572, 580, 581, 582, 597, 621, 642, 643, 644, 645, 646, 647, 648, 649, 650, 663, 664, 665, 667, 669, 679, 683, 690, 692, 695, 696, 697, 698, 699, 700, 702, 703, 707, 708, 715, 717, 721, 722, 723, 730, 731, 732, 740, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 780, 782, 785, 789, 790, 791, 792, 796, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 840, 841, 849, 853, 857, 873, 877, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 921, 923, 924, 925, 926, 927, 930, 931, 933, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 983, 984, 986, 987, 989, 990, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1016, 1018, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1033], "r": [2, 40, 50, 51, 53, 54, 65, 95, 154, 155, 235, 558, 805, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 888, 889, 891, 893, 894, 896, 898, 901, 902, 906, 908, 935, 937, 941, 987, 989, 990, 994, 996, 997, 998, 1000, 1002, 1004, 1007, 1008, 1012, 1017, 1020, 1021, 1026, 1027, 1029, 1030, 1031, 1033, 1034], "224": 2, "v2": [2, 276, 903, 1011, 1012], "rc1": 2, "226": 2, "227": 2, "quickstart": 2, "229": 2, "eseenti": 2, "montor": 2, "loss": [2, 7, 37, 481, 531, 532, 533, 873, 915, 984, 986, 987, 990, 994, 996, 997, 998, 1000, 1024, 1029, 1031, 1033, 1034], "230": 2, "op": [2, 215, 732, 1024, 1027], "test": [2, 445, 534, 651, 983, 990, 997, 1002, 1012, 1017, 1029, 1033, 1034], "231": 2, "simulaton": 2, "232": 2, "233": 2, "unifi": [2, 1005, 1021], "234": 2, "235": 2, "236": 2, "237": 2, "dtype": [2, 158, 269, 274, 276, 277, 311, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 352, 353, 364, 365, 366, 380, 381, 382, 383, 403, 412, 413, 418, 424, 445, 458, 460, 462, 464, 465, 466, 471, 481, 498, 503, 506, 527, 528, 532, 533, 534, 580, 581, 582, 584, 586, 589, 602, 603, 605, 609, 611, 612, 613, 621, 622, 623, 652, 653, 654, 661, 663, 664, 667, 669, 683, 696, 697, 698, 700, 717, 722, 730, 733, 735, 736, 737, 738, 745, 754, 761, 763, 764, 765, 768, 769, 772, 774, 777, 796, 801, 802, 804, 842, 847, 857, 871, 875, 878, 879, 983, 989, 990, 993, 994, 995, 996, 997, 998, 1000, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1024, 1027, 1028, 1029, 1030], "promot": 2, "239": 2, "240": 2, "241": 2, "path": [2, 897, 989, 1006, 1025], "organ": [2, 897, 992, 1028], "242": 2, "advanc": [2, 806, 822, 993, 1018], "243": 2, "enabl": [2, 93, 191, 214, 216, 771, 777, 988, 989, 991, 993, 994, 1002, 1010, 1012, 1031], "jit": [2, 11, 16, 235, 405, 406, 761, 763, 764, 765, 880, 881, 882, 883, 886, 887, 984, 986, 988, 989, 990, 993, 995, 998, 1006, 1007, 1010, 1011, 1013, 1015, 1018, 1023, 1024, 1026, 1029, 1031, 1033], "error": [2, 21, 72, 87, 88, 89, 90, 91, 92, 144, 152, 154, 155, 156, 159, 162, 164, 165, 166, 167, 169, 170, 171, 172, 244, 247, 249, 250, 252, 253, 255, 257, 260, 271, 284, 358, 469, 534, 822, 990, 995, 996, 997, 1000, 1006, 1011, 1012, 1014, 1015, 1017, 1019, 1022, 1023, 1027, 1031], "check": [2, 35, 284, 983, 995, 1000, 1008, 1011, 1015, 1025, 1027, 1030], "244": 2, "245": 2, "246": 2, "247": 2, "248": 2, "norm": [2, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 730, 916, 923, 1024], "pool": [2, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 228, 229, 230, 231, 232, 235, 999], "249": 2, "full": [2, 64, 369, 479, 635, 651, 777, 988, 992, 993], "changelog": 2, "excel": [2, 993], "have": [2, 9, 13, 17, 37, 40, 85, 93, 130, 152, 159, 164, 185, 186, 238, 397, 445, 481, 532, 533, 669, 730, 731, 732, 777, 885, 887, 892, 897, 903, 912, 930, 961, 983, 984, 988, 989, 990, 993, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1027, 1029, 1030, 1031, 1033, 1034], "made": [2, 898, 1002, 1008], "dozen": 2, "sampl": [2, 143, 192, 193, 194, 195, 196, 197, 215, 233, 235, 496, 664, 665, 667, 669, 679, 683, 690, 695, 697, 699, 702, 703, 715, 717, 721, 722, 723, 881, 990, 993, 1014, 1015, 1030, 1031], "which": [2, 7, 10, 11, 17, 18, 19, 22, 23, 25, 35, 36, 37, 40, 52, 55, 60, 99, 117, 119, 130, 147, 152, 153, 155, 157, 159, 161, 162, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 222, 226, 228, 229, 230, 231, 232, 255, 257, 261, 263, 273, 366, 397, 405, 406, 445, 458, 480, 481, 492, 508, 531, 532, 533, 534, 572, 581, 582, 621, 663, 665, 667, 669, 692, 695, 697, 699, 702, 703, 708, 721, 723, 730, 731, 732, 777, 781, 789, 791, 849, 853, 868, 873, 877, 880, 881, 884, 889, 890, 892, 893, 900, 902, 903, 906, 908, 909, 913, 937, 942, 943, 949, 983, 984, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "bernoulli": [2, 1030], "lognorm": 2, "binomi": [2, 147], "chisquar": 2, "dirichlet": [2, 665], "geometr": [2, 156, 159, 162], "f": [2, 16, 17, 21, 40, 57, 61, 115, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 235, 262, 467, 481, 482, 502, 534, 581, 665, 723, 806, 807, 812, 814, 815, 816, 818, 824, 840, 841, 857, 891, 893, 894, 897, 901, 906, 910, 911, 915, 948, 952, 960, 983, 984, 988, 989, 994, 995, 996, 997, 999, 1000, 1004, 1005, 1006, 1007, 1012, 1019, 1020, 1022, 1023, 1026, 1031], "hypergeometr": 2, "logseri": 2, "multinomi": 2, "multivariate_norm": 2, "negative_binomi": 2, "noncentral_chisquar": 2, "noncentral_f": 2, "power": [2, 145, 445, 814, 816, 929, 989, 1011, 1015], "rayleigh": 2, "triangular": [2, 883], "vonmis": 2, "wald": 2, "weibul": [2, 722], "make": [2, 7, 17, 31, 32, 93, 273, 277, 404, 445, 531, 532, 533, 580, 581, 582, 642, 643, 644, 692, 880, 952, 960, 986, 987, 988, 990, 991, 993, 994, 995, 996, 1001, 1002, 1006, 1008, 1019, 1022, 1025, 1027, 1030], "effici": [2, 18, 147, 669, 806, 807, 812, 816, 820, 961, 992, 1002, 1010, 1017, 1020, 1023, 1027], "numer": [2, 9, 16, 17, 37, 38, 41, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 115, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 156, 157, 158, 159, 162, 163, 164, 166, 174, 175, 177, 178, 185, 186, 187, 188, 190, 202, 203, 204, 220, 222, 226, 241, 242, 404, 405, 406, 416, 474, 730, 731, 732, 761, 763, 764, 765, 770, 771, 891, 894, 897, 901, 902, 904, 906, 910, 911, 912, 914, 915, 916, 948, 949, 951, 952, 956, 957, 958, 960, 966, 986, 989, 994, 996, 1000, 1002, 1004, 1007, 1008, 1022], "direct": [2, 93, 95, 96, 97, 815, 924, 949, 1003, 1008, 1027], "id_tap": 2, "larg": [2, 247, 248, 731, 886, 923, 940, 961, 989, 991, 994, 999, 1003, 1018, 1028], "overhead": 2, "current": [2, 7, 16, 28, 30, 40, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 112, 136, 138, 139, 141, 205, 207, 209, 219, 241, 242, 277, 285, 479, 651, 777, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 903, 906, 908, 910, 924, 949, 952, 954, 960, 962, 963, 964, 965, 966, 983, 988, 989, 991, 993, 997, 999, 1003, 1005, 1006, 1007, 1008, 1012, 1015, 1017, 1018, 1019, 1021, 1023, 1024, 1027, 1028], "check_erro_in_jit": 2, "highli": [2, 945, 986, 994, 1002, 1008, 1019, 1020, 1023], "jaxarrai": [2, 411, 1012], "none": [2, 6, 7, 8, 9, 10, 11, 13, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 93, 94, 95, 96, 97, 99, 100, 104, 111, 113, 114, 115, 117, 119, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 238, 244, 246, 249, 250, 251, 252, 253, 259, 261, 262, 263, 265, 266, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 282, 286, 287, 288, 290, 291, 292, 293, 294, 295, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 337, 339, 341, 353, 357, 358, 359, 360, 363, 364, 365, 366, 369, 370, 373, 374, 377, 378, 379, 381, 382, 383, 386, 393, 397, 401, 403, 408, 409, 412, 413, 416, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 449, 458, 465, 466, 467, 471, 481, 482, 492, 493, 494, 495, 496, 498, 502, 508, 509, 510, 511, 521, 522, 531, 532, 533, 534, 545, 548, 552, 554, 555, 556, 557, 559, 563, 580, 581, 584, 585, 586, 587, 589, 590, 592, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 618, 619, 621, 622, 623, 624, 625, 627, 635, 636, 645, 646, 647, 648, 649, 652, 653, 655, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 748, 752, 753, 754, 757, 760, 761, 763, 764, 765, 771, 777, 778, 781, 789, 793, 794, 800, 801, 802, 804, 834, 835, 838, 840, 841, 842, 843, 845, 846, 847, 858, 859, 860, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 923, 924, 925, 927, 930, 931, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 983, 990, 995, 998, 1000, 1002, 1004, 1006, 1007, 1008, 1012, 1015, 1019, 1021, 1024, 1025, 1027, 1028, 1030, 1033, 1034], "oo": [2, 984], "io": [2, 206, 208, 210, 224, 397, 534, 893, 894, 996, 1012, 1025], "work": [2, 285, 773, 898, 912, 960, 984, 986, 988, 993, 1000, 1002, 1003, 1012, 1017, 1019], "save_st": [2, 995, 1025], "load_stat": [2, 995, 1025], "arrai": [2, 7, 11, 45, 48, 50, 51, 54, 152, 153, 154, 155, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 186, 206, 208, 210, 211, 212, 213, 219, 224, 238, 241, 242, 254, 256, 261, 263, 272, 276, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 651, 652, 653, 654, 655, 658, 659, 660, 663, 664, 667, 669, 679, 683, 690, 692, 695, 697, 699, 702, 703, 708, 715, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 767, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 868, 869, 870, 871, 872, 874, 875, 876, 880, 881, 882, 883, 885, 886, 887, 893, 894, 898, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 1000, 1002, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "interchang": 2, "209": 2, "144": 2, "rais": [2, 93, 95, 96, 283, 284, 357, 397, 526, 669, 725, 996, 997, 1012, 1014, 1017], "210": 2, "213": 2, "feat": 2, "211": [2, 1020, 1023, 1031], "tutori": [2, 983, 987, 989, 993, 994, 1002, 1004, 1005, 1007, 1008, 1010, 1018, 1019, 1025, 1027, 1028, 1032], "212": [2, 155, 1020, 1023], "149": [2, 144], "216": [2, 169, 1019], "217": 2, "cross": [2, 239, 240, 255, 256, 257, 880, 886, 988, 990, 999, 1000], "correl": [2, 880, 883, 886, 887, 989], "201": [2, 154, 987, 1000], "202": [2, 1019], "sphinx_book_them": 2, "203": 2, "requir": [2, 44, 147, 167, 273, 275, 284, 397, 492, 781, 844, 953, 984, 988, 996, 1006, 1007, 1008, 1011, 1012, 1015, 1020, 1022, 1023, 1028], "txt": 2, "204": 2, "control": [2, 10, 16, 152, 166, 168, 169, 416, 458, 502, 534, 777, 805, 806, 807, 808, 810, 811, 813, 814, 816, 817, 818, 820, 821, 822, 823, 877, 898, 923, 952, 960, 983, 986, 997, 1004, 1013, 1017, 1019, 1023, 1030, 1031], "flow": [2, 41, 458, 502, 534, 877, 892, 952, 960, 983, 986, 1003, 1013], "205": 2, "208": 2, "192": [2, 155, 952, 960], "dynam": [2, 9, 11, 12, 13, 16, 19, 20, 22, 23, 26, 30, 35, 36, 38, 40, 41, 43, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 58, 60, 61, 62, 65, 97, 145, 215, 262, 276, 366, 405, 406, 416, 458, 481, 492, 502, 531, 532, 533, 580, 581, 582, 781, 815, 873, 877, 886, 889, 891, 892, 893, 897, 898, 900, 902, 908, 909, 937, 940, 965, 966, 984, 992, 993, 994, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1034], "193": 2, "125": [2, 57, 154, 155, 158, 897, 910, 1003, 1007, 1010, 1023], "two": [2, 7, 11, 13, 17, 26, 30, 37, 40, 85, 94, 99, 122, 147, 152, 159, 168, 170, 193, 196, 207, 212, 242, 273, 276, 284, 404, 502, 580, 663, 699, 702, 703, 777, 849, 853, 880, 883, 886, 887, 889, 891, 893, 894, 897, 903, 912, 919, 923, 952, 956, 960, 966, 983, 984, 987, 989, 990, 994, 995, 996, 997, 999, 1002, 1003, 1007, 1008, 1010, 1012, 1015, 1017, 1018, 1020, 1021, 1022, 1026, 1028, 1029, 1030], "compart": [2, 906, 910], "pinski": [2, 906], "rinzel": [2, 886, 893, 906, 994, 1002, 1020], "194": 2, "do": [2, 96, 162, 445, 534, 582, 761, 763, 764, 765, 915, 947, 984, 988, 989, 993, 996, 1003, 1004, 1008, 1012, 1014, 1015, 1018, 1019, 1020, 1023, 1024, 1026, 1028], "195": 2, "activ": [2, 9, 40, 46, 47, 52, 60, 64, 65, 145, 206, 208, 210, 215, 219, 220, 224, 226, 234, 235, 356, 411, 469, 480, 487, 488, 489, 490, 539, 571, 740, 767, 782, 785, 790, 792, 815, 826, 881, 882, 884, 886, 889, 893, 894, 897, 898, 906, 910, 952, 958, 989, 990, 1000, 1002, 1003, 1007, 1023, 1031, 1033, 1034], "py": [2, 259, 996, 1008, 1017, 1019, 1026, 1027], "196": 2, "functionalinati": 2, "197": [2, 1019], "rate": [2, 9, 40, 44, 64, 111, 112, 113, 114, 215, 881, 891, 897, 906, 912, 913, 914, 915, 916, 918, 919, 921, 923, 924, 925, 926, 927, 930, 931, 932, 933, 952, 955, 958, 986, 999, 1000, 1007, 1024], "198": 2, "199": [2, 46, 47, 1019], "120": [2, 43, 53, 54, 61, 62, 897, 906, 910, 990, 1003, 1007, 1010, 1019, 1023, 1028], "178": [2, 155, 996], "collector": [2, 1015], "addit": [2, 244, 761, 763, 764, 765, 913, 915, 950, 1007, 1031], "subtract": [2, 619, 1011, 1015], "179": [2, 144, 155], "reset": [2, 18, 219, 777, 889, 890, 891, 894, 896, 900, 901, 908, 983, 987, 989, 1007, 1018, 1030], "180": [2, 990, 1021], "181": 2, "_t": [2, 912, 995, 1007, 1008, 1028], "_dt": [2, 995, 1007, 1008, 1028], "183": 2, "small": [2, 97, 155, 178, 247, 248, 256, 723, 731, 777, 880, 893, 913, 914, 915, 994, 1000, 1002, 1008, 1023, 1027], "188": 2, "easier": [2, 284], "ifels": 2, "189": 2, "coupl": [2, 17, 886, 889, 893, 898, 906, 937, 950, 953, 955, 956, 987, 989, 999, 1000, 1023], "diffusivecoupl": [2, 989], "additivecoup": 2, "190": [2, 990], "191": 2, "heterogeneuo": 2, "170": [2, 990], "more": [2, 6, 7, 12, 18, 22, 23, 24, 114, 155, 162, 167, 219, 224, 226, 234, 356, 445, 469, 669, 721, 731, 767, 773, 777, 880, 886, 912, 913, 942, 943, 961, 983, 986, 987, 989, 990, 993, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1030, 1031], "implement": [2, 6, 7, 13, 99, 147, 153, 158, 183, 206, 208, 210, 219, 224, 241, 242, 445, 527, 534, 781, 849, 853, 902, 908, 910, 912, 913, 914, 915, 918, 930, 951, 956, 983, 988, 990, 991, 993, 995, 997, 998, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1031], "171": 2, "172": [2, 147, 951, 956, 957], "np": [2, 79, 117, 119, 139, 397, 404, 503, 508, 526, 528, 643, 644, 645, 647, 648, 649, 650, 651, 665, 667, 669, 692, 697, 702, 708, 721, 723, 777, 780, 781, 827, 828, 830, 831, 833, 857, 942, 943, 990, 994, 998, 1002, 1008, 1014, 1017, 1021, 1027, 1028, 1029], "astyp": [2, 984, 989, 1008], "173": 2, "readm": 2, "brain": [2, 18, 19, 416, 888, 897, 901, 983, 984, 992, 993, 1006, 1008, 1010, 1011, 1017, 1018, 1023, 1025, 1028, 1034], "174": 2, "176": [2, 155, 894], "177": 2, "shuffl": [2, 669, 692, 984, 1015, 1029], "153": [2, 185, 186], "licens": 2, "155": 2, "m1": [2, 96, 1020, 1027], "warn": [2, 219, 777, 998, 1008, 1020, 1021, 1025, 1026, 1027], "154": [2, 999, 1000], "those": [2, 44, 114, 242, 781, 987, 997, 1003, 1030], "most": [2, 162, 445, 777, 897, 913, 984, 989, 993, 996, 1002, 1005, 1007, 1008, 1015, 1017, 1024, 1027, 1030, 1031], "156": 2, "157": 2, "159": 2, "layernorm": [2, 220], "groupnorm": [2, 226], "instancenorm": [2, 220, 226], "nn_node": 2, "162": [2, 147, 936, 952, 1019], "conv": [2, 998], "node": [2, 21, 93, 95, 96, 97, 191, 214, 216, 219, 224, 233, 234, 235, 262, 467, 911, 983, 984, 987, 990, 995, 999, 1000, 1002, 1004, 1006, 1027], "161": [2, 894], "setup": [2, 781], "163": 2, "165": [2, 989], "trigger": [2, 777, 889, 949, 958, 996, 1007, 1012], "condit": [2, 363, 366, 423, 502, 580, 876, 877, 894, 952, 960, 996, 997, 1012, 1019, 1028], "166": [2, 1005], "build_conn": [2, 99], "164": 2, "167": 2, "get": [2, 93, 136, 138, 139, 148, 149, 156, 162, 164, 174, 175, 187, 188, 273, 445, 472, 473, 474, 475, 476, 477, 478, 503, 508, 777, 884, 885, 888, 909, 913, 949, 983, 987, 988, 989, 990, 994, 997, 998, 1000, 1002, 1003, 1008, 1014, 1017, 1018, 1021, 1024, 1026, 1027, 1029, 1030, 1031, 1033, 1034], "deserv": 2, "168": 2, "169": 2, "pars": 2, "127": [2, 185, 186, 1010], "overview_of_dynamic_model": 2, "ipynb": 2, "129": [2, 996, 1010, 1019], "reorgan": 2, "custom_op": 2, "ad": [2, 25, 93, 202, 203, 204, 220, 222, 226, 285, 722, 897, 901, 902, 913, 916, 924, 995, 1005, 1018, 1027], "128": [2, 18, 60, 62, 777, 906, 990, 1030], "modifi": [2, 44, 147, 159, 162, 284, 708, 910, 918, 996, 1010, 1011, 1023], "130": [2, 53, 54, 897, 903, 990, 1010], "about": [2, 445, 503, 508, 781, 984, 987, 989, 994, 995, 996, 997, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1018, 1021, 1027, 1029, 1030], "rnn": [2, 224, 234, 236, 990, 998, 1030, 1031], "differenti": [2, 144, 145, 146, 147, 151, 152, 155, 156, 157, 158, 162, 163, 166, 167, 177, 179, 185, 186, 190, 247, 248, 356, 481, 492, 531, 532, 533, 873, 891, 897, 898, 904, 936, 949, 951, 956, 957, 983, 984, 986, 994, 995, 1002, 1003, 1031], "equat": [2, 9, 16, 17, 40, 144, 145, 146, 147, 151, 152, 155, 156, 157, 162, 163, 166, 167, 177, 179, 185, 186, 190, 235, 889, 891, 897, 898, 901, 903, 904, 906, 910, 911, 916, 936, 937, 949, 951, 956, 958, 965, 983, 986, 994, 999, 1002, 1003, 1005, 1007, 1031], "132": [2, 45, 48, 53, 54], "123": [2, 984, 1012, 1014, 1027, 1029], "low": [2, 40, 48, 49, 93, 168, 169, 178, 198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 697, 698, 702, 718, 811, 813, 958, 986, 987, 989, 999, 1000, 1001, 1023, 1031], "level": [2, 284, 285, 445, 508, 984, 996, 1004, 1018], "134": [2, 1027], "generate_changelog": 2, "135": [2, 169], "133": [2, 56], "136": 2, "84": [2, 155, 903, 996], "137": 2, "138": 2, "139": 2, "solv": [2, 17, 155, 156, 162, 167, 897, 995, 1017, 1019, 1020, 1022, 1023, 1031], "131": 2, "special": [2, 242, 665, 723, 991, 1000, 1007, 1031], "type": [2, 11, 37, 45, 46, 48, 49, 115, 120, 136, 138, 139, 141, 148, 150, 152, 158, 163, 174, 176, 187, 189, 235, 237, 238, 241, 242, 243, 244, 245, 254, 256, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 300, 301, 303, 310, 311, 313, 314, 316, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 346, 347, 348, 350, 352, 353, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 387, 393, 394, 398, 399, 400, 402, 403, 404, 408, 418, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 565, 568, 570, 573, 574, 580, 581, 582, 587, 589, 590, 591, 592, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 618, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 664, 665, 669, 670, 679, 683, 690, 692, 695, 696, 697, 698, 699, 700, 702, 703, 708, 715, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 760, 761, 763, 764, 765, 768, 769, 771, 772, 774, 777, 778, 779, 780, 783, 784, 787, 789, 793, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 868, 869, 871, 873, 874, 875, 876, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 898, 906, 910, 911, 918, 935, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 954, 956, 957, 958, 960, 989, 995, 996, 997, 999, 1000, 1003, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1020, 1022, 1023, 1026, 1027, 1030, 1031], "140": [2, 17, 894, 900, 906, 990, 1010, 1022], "142": 2, "default": [2, 7, 11, 25, 37, 50, 51, 53, 54, 57, 58, 61, 62, 72, 87, 88, 89, 90, 91, 92, 93, 95, 96, 117, 119, 136, 138, 139, 141, 148, 151, 158, 174, 177, 187, 190, 191, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 216, 220, 222, 226, 228, 229, 230, 231, 232, 235, 244, 260, 271, 273, 284, 318, 319, 320, 321, 322, 356, 387, 397, 398, 411, 418, 458, 472, 473, 475, 476, 477, 480, 481, 492, 508, 531, 532, 533, 534, 539, 621, 664, 665, 667, 669, 679, 696, 697, 698, 700, 702, 703, 715, 717, 721, 723, 730, 731, 732, 761, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 777, 781, 789, 849, 853, 873, 877, 897, 910, 913, 914, 916, 918, 919, 921, 926, 933, 949, 951, 952, 954, 956, 957, 958, 960, 964, 987, 989, 990, 994, 995, 996, 998, 1002, 1004, 1010, 1014, 1015, 1018, 1021, 1023, 1025, 1026], "trainabl": [2, 274, 1015, 1024, 1029, 1030], "143": 2, "145": [2, 924], "depend": [2, 9, 11, 38, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 64, 65, 93, 130, 145, 147, 164, 366, 702, 885, 889, 893, 896, 903, 910, 952, 960, 995, 996, 1002, 1005, 1006, 1007, 1012, 1019, 1027, 1028, 1031], "147": 2, "146": 2, "singledata": 2, "148": [2, 1031], "written": [2, 9, 284, 508, 1003, 1022, 1026], "122": [2, 989, 1031, 1033, 1034], "dogdecai": [2, 1028], "124": 2, "126": 2, "whole": [2, 25, 226, 259, 458, 990, 991, 1021], "python": [2, 261, 262, 263, 284, 358, 366, 458, 467, 481, 492, 502, 508, 526, 534, 695, 699, 762, 840, 841, 862, 863, 864, 865, 866, 867, 984, 988, 993, 995, 996, 1017, 1019, 1023, 1025, 1026, 1027], "etc": [2, 416, 481, 534, 723, 781, 986, 993, 995, 1006, 1015, 1023, 1027], "matplotlib": [2, 16, 18, 144, 145, 147, 702, 721, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 897, 898, 911, 949, 951, 952, 954, 956, 957, 960, 988, 989, 990, 994, 1000, 1002, 1003, 1010, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1033, 1034], "110": [2, 990, 1010], "sync": 2, "master": 2, "branch": [2, 366, 502, 1012], "111": 2, "py3": [2, 1008, 1019], "delet": [2, 358, 667], "multipl": [2, 11, 13, 16, 17, 18, 56, 75, 76, 77, 179, 220, 233, 255, 273, 458, 508, 669, 796, 806, 896, 912, 921, 926, 933, 946, 947, 995, 997, 1002, 1005, 1006, 1007, 1008, 1012, 1015, 1018, 1022, 1027, 1028, 1030], "maco": [2, 781], "env": [2, 1008, 1019, 1027], "112": [2, 1010], "ci": 2, "113": [2, 816], "115": 2, "114": 2, "mac": 2, "116": 2, "enhanc": 2, "measur": [2, 244, 255, 257, 893, 894, 986, 989, 990, 1007, 1031], "117": [2, 57, 61, 897], "105": 2, "118": 2, "119": 2, "121": [2, 989, 1031, 1033, 1034], "continu": [2, 37, 79, 117, 119, 155, 356, 703, 815, 912, 990, 1007, 1029, 1031], "solver": [2, 17, 115, 911, 948, 986, 1000, 1002, 1007, 1022], "fraction": [2, 93, 115, 144, 145, 146, 147, 215, 777, 893, 894, 895, 924, 942, 943, 952, 960, 964, 965, 966, 986, 989, 1005, 1017], "fde": [2, 115, 986], "caputoeul": 2, "caputol1schema": 2, "glshortmemori": [2, 1019], "fractionalfhr": 2, "fractionalizhikevich": 2, "shared_kwarg": 2, "rnntrainer": 2, "rnnrunner": 2, "excit": [2, 46, 47, 57, 61, 885, 892, 897, 903, 937, 994, 1002, 1007, 1010, 1018], "announc": 2, "nearli": [2, 952, 960, 1000, 1023], "270": [2, 999, 1000], "commit": [2, 156], "chaom": [2, 983, 984, 987, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1031], "wang": [2, 880, 910, 960, 983, 984, 987, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1031], "xiaoyu": [2, 987, 989, 992, 993, 995, 996, 997, 1003, 1004, 1006, 1007, 1008, 1011, 1015, 1018, 1021, 1022, 1023, 1024, 1027, 1028], "chen": [2, 247, 248, 815, 987, 989, 992, 993, 995, 996, 997, 1003, 1004, 1006, 1007, 1008, 1011, 1015, 1018, 1021, 1022, 1023, 1024, 1027, 1028], "tianqiu": [2, 992, 1010, 1017, 1018, 1027], "zhang": [2, 992, 1010, 1017, 1018, 1027], "focus": [2, 1023], "stabil": [2, 156, 173, 202, 203, 204, 220, 222, 226, 761, 763, 764, 765, 914, 915, 916, 935, 994, 1000, 1002, 1023], "build": [2, 79, 86, 95, 96, 97, 99, 117, 119, 781, 983, 986, 991, 993, 1006, 1007, 1010, 1012, 1022, 1027, 1028, 1029, 1032, 1033, 1034], "It": [2, 11, 13, 18, 22, 23, 25, 43, 52, 60, 71, 93, 153, 154, 159, 160, 161, 167, 168, 171, 172, 173, 219, 220, 222, 224, 234, 238, 244, 247, 248, 261, 263, 339, 352, 481, 492, 663, 665, 723, 731, 843, 877, 885, 891, 893, 894, 900, 906, 916, 918, 919, 924, 949, 951, 952, 954, 956, 957, 958, 960, 984, 988, 989, 991, 994, 995, 997, 1000, 1002, 1004, 1007, 1008, 1011, 1012, 1015, 1017, 1018, 1020, 1021, 1022, 1026, 1027, 1031], "mani": [2, 458, 777, 880, 897, 912, 988, 989, 991, 993, 994, 995, 1002, 1008, 1017, 1018, 1019, 1027, 1030, 1033], "neural": [2, 6, 114, 215, 219, 224, 225, 235, 767, 806, 807, 812, 814, 815, 816, 818, 820, 822, 890, 896, 900, 924, 930, 936, 937, 983, 984, 991, 992, 998, 999, 1007, 1008, 1027, 1028, 1029, 1031], "artifici": [2, 225, 815], "ridg": [2, 22, 24, 986, 990, 1033, 1034], "regress": [2, 22, 24, 233, 244, 986, 990, 996, 1033, 1034], "through": [2, 7, 11, 22, 23, 40, 156, 458, 669, 773, 897, 952, 960, 967, 984, 987, 988, 989, 990, 994, 995, 996, 997, 999, 1003, 1004, 1008, 1010, 1011, 1015, 1017, 1018, 1020, 1022, 1024, 1025, 1027], "time": [2, 7, 9, 11, 13, 16, 18, 37, 40, 93, 112, 137, 138, 140, 141, 142, 143, 144, 145, 147, 167, 202, 203, 204, 226, 241, 242, 266, 273, 445, 534, 581, 669, 702, 781, 807, 812, 815, 820, 822, 880, 884, 885, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 904, 908, 909, 910, 924, 930, 936, 937, 940, 949, 950, 951, 953, 955, 956, 957, 958, 960, 965, 966, 983, 984, 987, 989, 990, 992, 993, 994, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "conveni": [2, 154, 695, 699, 891, 993, 1002, 1003, 1018, 1021, 1023, 1027, 1030], "construct": [2, 118, 130, 155, 206, 208, 210, 404, 416, 897, 983, 986, 989, 999, 1003, 1004, 1008, 1027, 1028], "dde": [2, 149, 175, 188, 986], "automat": [2, 158, 211, 212, 213, 481, 531, 532, 533, 986, 987, 989, 994, 995, 996, 1002, 1003, 1004, 1007, 1014, 1017, 1018, 1019, 1021, 1023, 1028], "linux": [2, 781], "window": [2, 147, 198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 781, 881, 912, 1020], "platform": [2, 358, 478, 702, 773, 776, 988, 993, 1017, 1019], "fulli": [2, 234, 983, 1027, 1028], "autograd": [2, 984, 996, 997], "step": [2, 11, 13, 18, 37, 93, 112, 144, 145, 147, 152, 153, 155, 156, 158, 159, 162, 166, 167, 169, 178, 215, 233, 273, 458, 820, 884, 911, 918, 924, 950, 953, 955, 983, 984, 988, 989, 990, 998, 1000, 1006, 1008, 1010, 1012, 1018, 1020, 1021, 1023, 1024, 1027, 1029, 1030, 1033, 1034], "travi": 2, "ddeint": 2, "euler": [2, 144, 158, 159, 161, 162, 164, 166, 179, 180, 983, 1006, 1019, 1020, 1026], "midpoint": [2, 159, 164, 166, 1023], "heun2": [2, 164, 1023], "ralston2": [2, 164, 1023], "rk2": [2, 17, 1022, 1023], "rk3": [2, 1023], "heun3": [2, 1023], "ralston3": [2, 1023], "ssprk3": [2, 1023], "rk4": [2, 898, 911, 995, 1023], "ralston4": [2, 1023], "rk4rule38": 2, "float": [2, 16, 24, 35, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 75, 76, 77, 78, 79, 93, 94, 96, 97, 112, 113, 114, 115, 116, 117, 119, 120, 128, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 157, 158, 163, 167, 202, 203, 204, 215, 220, 222, 226, 233, 235, 237, 241, 242, 243, 245, 246, 254, 256, 261, 263, 273, 356, 366, 387, 405, 406, 407, 416, 418, 445, 460, 462, 464, 474, 475, 481, 503, 507, 526, 528, 539, 621, 628, 642, 643, 644, 645, 646, 647, 648, 649, 650, 664, 665, 679, 695, 699, 701, 702, 703, 715, 717, 721, 723, 770, 771, 772, 777, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 880, 881, 885, 886, 893, 897, 901, 902, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 921, 923, 924, 925, 926, 927, 930, 931, 933, 942, 943, 949, 951, 952, 954, 956, 957, 958, 960, 961, 962, 964, 965, 966, 984, 1002, 1008, 1021, 1023, 1024, 1027, 1030], "complex": [2, 158, 244, 352, 473, 481, 769, 771, 777, 857, 897, 906, 989, 994, 997, 1002, 1007, 1010, 1012, 1019, 1023, 1027], "set_dfloat": 2, "set_dint": 2, "set_dcomplex": 2, "fixedlendelai": 2, "neutraldelai": 2, "dedic": [2, 991], "sparse_matmul": 2, "There": [2, 20, 156, 534, 923, 987, 989, 993, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1011, 1015, 1018, 1022, 1025, 1027, 1028], "pre2post_event_prod": 2, "creation": [2, 1027], "list": [2, 11, 19, 20, 35, 36, 79, 117, 119, 136, 139, 141, 144, 145, 147, 157, 202, 203, 204, 226, 284, 316, 318, 319, 320, 321, 322, 334, 335, 336, 348, 352, 366, 402, 406, 458, 481, 482, 496, 497, 534, 591, 708, 717, 797, 874, 909, 926, 942, 943, 946, 947, 984, 987, 995, 997, 1002, 1007, 1015, 1019, 1020, 1021, 1022, 1023, 1027], "tupl": [2, 11, 19, 20, 35, 36, 41, 61, 62, 79, 99, 117, 119, 120, 136, 141, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 229, 230, 231, 232, 235, 242, 284, 318, 319, 320, 321, 322, 337, 349, 366, 380, 400, 404, 418, 458, 459, 481, 493, 494, 496, 506, 512, 526, 530, 534, 547, 548, 552, 558, 559, 561, 572, 595, 618, 634, 635, 643, 644, 664, 665, 667, 669, 679, 690, 695, 697, 699, 702, 703, 715, 717, 721, 723, 780, 791, 849, 850, 853, 854, 861, 876, 884, 899, 905, 909, 916, 946, 947, 984, 997, 1002, 1007, 1008, 1018, 1021, 1022, 1027, 1028], "asarrai": [2, 796, 987, 989, 990, 994, 997, 998, 1000, 1010, 1015, 1019, 1027, 1029, 1031, 1033], "constantdelai": 2, "latest": [2, 534, 893, 894, 984, 988, 991, 996, 1008, 1012], "oldest": 2, "attribut": [2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93, 94, 95, 96, 97, 98, 99, 111, 112, 113, 114, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 259, 261, 262, 263, 265, 266, 268, 269, 270, 273, 274, 276, 277, 284, 404, 445, 503, 663, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1008, 1011, 1030], "integratorrunn": [2, 144, 145, 147, 1019, 1020, 1023, 1026], "auto": [2, 233], "find": [2, 37, 164, 534, 986, 987, 989, 994, 995, 996, 999, 1002, 1023, 1031], "randomst": [2, 235, 661, 662, 670, 984, 989, 1012, 1027, 1030], "sde": [2, 16, 948, 986, 1022], "exponential_eul": 2, "move": [2, 277, 912, 923, 930, 987], "parallel": [2, 162, 773, 942, 943, 944, 945, 984, 986, 1015, 1016], "syn2post_mean": 2, "syn2post_softmax": 2, "pre2post_mean": 2, "pre2post_softmax": 2, "todai": 2, "over": [2, 9, 11, 18, 25, 40, 44, 45, 46, 47, 48, 49, 97, 145, 159, 164, 198, 199, 200, 201, 202, 203, 204, 214, 226, 228, 229, 230, 231, 232, 244, 458, 481, 581, 669, 695, 703, 721, 824, 880, 881, 884, 886, 892, 937, 983, 987, 989, 990, 994, 1006, 1012, 1015, 1022, 1023, 1031], "70": [2, 9, 54, 59, 154, 445, 888, 896, 897, 903, 987, 989, 990, 1000, 1003, 1007], "program": [2, 285, 502, 773, 776, 983, 984, 986, 991, 992, 993, 1002, 1005, 1008, 1010, 1011, 1012, 1014, 1017, 1025], "jaxfwd": 2, "And": [2, 481, 923, 986, 989, 995, 1027], "progress": [2, 11, 37, 942, 943, 991, 1018, 1025], "bar": [2, 9, 11, 56, 64, 178, 180, 183, 723, 897, 906, 937, 942, 943, 1003, 1007, 1018, 1023], "structrunn": 2, "start": [2, 137, 138, 140, 142, 143, 448, 471, 481, 508, 699, 703, 721, 723, 749, 897, 990, 995, 1002, 1008, 1019, 1021, 1027, 1029, 1031, 1033, 1034], "260": 2, "perform": [2, 25, 318, 319, 320, 321, 322, 481, 761, 763, 764, 765, 806, 815, 816, 916, 931, 942, 943, 944, 945, 984, 987, 988, 990, 994, 996, 1000, 1002, 1007, 1010, 1012, 1015, 1018, 1029], "consist": [2, 40, 445, 458, 695, 699, 892, 937, 988, 989, 993, 1004, 1008, 1015], "migrat": [2, 988], "dimension": [2, 20, 79, 117, 119, 192, 193, 194, 195, 196, 197, 205, 207, 209, 211, 212, 213, 238, 246, 273, 448, 669, 692, 708, 897, 903, 986, 989, 999, 1001, 1008, 1010, 1012, 1023, 1026, 1027], "high": [2, 18, 40, 45, 79, 95, 96, 117, 119, 147, 198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 697, 698, 702, 718, 806, 815, 816, 891, 900, 986, 988, 997, 1001, 1012, 1023, 1031], "compil": [2, 284, 404, 405, 406, 534, 761, 763, 764, 765, 781, 880, 881, 882, 883, 886, 887, 983, 984, 986, 988, 989, 992, 993, 995, 1011, 1013, 1015, 1017, 1018, 1023, 1026], "separ": [2, 220, 312, 404, 761, 763, 764, 765, 777, 923, 994, 999, 1022, 1023, 1026], "use_backend": 2, "phaseplan": [2, 1002], "bifurc": [2, 31, 32, 890, 897, 898, 935, 939, 986, 989, 994], "fastslowbifurc": 2, "od": [2, 16, 148, 150, 151, 898, 911, 986, 989, 995, 1002, 1007, 1022, 1026], "expeulerauto": 2, "optim": [2, 6, 7, 37, 144, 202, 203, 204, 259, 409, 410, 669, 814, 816, 949, 951, 952, 954, 956, 957, 958, 960, 984, 986, 987, 989, 990, 994, 996, 998, 999, 1000, 1002, 1029, 1031], "phaseplane1d": [2, 1002], "phaseplane2d": [2, 987, 994, 999, 1000, 1002], "bifurcation1d": [2, 987, 1002], "bifurcation2d": [2, 989, 994, 999, 1002], "fastslow1d": [2, 1002], "fastslow2d": [2, 1002], "pre2post_event_sum": [2, 1008], "pre2post_sum": 2, "pre2post_prod": 2, "pre2post_max": 2, "pre2post_min": 2, "pre2syn": 2, "syn2post": 2, "syn2post_prod": 2, "syn2post_max": 2, "syn2post_min": 2, "convers": [2, 40, 952], "as_device_arrai": 2, "as_vari": 2, "as_jaxarrai": 2, "vector_grad": [2, 158, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824], "reportrunn": [2, 1007], "numpyrunn": 2, "izhikevich": [2, 17, 890, 894, 1020, 1022], "adexif": 2, "spiketimeinput": 2, "poissoninput": 2, "deltasynaps": 2, "expcuba": 2, "expcoba": [2, 1025], "ampa": [2, 906, 952, 958, 960, 989, 1005, 1010], "gabaa": [2, 1005], "cach": [2, 358, 445, 942, 943, 995, 996, 1006], "clean": [2, 1017, 1029], "clear_name_cach": [2, 995, 1006], "safe": [2, 1015, 1017, 1027], "place": [2, 284, 708, 899, 905, 989, 993, 996, 1006, 1017], "assign": [2, 114, 226, 238, 256, 815, 995, 1011, 1028], "If": [2, 7, 11, 13, 17, 18, 21, 37, 72, 79, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 112, 117, 119, 130, 136, 139, 141, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 226, 229, 230, 231, 235, 238, 243, 244, 260, 263, 271, 277, 283, 284, 397, 404, 448, 458, 469, 481, 502, 508, 526, 534, 665, 669, 692, 695, 697, 699, 702, 703, 721, 723, 730, 731, 732, 773, 777, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 828, 829, 830, 831, 832, 880, 881, 882, 883, 885, 886, 887, 891, 893, 897, 918, 942, 943, 944, 952, 960, 984, 987, 988, 992, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1006, 1008, 1011, 1012, 1014, 1015, 1017, 1018, 1021, 1022, 1024, 1025, 1028, 1030, 1031], "you": [2, 11, 16, 17, 37, 136, 139, 141, 238, 358, 534, 582, 773, 777, 828, 829, 830, 831, 832, 885, 912, 915, 923, 944, 947, 967, 983, 984, 987, 988, 990, 992, 994, 995, 996, 997, 1000, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033], "follow": [2, 40, 93, 97, 141, 145, 147, 157, 162, 183, 206, 208, 210, 224, 233, 241, 242, 261, 263, 273, 445, 481, 777, 885, 892, 894, 897, 904, 906, 910, 949, 965, 983, 987, 988, 989, 990, 992, 994, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1030, 1031, 1033], "link": [2, 93, 781, 988, 989, 1027], "http": [2, 153, 154, 155, 156, 162, 169, 211, 212, 213, 226, 233, 242, 243, 247, 248, 255, 256, 257, 445, 534, 721, 762, 862, 863, 864, 865, 866, 867, 889, 891, 892, 893, 894, 897, 903, 912, 913, 918, 924, 930, 937, 952, 960, 988, 989, 992, 996, 1012], "readthedoc": [2, 534, 893, 894, 996, 1012], "en": [2, 153, 154, 155, 156, 162, 169, 243, 445, 534, 721, 891, 892, 893, 894, 897, 903, 952, 960, 996, 1012], "paper": [2, 169, 721, 888, 912, 913, 915, 916, 992], "canon": [2, 989, 1004], "brainmodel": 2, "numpy_arrai": 2, "util": [2, 773, 776, 983, 995, 1003, 1007, 1010, 1023, 1025], "ndarrai": [2, 11, 26, 30, 115, 116, 138, 139, 141, 144, 145, 146, 147, 211, 212, 213, 219, 224, 234, 241, 242, 273, 318, 319, 320, 321, 322, 356, 380, 405, 406, 411, 534, 597, 665, 669, 692, 695, 697, 699, 702, 703, 708, 717, 721, 723, 780, 853, 880, 881, 882, 883, 884, 885, 886, 887, 949, 951, 952, 954, 956, 957, 958, 960, 962, 993, 998, 1002, 1018, 1025, 1027, 1028], "get_param": 2, "struct_run": 2, "adagrad": [2, 912, 930, 1024], "adadelta": [2, 930, 1024], "rmsprop": [2, 923, 1024], "enable_x64": [2, 987, 990, 994, 999, 1002, 1019], "set_platform": [2, 983, 984, 987, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "set_host_device_count": [2, 944, 1017], "bia": [2, 140, 142, 205, 207, 209, 211, 212, 213, 214, 219, 224, 226, 234, 235, 378, 445, 990, 1030, 1031], "int_": [2, 144, 145, 339, 398, 416, 702, 771, 806, 843, 989, 1026, 1029], "float_": [2, 339, 387, 416, 771, 843, 990, 1029], "32": [2, 60, 62, 155, 158, 169, 777, 906, 910, 937, 987, 998, 1000, 1007], "bit": [2, 445, 503, 777, 1023], "constructor": [2, 25, 663, 1004, 1007, 1008], "foundat": [2, 952, 986, 991, 995, 1011, 1029], "post_slic": 2, "structur": [2, 12, 16, 404, 418, 644, 777, 983, 989, 993, 995, 1005, 1008, 1012, 1018, 1023, 1024, 1027, 1028], "verbos": [2, 37, 1012, 1025], "option": [2, 9, 10, 11, 13, 19, 20, 26, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 51, 53, 54, 56, 77, 78, 79, 94, 117, 119, 120, 137, 138, 158, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 224, 228, 229, 230, 231, 232, 233, 234, 235, 238, 262, 276, 278, 279, 280, 281, 282, 286, 287, 293, 299, 300, 301, 303, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 337, 366, 397, 404, 458, 479, 481, 492, 502, 508, 531, 532, 533, 534, 581, 621, 649, 651, 663, 664, 665, 667, 669, 679, 690, 695, 697, 699, 702, 703, 707, 715, 717, 721, 723, 761, 763, 764, 765, 777, 781, 789, 849, 853, 873, 876, 877, 880, 881, 909, 914, 915, 949, 951, 952, 954, 956, 957, 958, 960, 989, 994, 1008, 1012, 1023, 1027], "backend": [2, 277, 527, 849, 853, 944, 945, 988], "symbol": [2, 241, 242, 1026], "trajectori": [2, 987, 989, 1002, 1018], "absolut": [2, 11, 244, 249, 250, 284, 777, 891, 1006], "access": [2, 11, 967, 984, 987, 995, 1004, 1006, 1007, 1011, 1014, 1015, 1018, 1027, 1028], "save": [2, 986, 1008, 1019, 1020, 1023, 1028], "load": [2, 19, 781, 986, 989], "rel": [2, 11, 64, 147, 723, 893, 908, 913, 989, 1006, 1025, 1031], "unexpectedtracererror": 2, "hint": 2, "pmap": [2, 202, 203, 204, 773, 944, 1015, 1017], "object": [2, 7, 10, 18, 19, 21, 25, 38, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 72, 87, 88, 89, 90, 91, 92, 141, 191, 198, 199, 200, 201, 205, 207, 209, 215, 216, 228, 229, 230, 231, 232, 260, 263, 268, 271, 283, 284, 366, 397, 404, 445, 458, 467, 481, 492, 502, 508, 527, 531, 532, 533, 534, 777, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 840, 841, 857, 877, 888, 896, 898, 900, 901, 915, 960, 983, 985, 986, 991, 993, 995, 1000, 1006, 1011, 1015, 1018, 1019, 1021, 1022, 1030], "grad": [2, 531, 532, 533, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 817, 818, 820, 821, 822, 823, 873, 984, 996, 998, 1024, 1029], "jacobian": [2, 531, 533, 897, 1000], "hessian": 2, "make_loop": [2, 1012], "make_whil": 2, "make_cond": 2, "fft": [2, 508], "descent": [2, 243, 815, 912, 914, 918, 919, 924, 931, 986, 995, 1000], "ecosystem": [2, 259, 986, 993, 995], "wrap": [2, 18, 262, 534, 695, 699, 989, 1003, 1006, 1011, 1012, 1017, 1018, 1019, 1023], "tensorcollector": 2, "collect": [2, 97, 202, 203, 204, 534, 1025, 1027], "modular": [2, 986, 995, 1003, 1005, 1010], "multi": [2, 692, 708, 812, 944, 946, 947, 991, 1017, 1026], "firing_r": [2, 989], "_i": [2, 40, 44, 152], "replac": [2, 97, 156, 285, 669, 983, 996, 1023], "mean": [2, 11, 16, 17, 22, 23, 71, 79, 85, 117, 119, 128, 137, 166, 169, 202, 203, 204, 235, 238, 244, 249, 250, 252, 253, 458, 481, 619, 646, 664, 669, 681, 685, 699, 700, 720, 733, 761, 763, 764, 765, 829, 877, 881, 897, 904, 919, 935, 936, 937, 939, 941, 984, 987, 989, 990, 996, 997, 998, 1000, 1008, 1011, 1015, 1018, 1021, 1022, 1023, 1028, 1029, 1031], "form": [2, 64, 147, 157, 164, 179, 318, 319, 320, 321, 322, 898, 903, 951, 957, 984, 987, 989, 1005, 1008, 1018, 1019, 1026, 1027], "dx": [2, 9, 137, 144, 145, 147, 846, 897, 935, 936, 939, 965, 966, 994, 1000, 1002, 1007, 1019, 1020, 1023, 1026], "reimplement": [2, 993], "input_step": 2, "monitor_step": 2, "intuit": [2, 987, 1002, 1010, 1023, 1027], "wai": [2, 18, 25, 99, 120, 156, 215, 261, 263, 273, 276, 777, 912, 916, 983, 989, 991, 993, 995, 996, 997, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1014, 1015, 1017, 1020, 1023, 1026, 1027, 1028, 1029, 1031], "singl": [2, 18, 25, 79, 117, 119, 152, 220, 226, 238, 240, 458, 665, 669, 695, 697, 699, 702, 703, 721, 723, 730, 731, 732, 820, 857, 886, 891, 897, 898, 910, 944, 957, 983, 989, 1002, 1003, 1017, 1022, 1023, 1027, 1028], "dynamicsystem": 2, "common": [2, 721, 983, 995, 1006, 1007, 1011, 1024], "refin": 2, "fire": [2, 49, 112, 113, 881, 888, 889, 890, 891, 893, 896, 897, 900, 901, 908, 909, 937, 940, 983, 987, 999, 1000, 1004, 1029], "friendli": 2, "cuda": [2, 988], "done": [2, 152, 912, 1022, 1030], "anywher": [2, 1014], "bottom": [2, 1008], "messag": [2, 397], "order": [2, 11, 25, 40, 42, 114, 115, 144, 145, 146, 147, 152, 153, 154, 155, 156, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 182, 185, 186, 206, 208, 210, 224, 233, 308, 311, 323, 324, 325, 370, 448, 665, 708, 724, 725, 743, 781, 794, 883, 893, 894, 895, 898, 910, 914, 942, 952, 988, 989, 990, 994, 997, 1000, 1007, 1008, 1012, 1017, 1020, 1023, 1027, 1030, 1034], "schedul": [2, 259, 912, 913, 914, 915, 916, 918, 919, 923, 924, 925, 926, 927, 930, 931, 1017], "unsqueez": 2, "squeez": [2, 16, 1031, 1033, 1034], "reshap": [2, 18, 448, 692, 708, 987, 990, 997, 998, 1000, 1008, 1028, 1029, 1033, 1034], "keyword": [2, 270, 534, 669, 997, 1006, 1012, 1023, 1026, 1030], "everi": [2, 13, 114, 156, 777, 913, 921, 933, 989, 995, 997, 1006, 1008, 1015, 1017, 1021, 1022, 1030], "bound": [2, 64, 147, 170, 171, 172, 534, 697, 717, 761, 763, 764, 765, 949, 997, 1031], "phase": [2, 11, 35, 36, 114, 892, 893, 897, 901, 951, 954, 956, 960, 983, 986, 994, 996, 1030, 1031, 1033], "OF": 2, "code": [2, 11, 16, 17, 18, 25, 114, 152, 157, 158, 481, 502, 582, 665, 669, 692, 695, 697, 699, 703, 708, 721, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 857, 890, 891, 892, 897, 898, 903, 908, 911, 949, 951, 952, 954, 956, 957, 960, 983, 988, 989, 993, 996, 1000, 1006, 1012, 1014, 1022, 1023, 1026, 1031], "style": [2, 284, 312, 993, 1002], "orient": [2, 268, 897, 983, 985, 986, 991, 993, 1015], "systemat": [2, 1002], "timeout": 2, "sympi": 2, "reconstruct": 2, "plane": [2, 35, 36, 199, 200, 201, 229, 230, 231, 893, 897, 986, 994], "repeat": [2, 508, 669, 761, 763, 764, 765, 1000, 1012, 1023], "mode": [2, 8, 9, 10, 11, 13, 18, 19, 20, 25, 26, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 124, 125, 126, 127, 132, 133, 134, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 258, 267, 275, 339, 340, 357, 369, 374, 416, 477, 508, 531, 532, 533, 558, 617, 626, 721, 725, 761, 763, 764, 765, 771, 775, 777, 834, 835, 843, 844, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 935, 936, 937, 938, 939, 940, 941, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 990, 1004, 1005, 1006, 1031, 1033, 1034], "differ": [2, 11, 17, 18, 25, 37, 79, 114, 117, 119, 139, 144, 145, 154, 155, 156, 202, 203, 204, 226, 255, 404, 445, 481, 531, 532, 533, 582, 669, 697, 777, 873, 889, 896, 900, 914, 923, 936, 956, 958, 983, 984, 986, 987, 989, 990, 994, 995, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1030, 1031], "durat": [2, 18, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 881, 893, 897, 908, 949, 958, 987, 989, 1002, 1006, 1008, 1017, 1018, 1019, 1020, 1021], "between": [2, 25, 26, 30, 64, 94, 99, 117, 122, 136, 139, 145, 154, 159, 162, 235, 244, 249, 250, 252, 253, 254, 257, 445, 581, 582, 697, 698, 702, 877, 880, 893, 898, 906, 912, 919, 923, 937, 965, 989, 990, 993, 994, 999, 1002, 1004, 1008, 1010, 1012, 1021, 1022, 1023, 1027, 1028, 1030, 1031], "benchmark": 2, "detail": [2, 144, 219, 224, 234, 241, 445, 534, 849, 853, 896, 900, 983, 987, 988, 989, 993, 995, 996, 997, 1002, 1005, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1020, 1022, 1024, 1027, 1030, 1031], "flexibl": [2, 18, 404, 983, 986, 992, 1002], "neustat": 2, "synstat": 2, "is_multi_return": 2, "hand_ov": 2, "satisfi": [2, 93, 95, 96, 112, 723, 906, 994, 1006, 1007, 1008, 1012, 1027], "prang": 2, "_obj_i": 2, "_pre_i": 2, "_post_i": 2, "scalar": [2, 11, 185, 186, 238, 244, 245, 246, 250, 252, 253, 366, 404, 411, 481, 492, 534, 539, 643, 644, 665, 721, 723, 914, 915, 961, 997, 1000, 1008, 1010, 1012, 1018, 1021, 1023, 1024, 1026], "renam": 2, "pytorch": [2, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 1030], "tensorflow": [2, 211, 212, 213, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 762, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876], "autopepe8": 2, "format": [2, 11, 136, 138, 139, 141, 152, 157, 211, 212, 213, 404, 502, 777, 911, 989, 995, 997, 1002, 1018, 1021, 1022, 1025, 1028, 1029], "prefix": [2, 312], "_t_": 2, "_dt_": 2, "_i_": 2, "st": 2, "declar": [2, 481, 984, 996, 1006, 1008, 1012, 1014, 1019], "vector": [2, 11, 35, 206, 208, 210, 224, 233, 245, 247, 248, 380, 481, 532, 533, 621, 643, 644, 669, 873, 887, 924, 945, 987, 990, 994, 999, 1002, 1008, 1012, 1017, 1019, 1021, 1023, 1026, 1027, 1030, 1031], "neutyp": 2, "syntyp": 2, "pypi": [2, 988], "onli": [2, 13, 18, 40, 79, 117, 119, 155, 156, 162, 202, 203, 204, 215, 257, 284, 285, 352, 404, 448, 481, 692, 697, 702, 708, 773, 776, 777, 781, 885, 908, 918, 937, 952, 960, 983, 984, 987, 988, 993, 994, 995, 996, 997, 999, 1002, 1003, 1007, 1008, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1030], "reli": [2, 18, 984, 988, 993, 994, 1004, 1012, 1015, 1020, 1023], "conda": [2, 988], "animate_1d": 2, "freqinput": 2, "phase_portrait_analyz": 2, "cann": [2, 1000], "redesign": 2, "synconn": [2, 1005, 1008], "neugroup": [2, 26, 30, 158, 534, 949, 951, 952, 954, 956, 957, 958, 960, 989, 1000, 1004, 1008, 1010], "diffequ": 2, "one2on": [2, 989, 1008, 1028], "all2al": [2, 949, 951, 952, 954, 956, 957, 960, 989, 990, 1005, 1010, 1028, 1029, 1030], "gridfour": [2, 107], "grid_four": 2, "grideight": [2, 106], "grid_eight": 2, "gridn": 2, "fixedpostnum": 2, "fixedprenum": 2, "gaussianprob": 2, "gaussianweight": 2, "dog": [2, 117, 255, 257, 1028], "plot_valu": 2, "plot_potenti": 2, "plot_rast": 2, "animation_potenti": 2, "cross_correl": 2, "voltage_fluctu": 2, "constant_curr": 2, "spike_curr": 2, "ramp_curr": 2, "gaba": [2, 989, 1005], "gapjunct": 2, "gamma": [2, 144, 145, 202, 203, 204, 220, 226, 665, 679, 880, 910, 915, 921, 924, 925, 926, 933, 935, 958, 999, 1000, 1031], "oscil": [2, 40, 45, 48, 50, 51, 52, 53, 54, 60, 64, 65, 140, 142, 880, 892, 893, 910, 924, 949, 957, 958, 994, 1002, 1005], "target": [6, 7, 11, 12, 14, 16, 18, 21, 22, 23, 24, 35, 36, 37, 38, 61, 62, 192, 193, 194, 195, 196, 197, 237, 238, 239, 240, 243, 244, 245, 248, 252, 253, 261, 262, 366, 458, 502, 534, 877, 896, 950, 953, 955, 961, 984, 986, 987, 989, 990, 994, 996, 998, 1000, 1002, 1006, 1008, 1012, 1028, 1029, 1031, 1033, 1034], "loss_fun": [6, 7, 990, 998, 1029], "loss_has_aux": [6, 7, 998, 1029], "loss_auto_run": [6, 7], "logger": [6, 7], "seed": [6, 7, 75, 76, 77, 78, 79, 93, 94, 95, 96, 97, 113, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 143, 215, 235, 663, 696, 698, 700, 722, 885, 907, 940, 961, 993, 996, 998, 1014, 1015, 1027, 1030], "shuffle_data": [6, 7], "kwarg": [6, 7, 12, 14, 22, 23, 24, 27, 29, 35, 36, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93, 94, 95, 96, 97, 98, 191, 217, 218, 221, 223, 236, 296, 298, 405, 406, 461, 462, 463, 470, 534, 564, 565, 566, 579, 583, 626, 651, 849, 853, 911, 989, 1004, 1006, 1007, 1008], "sourc": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 306, 307, 308, 309, 311, 312, 313, 314, 316, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 346, 347, 348, 349, 350, 352, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 527, 530, 531, 533, 534, 535, 536, 537, 538, 539, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 570, 571, 572, 573, 574, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 595, 596, 597, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 995, 1031], "trainer": [6, 7, 12, 22, 23, 24, 990, 998, 1029, 1030, 1031, 1033, 1034], "feedforward": [6, 235, 984], "refer": [6, 7, 12, 22, 23, 24, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 93, 95, 96, 97, 114, 120, 144, 145, 147, 153, 154, 155, 156, 159, 162, 164, 166, 167, 168, 169, 171, 172, 179, 185, 186, 202, 203, 204, 215, 219, 224, 233, 235, 241, 242, 243, 245, 247, 248, 255, 256, 257, 284, 404, 445, 477, 481, 508, 581, 721, 723, 806, 807, 811, 812, 814, 815, 816, 817, 818, 820, 822, 880, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 903, 906, 908, 910, 912, 913, 914, 915, 916, 923, 924, 925, 930, 935, 936, 937, 949, 951, 952, 956, 957, 958, 960, 966, 983, 987, 996, 997, 1003, 1005, 1007, 1010, 1011, 1015, 1022, 1027, 1028], "dyamic": 7, "system": [7, 12, 13, 16, 19, 20, 26, 30, 31, 32, 35, 36, 37, 145, 147, 156, 157, 164, 166, 215, 781, 806, 815, 816, 822, 886, 892, 893, 894, 897, 898, 903, 909, 935, 986, 988, 989, 990, 997, 999, 1000, 1003, 1007, 1008, 1010, 1017, 1018, 1020, 1021, 1022, 1023, 1027, 1031, 1032], "model": [7, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 93, 95, 96, 158, 219, 237, 242, 254, 255, 256, 258, 267, 340, 358, 416, 617, 721, 880, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 910, 916, 935, 936, 937, 939, 940, 941, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 962, 963, 964, 965, 966, 984, 986, 993, 994, 995, 996, 997, 998, 1002, 1006, 1012, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1031], "str": [7, 9, 10, 11, 13, 16, 18, 19, 20, 21, 22, 23, 25, 26, 30, 37, 38, 41, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 72, 87, 88, 89, 90, 91, 92, 112, 115, 144, 145, 146, 147, 148, 151, 152, 158, 163, 174, 177, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 224, 228, 229, 230, 231, 232, 234, 235, 238, 244, 260, 261, 262, 263, 271, 273, 277, 284, 358, 397, 467, 478, 479, 508, 528, 531, 534, 558, 777, 805, 806, 807, 808, 813, 814, 816, 817, 821, 822, 823, 840, 841, 857, 880, 885, 886, 897, 899, 901, 902, 904, 905, 906, 909, 910, 911, 914, 915, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 962, 963, 964, 966, 1012, 1017, 1020, 1030], "callabl": [7, 11, 16, 21, 22, 23, 37, 41, 45, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 114, 115, 144, 145, 146, 147, 151, 152, 157, 163, 177, 190, 191, 202, 203, 204, 205, 207, 209, 219, 220, 222, 224, 226, 234, 235, 261, 262, 263, 273, 277, 366, 458, 467, 479, 481, 492, 534, 580, 581, 582, 777, 840, 841, 873, 877, 897, 901, 902, 906, 910, 911, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 990, 1010, 1018, 1030], "string": [7, 11, 22, 23, 72, 87, 88, 89, 90, 91, 92, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 219, 224, 228, 229, 230, 231, 232, 234, 260, 271, 284, 285, 404, 405, 407, 464, 507, 508, 534, 628, 777, 857, 996, 1023, 1025], "chosen": [7, 891, 897, 1012, 1027, 1031], "modul": [7, 25, 55, 202, 203, 204, 206, 208, 210, 211, 212, 213, 220, 222, 226, 284, 445, 508, 781, 891, 893, 986, 987, 989, 990, 993, 998, 999, 1014, 1015, 1019, 1027], "otherwis": [7, 52, 56, 72, 87, 88, 89, 90, 91, 92, 260, 271, 481, 621, 665, 721, 723, 828, 829, 830, 831, 832, 994, 996, 997, 1002, 1014, 1017, 1018, 1023, 1024, 1027], "predict": [7, 11, 237, 238, 239, 240, 243, 245, 247, 248, 251, 252, 253, 255, 256, 891, 984, 990, 996, 998, 1029, 1033, 1034], "set": [7, 11, 16, 18, 37, 40, 151, 156, 177, 190, 202, 203, 204, 220, 222, 226, 238, 244, 247, 248, 257, 339, 352, 404, 416, 481, 531, 532, 533, 534, 621, 651, 669, 702, 707, 761, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 777, 828, 829, 830, 831, 832, 843, 873, 893, 912, 918, 919, 921, 926, 942, 943, 944, 954, 983, 989, 990, 994, 996, 997, 998, 999, 1008, 1010, 1012, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1031, 1033], "contain": [7, 11, 19, 25, 238, 241, 242, 245, 246, 249, 250, 252, 253, 255, 404, 481, 492, 643, 644, 697, 781, 849, 853, 891, 897, 913, 942, 943, 984, 989, 1004, 1006, 1007, 1008, 1011, 1018, 1021, 1022, 1024, 1027, 1028], "part": [7, 158, 233, 242, 352, 897, 918, 987, 989, 994, 995, 1000, 1007, 1017, 1018, 1023, 1027], "exampl": [7, 11, 16, 17, 18, 20, 21, 22, 23, 25, 79, 82, 117, 119, 136, 139, 141, 144, 145, 147, 156, 158, 220, 226, 257, 273, 277, 397, 404, 445, 458, 481, 502, 503, 508, 526, 528, 534, 580, 581, 582, 651, 669, 692, 695, 697, 699, 702, 703, 708, 721, 723, 777, 780, 781, 789, 796, 857, 880, 885, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 903, 908, 911, 931, 936, 942, 943, 947, 949, 951, 954, 955, 956, 957, 958, 960, 983, 987, 988, 989, 990, 993, 994, 995, 997, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1027, 1028, 1031, 1033], "inform": [7, 20, 79, 114, 117, 119, 156, 277, 356, 445, 469, 503, 508, 643, 644, 767, 773, 781, 806, 815, 816, 822, 989, 990, 992, 996, 1003, 1007, 1008, 1015, 1020, 1027, 1030, 1031], "bool": [7, 10, 11, 16, 18, 20, 37, 41, 52, 61, 62, 75, 76, 77, 79, 80, 81, 82, 94, 97, 106, 107, 117, 119, 139, 140, 142, 152, 157, 158, 202, 203, 204, 220, 222, 226, 277, 284, 337, 366, 380, 397, 404, 405, 406, 418, 458, 469, 472, 479, 481, 492, 502, 506, 516, 524, 525, 526, 527, 528, 531, 532, 533, 534, 561, 581, 642, 643, 644, 761, 763, 764, 765, 768, 771, 777, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 857, 873, 880, 881, 882, 883, 886, 887, 899, 905, 911, 915, 916, 944, 945, 983, 989, 995, 996, 1007, 1008, 1015, 1018, 1023, 1027], "To": [7, 11, 147, 702, 703, 777, 880, 983, 984, 988, 989, 990, 993, 995, 999, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1022, 1024, 1026, 1027], "whether": [7, 11, 18, 20, 37, 52, 75, 76, 77, 79, 80, 81, 82, 94, 97, 106, 107, 117, 119, 140, 142, 152, 157, 211, 212, 213, 277, 380, 397, 418, 458, 469, 481, 492, 502, 526, 531, 532, 533, 669, 761, 763, 764, 765, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 828, 829, 830, 831, 832, 873, 880, 881, 882, 883, 886, 887, 889, 890, 891, 892, 896, 898, 900, 908, 915, 954, 990, 995, 997, 1000, 1002, 1007, 1008, 1015, 1018, 1023, 1025, 1027, 1028], "auxiliari": [7, 242, 481, 531, 532, 533, 873, 989, 994, 999, 1000, 1002], "expect": [7, 202, 203, 204, 220, 222, 226, 238, 534, 723, 781, 984, 990, 996], "moreov": [7, 531, 532, 533, 894, 949, 965, 983, 987, 988, 990, 993, 994, 995, 1002, 1007, 1008, 1018, 1023, 1030], "dict": [7, 11, 16, 19, 22, 23, 25, 26, 30, 35, 36, 37, 99, 158, 262, 366, 405, 458, 467, 479, 481, 492, 502, 531, 532, 533, 534, 580, 581, 582, 777, 840, 841, 873, 877, 911, 942, 943, 944, 945, 946, 947, 949, 951, 952, 954, 956, 957, 958, 960, 983, 984, 989, 990, 994, 995, 997, 999, 1002, 1004, 1018, 1023, 1024, 1025, 1027, 1031], "whose": [7, 22, 23, 37, 112, 113, 285, 458, 492, 531, 532, 533, 873, 984, 987, 994, 995, 1000, 1004, 1005, 1006, 1024, 1028], "log": [7, 40, 112, 238, 241, 242, 247, 248, 255, 257, 571, 572, 667, 679, 731, 792, 811, 813, 1014, 1027, 1029], "item": [7, 19, 22, 23, 669, 723, 777, 995, 1012, 1018], "correspond": [7, 16, 164, 165, 166, 170, 481, 534, 667, 777, 780, 868, 893, 894, 897, 903, 937, 940, 966, 997, 1002, 1010, 1014, 1015, 1018, 1023, 1024, 1027, 1028, 1031], "acc": [7, 990, 1029], "spike_num": 7, "result": [7, 72, 87, 88, 89, 90, 91, 92, 152, 156, 178, 242, 260, 271, 366, 404, 502, 508, 528, 664, 667, 679, 690, 697, 702, 703, 715, 717, 777, 796, 897, 906, 942, 943, 944, 945, 946, 947, 984, 987, 989, 990, 994, 995, 996, 999, 1002, 1003, 1007, 1008, 1010, 1011, 1012, 1017, 1020, 1022, 1023, 1024, 1025, 1027, 1031], "ani": [7, 12, 22, 23, 25, 35, 36, 37, 79, 119, 145, 244, 261, 263, 318, 319, 320, 321, 322, 366, 458, 502, 526, 534, 580, 582, 669, 723, 729, 793, 877, 891, 897, 942, 943, 944, 945, 984, 993, 994, 995, 997, 1000, 1002, 1004, 1006, 1007, 1008, 1014, 1018, 1022, 1027, 1028], "A": [7, 9, 11, 19, 25, 35, 36, 40, 44, 47, 49, 50, 51, 53, 54, 56, 57, 61, 65, 95, 96, 112, 115, 120, 144, 145, 147, 153, 154, 155, 156, 166, 167, 179, 202, 203, 204, 214, 215, 220, 221, 222, 226, 233, 235, 238, 242, 245, 285, 352, 366, 380, 404, 405, 406, 418, 458, 481, 534, 580, 581, 582, 621, 642, 643, 644, 664, 667, 679, 683, 699, 715, 717, 721, 722, 761, 763, 764, 765, 777, 796, 816, 839, 868, 877, 885, 888, 892, 893, 896, 897, 898, 903, 906, 910, 912, 914, 915, 919, 925, 936, 937, 940, 942, 943, 949, 952, 956, 983, 987, 989, 990, 992, 994, 995, 998, 999, 1000, 1005, 1007, 1008, 1012, 1014, 1017, 1019, 1021, 1023, 1027, 1031], "file": [7, 397, 508, 756, 758, 759, 781, 947, 988, 995, 1017, 1025], "stream": 7, "sy": [7, 72, 87, 88, 89, 90, 91, 92, 260, 271, 397, 508, 777], "stdout": [7, 397, 508], "data_first_axi": [7, 11, 18], "length": [7, 11, 115, 139, 141, 147, 206, 208, 210, 211, 212, 213, 242, 261, 263, 265, 273, 284, 341, 380, 418, 458, 621, 643, 644, 669, 730, 731, 732, 780, 887, 891, 900, 901, 908, 949, 951, 952, 954, 956, 957, 958, 960, 989, 990, 1008, 1018, 1019, 1020, 1021, 1027, 1028], "keep_siz": [8, 9, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 935, 936, 937, 938, 939, 940, 941], "abstract": [8, 277, 534, 996, 1007, 1028], "1": [9, 11, 14, 16, 17, 18, 20, 22, 23, 30, 34, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 77, 79, 82, 93, 94, 95, 96, 97, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 141, 143, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 182, 183, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 222, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 250, 252, 253, 254, 256, 257, 261, 263, 273, 276, 277, 282, 286, 287, 308, 356, 366, 379, 380, 387, 392, 393, 398, 404, 411, 416, 418, 426, 427, 428, 431, 432, 433, 436, 437, 438, 440, 441, 442, 445, 458, 460, 464, 469, 480, 481, 490, 492, 502, 508, 528, 531, 532, 533, 534, 543, 571, 572, 580, 581, 582, 619, 621, 633, 636, 642, 643, 644, 664, 665, 667, 669, 692, 693, 695, 696, 697, 699, 700, 701, 702, 703, 705, 708, 718, 721, 723, 730, 731, 732, 751, 761, 763, 764, 765, 767, 777, 780, 781, 782, 785, 789, 790, 791, 792, 794, 796, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 842, 846, 849, 853, 868, 869, 873, 877, 880, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 935, 936, 937, 940, 941, 942, 943, 949, 951, 952, 954, 956, 957, 958, 959, 960, 964, 965, 966, 985, 986, 987, 989, 990, 992, 993, 994, 995, 997, 999, 1002, 1003, 1007, 1010, 1011, 1014, 1017, 1018, 1020, 1022, 1024, 1026, 1029, 1030, 1033, 1034], "0": [9, 11, 14, 16, 17, 20, 22, 23, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 77, 79, 93, 94, 96, 112, 113, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 182, 183, 185, 186, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 226, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 254, 261, 266, 273, 310, 311, 316, 341, 352, 353, 356, 364, 365, 366, 380, 388, 391, 392, 404, 411, 416, 418, 424, 428, 442, 445, 458, 460, 467, 469, 471, 481, 492, 502, 531, 532, 533, 534, 539, 572, 580, 582, 597, 599, 611, 613, 621, 642, 643, 644, 651, 664, 665, 669, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 718, 721, 723, 736, 738, 740, 749, 751, 752, 753, 761, 763, 764, 765, 766, 767, 777, 780, 789, 791, 796, 797, 801, 802, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 842, 846, 847, 848, 849, 850, 852, 853, 854, 871, 873, 877, 880, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 923, 924, 925, 926, 929, 930, 933, 935, 936, 937, 939, 940, 941, 949, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 983, 984, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "001": [9, 64, 906, 916, 923, 994, 999, 1000, 1002, 1019, 1020, 1023, 1024, 1026, 1031], "uniform": [9, 125, 127, 134, 669, 695, 696, 697, 702, 703, 721, 897, 903, 935, 936, 937, 939, 941, 955, 987, 989, 1003, 1010, 1014, 1028, 1031, 1033], "min_val": [9, 112, 113, 114, 131, 897, 903, 935, 936, 937, 939, 941, 1010, 1028], "max_val": [9, 112, 113, 114, 131, 897, 903, 935, 936, 937, 939, 941, 1010, 1028, 1031], "rng": [9, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 224, 234, 235, 897, 903, 935, 936, 937, 939, 941, 984, 989, 998, 1012, 1014, 1027, 1029, 1030], "8200": [9, 987], "9319": 9, "nois": [9, 137, 143, 179, 186, 235, 888, 889, 890, 891, 892, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 910, 935, 936, 937, 939, 941, 989, 990, 1021, 1026], "base": [9, 13, 19, 20, 26, 27, 28, 29, 30, 39, 63, 66, 67, 68, 69, 70, 74, 111, 121, 147, 206, 208, 210, 219, 224, 225, 242, 259, 264, 445, 534, 723, 814, 815, 816, 885, 891, 903, 906, 912, 927, 962, 963, 964, 983, 984, 986, 988, 991, 993, 994, 995, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1017, 1019, 1024, 1025], "group": [9, 20, 26, 30, 71, 85, 99, 202, 203, 204, 205, 206, 207, 208, 209, 210, 220, 222, 242, 642, 643, 644, 690, 761, 763, 764, 765, 777, 880, 881, 884, 886, 890, 891, 893, 897, 898, 899, 901, 902, 903, 905, 906, 907, 908, 909, 910, 918, 919, 921, 926, 933, 949, 951, 952, 954, 956, 957, 958, 960, 989, 990, 995, 1003, 1005, 1007, 1008, 1010, 1012, 1027, 1028, 1029, 1030], "formul": [9, 159, 166, 469, 897, 949, 1003, 1007, 1008], "given": [9, 18, 37, 44, 45, 46, 47, 48, 49, 52, 53, 54, 57, 58, 60, 61, 62, 65, 72, 87, 88, 89, 90, 91, 92, 112, 113, 114, 116, 117, 144, 145, 152, 156, 158, 159, 162, 164, 165, 166, 170, 178, 179, 180, 182, 183, 206, 208, 210, 211, 212, 213, 219, 224, 234, 238, 255, 260, 271, 416, 508, 621, 664, 665, 667, 669, 695, 697, 699, 702, 703, 717, 721, 723, 730, 731, 732, 789, 857, 880, 881, 888, 890, 891, 894, 896, 897, 900, 901, 902, 906, 909, 936, 937, 940, 942, 943, 951, 952, 956, 957, 960, 961, 962, 963, 964, 983, 987, 989, 994, 995, 997, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1017, 1018, 1019, 1020, 1023, 1024, 1026, 1028, 1031], "c_m": [9, 1007], "dv": [9, 16, 17, 158, 897, 901, 902, 903, 911, 983, 987, 994, 995, 1002, 1007, 1022, 1023], "sum_jg_j": 9, "i_": [9, 40, 42, 44, 45, 46, 47, 48, 49, 52, 56, 57, 58, 60, 61, 62, 64, 892, 903, 906, 910, 935, 940, 949, 952, 954, 958, 960, 962, 963, 964, 965, 966, 987, 994, 999, 1002, 1005, 1008, 1023], "ext": [9, 892, 903, 935, 939, 987, 994, 999, 1002, 1023], "g_j": 9, "g": [9, 16, 56, 64, 178, 179, 180, 181, 182, 183, 184, 185, 186, 202, 203, 204, 239, 257, 665, 669, 697, 702, 703, 721, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 857, 889, 890, 892, 894, 897, 898, 903, 906, 910, 912, 913, 915, 916, 930, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 983, 989, 990, 995, 1002, 1003, 1005, 1007, 1008, 1010, 1017, 1019, 1023, 1025, 1026, 1027, 1030], "x": [9, 16, 18, 21, 22, 61, 62, 71, 82, 112, 113, 114, 137, 144, 145, 147, 165, 202, 203, 204, 214, 220, 226, 235, 238, 244, 246, 247, 248, 249, 250, 252, 302, 305, 341, 343, 352, 354, 355, 356, 367, 368, 373, 375, 376, 384, 385, 394, 404, 411, 419, 420, 422, 425, 430, 435, 446, 453, 458, 459, 469, 480, 481, 487, 488, 489, 490, 494, 500, 501, 508, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 534, 539, 545, 556, 567, 568, 569, 570, 571, 572, 580, 581, 582, 595, 599, 615, 619, 621, 629, 635, 639, 640, 659, 660, 665, 692, 697, 708, 721, 727, 739, 740, 747, 757, 767, 777, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 798, 799, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 836, 837, 846, 856, 870, 876, 877, 880, 882, 883, 887, 897, 898, 910, 912, 931, 935, 936, 937, 939, 941, 952, 955, 960, 965, 966, 983, 984, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1019, 1020, 1021, 1023, 1026, 1027, 1029, 1030, 1031, 1033, 1034], "y": [9, 16, 18, 21, 22, 144, 145, 147, 152, 156, 157, 159, 162, 164, 165, 166, 170, 178, 179, 180, 183, 202, 203, 204, 214, 219, 220, 226, 244, 249, 250, 252, 373, 378, 380, 404, 458, 481, 494, 529, 635, 796, 806, 815, 816, 846, 876, 877, 880, 883, 887, 893, 898, 913, 925, 931, 935, 936, 937, 939, 941, 983, 984, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1002, 1012, 1019, 1020, 1023, 1026, 1027, 1029, 1031, 1033, 1034], "revers": [9, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 458, 532, 533, 897, 906, 910, 949, 952, 958, 960, 962, 964, 1004, 1007, 1008], "potenti": [9, 18, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 885, 886, 889, 890, 891, 892, 896, 897, 898, 900, 901, 902, 903, 906, 908, 910, 936, 937, 949, 952, 958, 960, 962, 964, 965, 966, 983, 989, 994, 995, 1002, 1003, 1004, 1007, 1008, 1010, 1023], "inactiv": [9, 50, 51, 53, 54, 56, 892, 894, 903, 906, 910, 1007, 1010], "phi_x": 9, "x_": [9, 112, 113, 904, 923, 939, 1000, 1019, 1020, 1026], "infti": [9, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 64, 65, 572, 806, 896, 903, 906, 910, 952, 960, 964, 1005], "tau_x": 9, "temperatur": [9, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 903, 910, 1003], "factor": [9, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 120, 205, 207, 209, 220, 256, 889, 891, 903, 919, 921, 926, 933, 999, 1000], "steadi": [9, 910, 999], "state": [9, 18, 40, 52, 56, 60, 64, 93, 95, 96, 206, 208, 210, 219, 224, 234, 235, 661, 663, 703, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 880, 892, 893, 897, 910, 911, 949, 952, 957, 960, 983, 986, 987, 989, 990, 999, 1004, 1005, 1006, 1007, 1008, 1014, 1015, 1018, 1019, 1025, 1027, 1030, 1032, 1033], "constant": [9, 11, 40, 44, 136, 169, 233, 534, 626, 885, 889, 890, 891, 892, 893, 894, 896, 901, 902, 904, 908, 910, 914, 915, 936, 937, 940, 949, 951, 956, 957, 958, 960, 964, 965, 966, 989, 996, 999, 1000, 1003, 1004, 1007, 1008, 1010, 1021, 1024, 1034], "equival": [9, 205, 207, 209, 220, 243, 339, 445, 458, 481, 503, 508, 526, 597, 643, 644, 645, 647, 648, 649, 650, 669, 780, 827, 828, 830, 831, 833, 843, 892, 956, 1003, 1008, 1012, 1019, 1027], "abov": [9, 17, 25, 37, 93, 147, 158, 242, 273, 481, 534, 669, 697, 698, 702, 891, 894, 983, 984, 987, 988, 989, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1017, 1018, 1021, 1023, 1026, 1027, 1029, 1030], "frac": [9, 40, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 65, 79, 112, 113, 117, 119, 144, 145, 147, 156, 157, 159, 162, 164, 165, 166, 170, 178, 179, 180, 182, 183, 202, 203, 204, 220, 226, 238, 356, 469, 487, 572, 665, 721, 723, 782, 785, 790, 791, 805, 806, 808, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 826, 880, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 906, 908, 910, 912, 918, 923, 930, 935, 936, 937, 939, 940, 949, 951, 952, 956, 957, 958, 960, 964, 965, 966, 983, 987, 994, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1019, 1020, 1023, 1026, 1027, 1028, 1031], "phi_": [9, 45], "left": [9, 40, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 60, 144, 145, 147, 157, 159, 162, 164, 165, 166, 170, 178, 180, 182, 183, 238, 244, 356, 411, 469, 511, 572, 760, 796, 824, 886, 894, 906, 910, 916, 918, 919, 923, 940, 951, 956, 957, 983, 987, 1003, 1006, 1008, 1011, 1015, 1019, 1020, 1023, 1026, 1027], "alpha_": [9, 52, 57, 58, 60, 242, 906, 910, 1007, 1019, 1020, 1023], "beta_": [9, 60, 906, 910, 923, 940, 1007, 1023], "right": [9, 40, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 60, 144, 145, 147, 154, 157, 159, 162, 164, 165, 166, 170, 178, 180, 182, 183, 238, 241, 242, 244, 356, 394, 411, 469, 511, 534, 572, 796, 824, 886, 891, 894, 897, 906, 910, 916, 918, 923, 940, 951, 956, 957, 983, 997, 1002, 1003, 1006, 1008, 1011, 1012, 1015, 1019, 1020, 1023, 1026, 1027], "new": [9, 11, 17, 20, 30, 37, 72, 75, 76, 77, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 150, 164, 166, 167, 176, 179, 189, 202, 203, 204, 206, 208, 210, 219, 224, 234, 260, 271, 273, 284, 285, 352, 366, 404, 458, 481, 492, 502, 531, 532, 533, 534, 663, 665, 669, 692, 697, 699, 701, 703, 707, 708, 721, 723, 777, 849, 853, 868, 873, 877, 880, 886, 911, 952, 960, 989, 993, 997, 1004, 1007, 1008, 1011, 1015, 1022, 1023, 1027, 1030, 1031], "version": [9, 11, 16, 20, 30, 37, 44, 75, 76, 77, 94, 147, 218, 223, 236, 256, 263, 273, 277, 366, 387, 398, 445, 458, 467, 481, 492, 502, 531, 532, 533, 534, 663, 777, 849, 853, 873, 877, 880, 886, 906, 912, 930, 949, 988, 1019], "2": [9, 11, 16, 18, 20, 21, 25, 30, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 75, 76, 77, 79, 80, 81, 82, 94, 106, 107, 117, 119, 124, 125, 126, 127, 132, 133, 134, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 178, 180, 182, 183, 185, 186, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 223, 224, 233, 234, 236, 247, 248, 261, 263, 273, 276, 277, 366, 380, 387, 389, 398, 404, 407, 418, 427, 433, 438, 441, 445, 458, 467, 469, 481, 492, 502, 531, 532, 533, 534, 562, 580, 581, 621, 651, 663, 669, 692, 695, 697, 699, 702, 703, 708, 721, 777, 780, 789, 796, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 838, 853, 873, 877, 880, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 903, 906, 909, 910, 916, 918, 919, 925, 930, 935, 937, 939, 940, 941, 949, 951, 952, 956, 957, 960, 964, 984, 986, 987, 989, 990, 992, 993, 994, 995, 997, 999, 1002, 1003, 1007, 1010, 1011, 1014, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1029, 1030, 1033, 1034], "9": [9, 46, 53, 54, 153, 154, 155, 158, 169, 171, 581, 692, 697, 708, 777, 796, 849, 853, 889, 891, 893, 896, 906, 910, 911, 914, 915, 923, 924, 925, 930, 937, 983, 987, 989, 990, 994, 995, 996, 998, 1000, 1002, 1008, 1011, 1019, 1027, 1028, 1029], "sequenc": [9, 11, 16, 25, 37, 38, 50, 51, 52, 53, 54, 56, 57, 58, 115, 144, 145, 146, 147, 158, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 226, 228, 229, 230, 231, 232, 233, 241, 242, 250, 252, 253, 262, 263, 366, 406, 458, 467, 481, 492, 502, 506, 531, 532, 533, 534, 580, 581, 582, 692, 708, 796, 840, 841, 873, 877, 893, 897, 901, 902, 904, 906, 910, 926, 942, 943, 944, 945, 950, 953, 955, 1003, 1012, 1028], "integr": [9, 16, 35, 36, 37, 38, 50, 51, 52, 53, 54, 56, 57, 58, 115, 235, 259, 352, 416, 474, 770, 771, 888, 889, 890, 891, 896, 897, 901, 902, 904, 906, 908, 910, 911, 937, 948, 949, 951, 952, 956, 957, 958, 960, 966, 983, 986, 987, 989, 990, 992, 993, 994, 995, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1019, 1020, 1022, 1031], "dynamical_systems_as_tupl": 10, "must_be_dynsys_subclass": 10, "dynamical_systems_as_dict": 10, "comput": [10, 13, 25, 37, 117, 119, 147, 155, 156, 162, 166, 171, 172, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 219, 220, 224, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 242, 245, 246, 249, 250, 252, 253, 255, 257, 264, 267, 268, 277, 356, 380, 411, 416, 418, 469, 477, 478, 480, 481, 487, 488, 489, 490, 492, 531, 532, 533, 534, 539, 571, 572, 617, 621, 642, 643, 646, 650, 730, 731, 732, 740, 762, 767, 771, 775, 782, 785, 790, 791, 792, 805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 862, 863, 864, 865, 866, 867, 873, 889, 891, 896, 903, 906, 908, 914, 916, 923, 937, 951, 956, 957, 960, 984, 987, 988, 989, 990, 991, 993, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1010, 1015, 1019, 1020, 1023, 1024, 1027, 1028, 1029, 1031, 1033, 1034], "child": 10, "must": [10, 37, 72, 87, 88, 89, 90, 91, 92, 118, 141, 205, 207, 209, 220, 235, 239, 241, 242, 260, 271, 284, 366, 405, 406, 481, 642, 643, 644, 664, 667, 679, 695, 697, 699, 715, 717, 721, 723, 730, 731, 732, 761, 763, 764, 765, 887, 890, 897, 908, 926, 950, 953, 955, 961, 988, 990, 994, 995, 996, 997, 1002, 1003, 1006, 1015, 1018, 1019, 1021, 1024, 1027, 1031, 1033, 1034], "subclass": [10, 13, 259, 526, 528, 983, 995, 996, 1004, 1006, 1010, 1015, 1028, 1030], "dyn_var": [11, 16, 158, 178, 179, 180, 182, 183, 184, 262, 270, 366, 458, 467, 481, 492, 502, 531, 532, 533, 534, 580, 581, 582, 840, 841, 873, 877, 984, 990, 996, 997, 1012, 1014, 1018, 1019, 1024], "t0": [11, 266, 273, 1008, 1012, 1019, 1029], "progress_bar": [11, 16, 942, 943, 1018, 1029], "fun_input": [11, 37, 1000, 1018], "fun_monitor": [11, 16, 1018, 1019], "perus": 11, "give": [11, 152, 162, 198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 651, 667, 780, 789, 889, 984, 987, 989, 1002, 1006, 1010, 1017, 1018, 1019, 1021, 1027, 1031], "fix": [11, 35, 36, 37, 43, 75, 76, 77, 78, 261, 263, 273, 404, 777, 893, 894, 897, 898, 986, 987, 989, 994, 999, 1000, 1002, 1008, 1010, 1018, 1019, 1027, 1028], "iter": [11, 93, 141, 211, 212, 213, 406, 458, 581, 582, 897, 918, 919, 942, 943, 994, 1012, 1021, 1024], "func": [11, 297, 467, 481, 492, 531, 532, 533, 534, 840, 841, 873, 942, 943, 944, 945, 946, 947, 1018], "specifi": [11, 22, 23, 72, 87, 88, 89, 90, 91, 92, 116, 141, 166, 202, 203, 204, 205, 207, 209, 238, 244, 260, 269, 271, 274, 276, 380, 418, 458, 481, 492, 528, 531, 532, 533, 534, 539, 669, 679, 695, 697, 699, 715, 717, 723, 777, 781, 789, 868, 873, 984, 987, 989, 995, 997, 1000, 1002, 1006, 1007, 1012, 1014, 1018, 1021, 1022, 1023, 1025, 1030, 1033], "chang": [11, 16, 138, 147, 262, 263, 284, 366, 405, 406, 458, 481, 492, 502, 531, 532, 533, 534, 580, 581, 582, 650, 708, 776, 777, 873, 877, 893, 894, 897, 926, 949, 952, 960, 984, 987, 989, 994, 996, 997, 999, 1002, 1003, 1006, 1007, 1008, 1011, 1014, 1015, 1018, 1022, 1024, 1028], "obtain": [11, 22, 23, 147, 906, 949, 989, 994, 1015, 1027, 1028], "call": [11, 25, 167, 178, 277, 284, 358, 404, 445, 458, 481, 534, 777, 877, 889, 919, 946, 947, 983, 989, 994, 995, 996, 997, 1000, 1003, 1004, 1006, 1008, 1011, 1012, 1014, 1017, 1018, 1019, 1024, 1026, 1027, 1028, 1030], "also": [11, 18, 22, 23, 24, 156, 158, 159, 162, 167, 178, 205, 207, 209, 220, 238, 261, 263, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 699, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 777, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 889, 903, 915, 916, 956, 983, 984, 987, 988, 989, 990, 993, 995, 996, 997, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1021, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "want": [11, 13, 16, 17, 99, 136, 139, 141, 164, 226, 947, 984, 987, 988, 990, 994, 996, 997, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1021, 1028, 1029, 1031], "just": [11, 240, 404, 534, 669, 721, 966, 983, 984, 988, 989, 992, 993, 994, 996, 997, 1002, 1006, 1007, 1008, 1010, 1011, 1012, 1018, 1022, 1023, 1025, 1029, 1030, 1033], "target1": [11, 1018], "value1": [11, 1018], "target2": [11, 1018], "value2": [11, 1018], "In": [11, 13, 18, 40, 159, 162, 164, 178, 215, 224, 241, 242, 352, 416, 481, 534, 781, 822, 891, 897, 908, 912, 915, 947, 984, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "manual": [11, 25, 238, 284, 912, 913, 988, 1018, 1023], "one": [11, 16, 75, 76, 77, 85, 93, 99, 144, 145, 152, 156, 159, 162, 192, 195, 202, 203, 204, 238, 244, 256, 257, 273, 284, 366, 404, 448, 458, 481, 502, 526, 527, 580, 581, 582, 621, 683, 697, 721, 773, 849, 853, 868, 877, 886, 891, 897, 903, 916, 926, 952, 960, 983, 987, 989, 991, 994, 995, 996, 999, 1002, 1003, 1004, 1007, 1008, 1012, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030], "3": [11, 16, 20, 37, 40, 45, 46, 48, 49, 52, 53, 54, 56, 60, 61, 62, 64, 75, 76, 77, 80, 81, 82, 106, 107, 144, 145, 147, 153, 154, 155, 156, 158, 160, 164, 165, 166, 167, 169, 170, 171, 172, 173, 185, 186, 204, 210, 213, 218, 220, 223, 235, 236, 263, 273, 366, 387, 398, 404, 458, 467, 469, 481, 487, 492, 502, 508, 531, 532, 533, 534, 581, 621, 628, 651, 663, 669, 692, 695, 697, 699, 702, 703, 708, 721, 777, 780, 789, 796, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 873, 877, 880, 885, 886, 889, 890, 891, 892, 893, 896, 897, 898, 903, 906, 910, 911, 913, 916, 935, 936, 949, 951, 952, 954, 956, 957, 958, 960, 964, 983, 984, 987, 989, 990, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1007, 1010, 1011, 1012, 1014, 1017, 1018, 1020, 1024, 1026, 1029, 1030, 1031, 1033, 1034], "merg": [11, 987, 995, 1022], "deprec": [11, 16, 37, 218, 223, 236, 277, 387, 398, 445, 467, 534, 663, 949], "Will": [11, 16, 37, 663], "4": [11, 16, 20, 37, 40, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 153, 154, 155, 158, 160, 164, 165, 166, 167, 169, 170, 171, 172, 173, 185, 186, 218, 223, 236, 277, 502, 581, 663, 669, 692, 697, 699, 702, 708, 723, 777, 789, 796, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 877, 880, 885, 886, 890, 891, 893, 897, 898, 903, 906, 910, 912, 935, 936, 941, 952, 958, 960, 984, 987, 989, 990, 993, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1018, 1023, 1024, 1028, 1029, 1030], "specif": [11, 79, 119, 226, 458, 880, 897, 906, 913, 988, 989, 991, 993, 994, 995, 1002, 1005, 1008, 1011, 1012, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1030, 1033], "5": [11, 16, 17, 18, 23, 40, 45, 46, 47, 48, 49, 50, 51, 52, 58, 60, 61, 62, 64, 65, 141, 154, 155, 158, 159, 164, 166, 169, 178, 185, 186, 202, 203, 204, 220, 222, 226, 245, 273, 458, 502, 581, 664, 669, 692, 697, 699, 702, 703, 708, 721, 723, 777, 789, 805, 806, 807, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 890, 891, 892, 893, 894, 897, 898, 900, 901, 903, 906, 910, 911, 916, 930, 935, 936, 937, 939, 941, 949, 952, 954, 957, 960, 983, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "explicit": [11, 147, 155, 156, 157, 159, 162, 179, 1012, 1026], "lambda": [11, 16, 17, 22, 273, 502, 721, 767, 777, 885, 915, 916, 923, 983, 994, 997, 998, 1000, 1008, 1010, 1012, 1018, 1019, 1022, 1026, 1029], "later": [11, 37, 238, 815, 891, 988, 994, 1002, 1018, 1028], "block": [11, 651, 952, 960, 964, 1003, 1005, 1010, 1012, 1017], "10": [11, 16, 20, 21, 25, 40, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 58, 60, 61, 64, 65, 79, 117, 119, 141, 144, 145, 147, 153, 154, 155, 171, 172, 220, 226, 233, 242, 257, 276, 404, 445, 458, 481, 493, 494, 495, 496, 502, 503, 534, 581, 582, 692, 697, 702, 708, 777, 808, 877, 880, 889, 890, 891, 892, 893, 894, 897, 898, 901, 902, 903, 904, 906, 908, 909, 910, 924, 936, 937, 942, 943, 951, 954, 956, 983, 984, 987, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "v10": [11, 404], "abl": [11, 18, 40, 913, 1014, 1023, 1025], "fit": [11, 22, 23, 898, 952, 960, 964, 983, 989, 990, 998, 1029, 1030, 1031, 1033, 1034], "report": [11, 147, 169, 781, 912, 1018, 1025, 1031], "These": [11, 37, 445, 534, 777, 984, 991, 993, 1000, 1006, 1012], "togeth": [11, 17, 987, 997, 1017, 1027], "constitut": 11, "finish": [11, 1003, 1018], "dimens": [11, 79, 117, 119, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 226, 228, 229, 230, 231, 232, 238, 244, 250, 252, 253, 273, 448, 506, 621, 645, 646, 647, 648, 649, 650, 690, 695, 699, 730, 731, 732, 777, 780, 789, 791, 849, 853, 868, 912, 983, 990, 996, 1007, 1008, 1018, 1026, 1027, 1028], "arrang": [11, 261, 263, 952, 960], "previou": [11, 206, 208, 210, 219, 224, 234, 263, 983, 984, 1004, 1006, 1007, 1019, 1021, 1031], "api": [11, 169, 284, 534, 701, 781, 983, 993, 996, 997, 998, 1014, 1017, 1024, 1027], "evolv": [13, 1002, 1007, 1030], "each": [13, 16, 17, 25, 44, 71, 75, 76, 79, 93, 95, 96, 97, 117, 119, 139, 141, 157, 163, 166, 169, 198, 199, 200, 201, 205, 207, 209, 215, 220, 222, 226, 228, 229, 230, 231, 232, 235, 238, 239, 240, 241, 242, 244, 255, 257, 284, 405, 458, 502, 621, 669, 730, 731, 732, 761, 763, 764, 765, 777, 849, 853, 909, 910, 918, 919, 921, 923, 926, 933, 942, 943, 944, 945, 946, 961, 987, 989, 990, 994, 995, 996, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1017, 1019, 1021, 1022, 1023, 1024, 1027, 1028], "mai": [13, 93, 164, 255, 358, 404, 445, 534, 777, 781, 993, 995, 996, 1002, 1006, 1007, 1012, 1018, 1019, 1022, 1027, 1028], "our": [13, 773, 897, 983, 984, 990, 994, 997, 998, 999, 1000, 1004, 1010, 1012, 1015, 1017, 1029, 1031], "logic": [13, 534, 877, 1004, 1012, 1024], "clear_input": 13, "clear": [13, 358, 942, 943, 944, 945, 995, 1006, 1017], "accumul": [13, 166, 458, 877, 912, 913, 989, 1017], "recommend": [13, 18, 534, 988, 997, 1002, 1014, 1022, 1023, 1027, 1028], "for_loop": [13, 18, 877, 984], "loopovertim": 13, "dstrainer": [13, 983, 1000, 1029, 1031], "alpha": [14, 22, 23, 24, 42, 44, 64, 112, 115, 144, 145, 146, 147, 158, 235, 242, 256, 282, 356, 411, 534, 539, 665, 671, 723, 767, 805, 806, 807, 808, 810, 811, 813, 814, 816, 817, 818, 820, 821, 822, 823, 893, 894, 935, 949, 954, 958, 960, 964, 983, 989, 990, 1005, 1007, 1008, 1019, 1020, 1023, 1026, 1031, 1033], "forc": [14, 781, 935, 986, 1034], "state_delai": [15, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 911, 948, 1019], "basic": [15, 162, 234, 416, 897, 988, 989, 993, 994, 1003, 1007, 1008, 1021, 1024, 1027], "init": [16, 115, 144, 145, 147, 276, 889, 890, 891, 892, 896, 898, 900, 903, 908, 936, 937, 955, 967, 983, 984, 987, 989, 990, 998, 1003, 1004, 1010, 1019, 1020, 1023, 1024, 1026, 1029, 1030, 1031, 1033, 1034], "arg": [16, 27, 29, 37, 86, 218, 221, 223, 236, 270, 296, 298, 348, 405, 406, 461, 463, 470, 530, 534, 564, 565, 566, 575, 576, 577, 578, 579, 583, 629, 651, 745, 758, 759, 849, 853, 1000, 1004, 1008, 1019, 1023], "dyn_arg": 16, "math": [16, 18, 21, 25, 37, 40, 96, 136, 158, 171, 172, 219, 220, 224, 226, 234, 235, 885, 888, 897, 898, 900, 901, 911, 912, 925, 942, 943, 944, 984, 986, 987, 989, 990, 993, 994, 995, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "7": [16, 45, 46, 47, 48, 49, 50, 51, 53, 54, 64, 153, 154, 164, 581, 692, 697, 699, 708, 777, 815, 891, 892, 893, 898, 906, 911, 936, 987, 989, 990, 994, 995, 996, 998, 1002, 1004, 1006, 1007, 1008, 1018, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033], "8": [16, 40, 45, 48, 50, 51, 54, 144, 145, 147, 153, 154, 155, 164, 167, 169, 273, 581, 692, 697, 702, 708, 777, 806, 815, 820, 824, 890, 892, 893, 894, 897, 898, 900, 903, 906, 911, 914, 916, 936, 941, 949, 951, 952, 954, 956, 957, 960, 987, 989, 990, 994, 995, 996, 1000, 1002, 1004, 1006, 1007, 1008, 1010, 1020, 1023, 1026, 1027, 1028, 1029], "12": [16, 49, 50, 51, 152, 157, 169, 233, 692, 697, 806, 815, 816, 892, 911, 913, 924, 936, 941, 987, 988, 989, 990, 994, 995, 996, 997, 1002, 1006, 1011, 1023, 1027, 1028, 1033, 1034], "w": [16, 17, 46, 97, 117, 119, 156, 166, 203, 204, 214, 226, 508, 635, 815, 818, 887, 889, 890, 891, 892, 893, 894, 903, 911, 935, 939, 956, 984, 987, 994, 995, 996, 997, 1002, 1006, 1010, 1023, 1026, 1028, 1030, 1031], "dw": [16, 17, 137, 179, 903, 911, 987, 994, 995, 1002, 1021, 1023], "odeint": [16, 17, 983, 987, 994, 995, 999, 1000, 1002, 1003, 1007, 1008, 1019, 1022, 1023], "jointeq": [16, 158, 1023, 1026], "simul": [16, 18, 38, 45, 48, 50, 51, 53, 54, 61, 62, 65, 144, 145, 147, 894, 942, 943, 950, 955, 961, 983, 986, 987, 991, 992, 993, 994, 1002, 1003, 1004, 1007, 1008, 1019, 1020, 1021, 1022, 1023, 1028, 1030], "rand": [16, 18, 136, 481, 796, 983, 984, 990, 1012, 1014, 1015], "ramp_input": 16, "line_plot": [16, 158, 890, 891, 892, 897, 903, 908, 936, 987, 989, 1002, 1006, 1007, 1008, 1010], "plot_id": [16, 987, 989, 1000, 1010], "png": [16, 158, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 890, 891, 892, 898, 903, 908, 911, 951, 954, 956, 957], "hire": [16, 158, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 890, 891, 892, 898, 903, 908, 911, 951, 954, 956, 957], "pdf": [16, 158, 169, 247, 248, 256, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 890, 891, 892, 898, 903, 908, 911, 951, 954, 956, 957, 992], "intragetor": 16, "stochast": [16, 179, 185, 186, 215, 815, 816, 904, 912, 913, 914, 918, 919, 931, 986, 989], "lorenz": [16, 144, 145, 147, 990, 1020, 1023], "sigma": [16, 79, 117, 119, 137, 206, 208, 210, 219, 224, 681, 699, 807, 812, 904, 1021, 1023, 1026, 1027, 1028], "beta": [16, 42, 44, 64, 158, 164, 202, 203, 204, 220, 226, 535, 810, 811, 820, 888, 915, 916, 935, 949, 958, 960, 964, 1005, 1007, 1008, 1023, 1026, 1027, 1031], "rho": [16, 912, 930, 1000, 1023, 1026], "28": [16, 45, 48, 60, 62, 144, 145, 147, 158, 806, 906, 910, 987, 989, 990, 992, 996, 998, 1010, 1020, 1023, 1026, 1029], "z": [16, 40, 144, 145, 147, 179, 481, 699, 898, 952, 960, 990, 992, 1002, 1014, 1019, 1020, 1023, 1026, 1033, 1034], "p": [16, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 65, 79, 93, 94, 96, 152, 155, 156, 164, 166, 242, 508, 545, 633, 636, 639, 664, 666, 669, 675, 682, 686, 721, 723, 750, 806, 815, 816, 869, 906, 908, 914, 952, 960, 990, 1000, 1003, 1017, 1023, 1026, 1027, 1031], "sdeint": [16, 1019, 1026], "milstein2": 16, "01": [16, 57, 158, 168, 539, 815, 896, 897, 898, 906, 910, 912, 913, 915, 916, 940, 952, 955, 987, 989, 990, 994, 1000, 1002, 1003, 1007, 1019, 1021, 1023, 1024, 1030, 1031, 1033, 1034], "pyplot": [16, 18, 144, 145, 147, 702, 721, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 897, 898, 911, 949, 951, 952, 954, 956, 957, 960, 989, 990, 994, 1000, 1002, 1003, 1010, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1033, 1034], "plt": [16, 18, 144, 145, 147, 702, 721, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 897, 898, 911, 949, 951, 952, 954, 956, 957, 960, 989, 990, 994, 1000, 1002, 1003, 1010, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1033, 1034], "fig": [16, 890, 897, 898, 903, 949, 951, 952, 954, 956, 957, 960, 989, 1008, 1010, 1019, 1023, 1026, 1031, 1033, 1034], "figur": [16, 162, 481, 989, 990, 999, 1002, 1003, 1008, 1019, 1020, 1022, 1023, 1026, 1027, 1031, 1033, 1034], "ax": [16, 202, 203, 204, 226, 297, 427, 429, 430, 433, 434, 435, 438, 439, 441, 443, 458, 481, 563, 572, 621, 751, 791, 838, 845, 989, 990, 1019, 1023, 1026, 1031, 1033, 1034], "gca": [16, 906], "project": [16, 897, 949, 951, 952, 956, 957, 958, 960, 989, 991, 992, 1004, 1008, 1010, 1019, 1023, 1026, 1027, 1033, 1034], "3d": [16, 118, 201, 1019, 1023, 1026, 1033, 1034], "plot": [16, 18, 144, 145, 147, 721, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 884, 897, 898, 911, 949, 951, 952, 954, 956, 957, 960, 987, 989, 990, 994, 1000, 1002, 1003, 1010, 1019, 1020, 1021, 1023, 1024, 1026, 1029, 1031, 1033, 1034], "set_xlabel": [16, 1023, 1026, 1033, 1034], "With": [16, 503, 893, 989, 1008, 1012, 1019, 1020], "easili": [16, 984, 987, 989, 993, 994, 995, 998, 1002, 1003, 1006, 1010, 1012, 1015, 1017, 1018, 1023, 1025, 1026, 1027, 1029], "number": [16, 20, 75, 76, 78, 93, 95, 96, 114, 115, 137, 143, 144, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 224, 233, 234, 235, 238, 241, 242, 244, 261, 263, 284, 407, 445, 458, 502, 503, 507, 621, 628, 642, 643, 644, 645, 646, 647, 648, 649, 663, 696, 700, 702, 703, 761, 763, 764, 765, 773, 777, 789, 827, 828, 829, 830, 831, 832, 833, 893, 896, 898, 918, 919, 926, 942, 943, 944, 945, 946, 947, 961, 986, 987, 989, 990, 993, 1002, 1007, 1008, 1013, 1015, 1017, 1021, 1027, 1028, 1029, 1031], "note": [16, 93, 97, 156, 162, 206, 208, 210, 224, 244, 261, 263, 276, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 481, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 669, 699, 702, 721, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 777, 778, 779, 781, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 877, 896, 915, 918, 984, 986, 987, 988, 990, 995, 996, 997, 1002, 1003, 1004, 1008, 1011, 1012, 1014, 1017, 1019, 1022, 1027, 1028, 1030, 1033], "heterogen": [16, 886, 1010, 1021], "tensor": [16, 215, 238, 239, 240, 244, 246, 249, 250, 252, 253, 273, 318, 319, 320, 321, 322, 352, 418, 448, 581, 621, 642, 643, 644, 696, 698, 700, 730, 731, 732, 762, 796, 862, 863, 864, 865, 866, 867, 868, 893, 995, 1002, 1015, 1018, 1019, 1021], "trial": [16, 581, 582, 881, 995, 1006], "howev": [16, 162, 285, 445, 877, 893, 897, 908, 915, 956, 983, 984, 993, 994, 995, 996, 997, 1000, 1002, 1006, 1008, 1010, 1011, 1012, 1015, 1017, 1019, 1023, 1026, 1028], "element": [16, 17, 215, 226, 235, 241, 242, 244, 245, 284, 356, 404, 405, 406, 411, 448, 469, 481, 487, 488, 489, 490, 502, 518, 525, 526, 531, 532, 533, 539, 571, 572, 621, 663, 669, 692, 730, 731, 732, 740, 767, 777, 780, 782, 785, 789, 790, 791, 792, 826, 873, 942, 943, 984, 989, 1004, 1012, 1018, 1022, 1027, 1028], "so": [16, 17, 153, 155, 284, 445, 667, 891, 910, 912, 947, 951, 957, 983, 984, 988, 990, 1002, 1003, 1010, 1019, 1026, 1028], "pair": [16, 79, 117, 119, 136, 153, 198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 481, 531, 532, 533, 873, 880, 886, 1027, 1028], "after": [16, 44, 64, 93, 159, 198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 224, 228, 229, 230, 231, 232, 277, 284, 445, 777, 781, 886, 889, 890, 891, 892, 896, 900, 901, 903, 906, 908, 919, 944, 945, 949, 958, 965, 966, 984, 987, 989, 994, 1002, 1004, 1007, 1014, 1015, 1017, 1018, 1022, 1023, 1024, 1026, 1027, 1028], "inject": [16, 894, 897, 910, 1018], "vari": [16, 35, 36, 154, 169, 999, 1002, 1023], "pack": [16, 114, 996, 1003, 1006, 1007, 1012, 1022, 1028], "eq": [17, 1019, 1022], "joint": [17, 986, 1002], "deriv": [17, 37, 115, 128, 144, 145, 146, 147, 152, 156, 157, 158, 162, 163, 164, 182, 183, 903, 911, 937, 948, 987, 989, 995, 997, 1000, 1007, 1008, 1019, 1020, 1022, 1023, 1026], "02": [17, 64, 894, 896, 900, 903, 906, 916, 940, 983, 989, 1004, 1018, 1022, 1023, 1025, 1033], "u": [17, 97, 144, 145, 235, 397, 634, 721, 773, 857, 889, 890, 894, 900, 965, 966, 988, 989, 994, 996, 1000, 1002, 1005, 1014, 1022, 1023], "iext": [17, 158, 911, 987, 994, 995, 1000, 1002, 1007, 1022, 1023], "04": [17, 894, 900, 903, 911, 958, 988, 989, 990, 996, 1022], "du": [17, 966, 1000, 1022], "thei": [17, 25, 198, 228, 232, 898, 983, 988, 989, 993, 994, 995, 996, 997, 1002, 1003, 1006, 1008, 1010, 1012, 1015, 1019, 1021, 1022, 1023, 1027, 1028], "independ": [17, 220, 226, 255, 692, 906, 930, 952, 960, 961, 1022], "show_cod": [17, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 502, 911, 948, 1022, 1023], "brainpy_itg_of_ode0": 17, "dv_k1": [17, 1022], "k2_v_arg": [17, 1022], "6666666666666666": [17, 164, 1022], "k2_t_arg": [17, 1022, 1023], "dv_k2": [17, 1022], "v_new": [17, 1022], "25": [17, 45, 46, 53, 54, 169, 404, 699, 702, 885, 906, 939, 951, 954, 956, 957, 989, 990, 996, 997, 1000, 1010, 1022, 1028, 1031], "75": [17, 49, 64, 65, 777, 906, 996, 997, 1022], "As": [17, 147, 153, 155, 156, 178, 445, 773, 897, 983, 990, 994, 997, 1002, 1003, 1008, 1014, 1020, 1022, 1023, 1029], "evalu": [17, 37, 153, 154, 155, 169, 219, 277, 481, 508, 897, 987, 994, 999, 1000, 1002, 1018, 1024], "v_": [17, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 888, 889, 890, 891, 894, 896, 897, 898, 901, 902, 903, 906, 908, 915, 924, 925, 983, 987, 1002, 1003, 1005, 1007, 1023], "k2": [17, 64, 896, 925], "jointli": [17, 1022, 1023], "evalut": [17, 1024], "u_": 17, "emerg": [17, 95, 1027], "let": [17, 145, 164, 481, 773, 947, 951, 984, 987, 989, 990, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1010, 1018, 1019, 1020, 1022, 1023, 1026, 1027, 1030, 1031], "": [17, 25, 37, 52, 56, 60, 79, 119, 147, 152, 156, 157, 159, 160, 161, 162, 166, 169, 170, 171, 172, 202, 203, 204, 404, 427, 429, 433, 434, 438, 439, 441, 443, 445, 481, 492, 527, 531, 532, 533, 534, 663, 667, 715, 721, 723, 777, 781, 806, 807, 812, 815, 816, 818, 822, 828, 829, 830, 831, 832, 857, 873, 893, 897, 898, 901, 903, 906, 908, 912, 913, 930, 949, 951, 958, 983, 984, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "brainpy_itg_of_ode0_joint_eq": 17, "du_k1": [17, 1022], "k2_u_arg": [17, 1022], "du_k2": [17, 1022], "u_new": [17, 1022], "nest": [17, 366, 458, 1012, 1022], "eq2": 17, "out_var": [18, 458, 581, 1012], "no_stat": 18, "forward": [18, 25, 156, 242, 458, 531, 701, 777, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824], "brainpyobject": [18, 21, 262, 366, 458, 467, 481, 492, 502, 531, 532, 533, 534, 840, 841, 873, 877, 1006, 1012, 1014], "befor": [18, 198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 235, 273, 380, 418, 481, 892, 896, 944, 965, 966, 989, 1002, 1004, 1008, 1017, 1019, 1022, 1023, 1024, 1026, 1029], "send": [18, 1027], "reset_st": [18, 983, 990, 1018, 1029, 1030, 1031, 1033, 1034], "batch_siz": [18, 983, 998, 1029, 1030], "same": [18, 25, 37, 79, 81, 85, 94, 107, 114, 117, 119, 152, 153, 155, 198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 229, 230, 231, 232, 238, 244, 277, 352, 481, 531, 532, 533, 534, 597, 663, 667, 696, 698, 700, 708, 730, 781, 868, 873, 887, 930, 947, 958, 961, 983, 987, 989, 990, 993, 995, 996, 997, 999, 1000, 1002, 1004, 1006, 1008, 1011, 1012, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1026, 1027, 1028], "n_time": [18, 885], "n_batch": 18, "n_in": [18, 984, 996], "30": [18, 50, 141, 144, 145, 889, 890, 891, 894, 900, 903, 906, 908, 909, 987, 990, 996, 998, 999, 1000, 1010, 1019, 1021, 1027, 1030], "sequenti": [18, 21, 984, 990, 1004], "l1": [18, 25, 115, 145, 243, 984, 1020, 1029, 1030], "rnncell": [18, 236, 990, 1030], "l2": [18, 25, 243, 245, 246, 915, 916, 990, 997, 1024, 1029, 1030], "relu": [18, 21, 25, 234, 810, 811, 815, 818, 984, 998], "l3": [18, 25, 1030], "over_tim": 18, "hist_l3": 18, "print": [18, 397, 479, 481, 508, 651, 777, 781, 857, 942, 943, 951, 956, 957, 984, 987, 989, 990, 995, 996, 997, 1004, 1006, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1021, 1024, 1027, 1028, 1029, 1030, 1033, 1034], "hist_l1": 18, "as_numpi": [18, 807, 810, 811, 812, 815, 817, 818, 820, 824, 990, 1020, 1031, 1033, 1034], "label": [18, 237, 239, 240, 241, 242, 254, 255, 256, 257, 481, 723, 805, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 931, 949, 951, 952, 954, 956, 957, 960, 984, 989, 990, 996, 997, 1000, 1003, 1010, 1011, 1015, 1019, 1020, 1023, 1029, 1031], "1000": [18, 702, 721, 777, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 885, 893, 897, 903, 983, 987, 989, 990, 996, 998, 1000, 1010, 1012, 1017, 1018, 1020, 1024, 1029, 1031], "legend": [18, 158, 723, 805, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 892, 936, 949, 951, 952, 954, 956, 957, 960, 987, 989, 990, 1000, 1002, 1003, 1006, 1008, 1010, 1019, 1020, 1023, 1029, 1031], "denot": [18, 20, 37, 144, 206, 208, 210, 220, 241, 242, 458, 581, 886, 904, 940, 949, 954, 966, 987, 989, 994, 996, 1008, 1014, 1018, 1022, 1023, 1026, 1027], "ann": [18, 25], "dens": [18, 21, 25, 84, 102, 105, 108, 109, 110, 227, 235, 380, 492, 796, 949, 951, 952, 954, 956, 957, 958, 959, 960, 983, 990, 995, 998, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "conv2d": 18, "becaus": [18, 64, 155, 159, 284, 358, 534, 892, 897, 903, 918, 945, 949, 983, 987, 989, 994, 995, 996, 998, 1002, 1004, 1006, 1007, 1008, 1012, 1014, 1015, 1020, 1021, 1022, 1027, 1028], "necessari": [18, 777, 989, 994, 1002, 1029], "calcul": [18, 40, 112, 147, 154, 162, 202, 203, 204, 211, 212, 213, 247, 248, 277, 445, 761, 763, 764, 765, 880, 881, 885, 886, 891, 983, 989, 994, 997, 1007, 1022, 1033], "bt": 18, "case": [18, 147, 205, 207, 209, 238, 244, 352, 356, 411, 490, 508, 539, 665, 669, 697, 702, 703, 767, 777, 781, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 900, 947, 983, 984, 989, 994, 996, 1008, 1010, 1012, 1014, 1019, 1027, 1030, 1031], "tn": 18, "parralel": 18, "pytre": [18, 366, 458, 1018], "loop": [18, 358, 458, 581, 582, 877, 880, 886, 983, 984, 996, 998, 1018, 1023], "ds_tupl": 19, "ds_dict": 19, "alia": [19, 227, 265, 266, 272, 445, 662, 701, 704, 706, 954], "instanti": [19, 445, 989, 995, 1003, 1018, 1027, 1030, 1033], "aim": [19, 898, 989, 991, 993, 997, 1000, 1002, 1018], "sever": [20, 40, 156, 199, 200, 201, 229, 230, 231, 416, 534, 983, 988, 993, 995, 996, 997, 998, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030], "essenti": [20, 93, 892, 983, 987, 1017, 1025, 1027, 1030], "geometri": [20, 41, 50, 51, 53, 54, 56, 57, 58, 909, 1007, 1010, 1027], "line": [20, 159, 162, 397, 777, 883, 897, 987, 996, 1000, 1002, 1017, 1019, 1030], "align": [20, 44, 45, 47, 52, 56, 57, 58, 60, 61, 62, 65, 159, 164, 166, 178, 180, 182, 183, 242, 404, 889, 890, 892, 894, 898, 903, 906, 915, 916, 918, 924, 925, 936, 937, 940, 951, 956, 957, 966, 983, 1002, 1003, 1006, 1007, 1023, 1026, 1027, 1028], "2d": [20, 32, 36, 200, 216, 238, 893, 1000, 1002], "space": [20, 79, 80, 81, 82, 106, 107, 117, 119, 445, 481, 532, 533, 702, 777, 885, 892, 897, 999, 1000, 1017, 1027, 1028], "15": [20, 40, 46, 47, 49, 52, 58, 155, 215, 692, 702, 888, 890, 896, 900, 906, 937, 952, 960, 966, 989, 990, 992, 996, 997, 1027, 1028, 1031, 1033, 1034], "num": [20, 52, 75, 76, 78, 95, 97, 273, 471, 983, 987, 989, 995, 1000, 1004, 1007, 1008, 1027], "flatten": [20, 61, 62, 144, 145, 147, 990, 998, 1019, 1023, 1028, 1029], "600": [20, 897, 987, 998, 1000, 1021, 1029, 1031], "keep": [20, 41, 61, 62, 215, 250, 252, 253, 912, 913, 983, 1008], "13": [20, 30, 42, 60, 62, 94, 169, 458, 777, 894, 906, 941, 949, 989, 990, 996, 1005, 1027, 1031], "some": [21, 97, 164, 168, 169, 185, 186, 481, 773, 988, 989, 994, 995, 997, 998, 1004, 1006, 1008, 1011, 1014, 1019, 1027, 1028, 1030, 1031], "children": [21, 366, 458, 467, 502, 534, 840, 841, 877, 995, 1006], "dropout": [21, 1030], "caus": [21, 112, 358, 445, 534, 731, 893, 900, 913, 949, 995, 996, 1006, 1011, 1012, 1015, 1019], "l": [21, 25, 45, 46, 48, 50, 51, 54, 57, 61, 64, 95, 147, 153, 154, 155, 168, 169, 185, 202, 244, 550, 806, 812, 815, 816, 857, 880, 891, 894, 897, 898, 906, 910, 984, 990, 994, 996, 997, 1019, 1020, 1023, 1026, 1027, 1030], "256": [21, 25, 168, 984, 990, 998, 1029], "fit_method": [22, 23, 1033, 1034], "recurr": [22, 23, 37, 120, 219, 224, 235, 806, 807, 812, 888, 936, 937, 960, 983, 999, 1000, 1029, 1030, 1031], "offlinealgorithm": [22, 1033], "appli": [22, 23, 25, 153, 155, 156, 185, 186, 191, 198, 199, 200, 201, 205, 207, 209, 214, 228, 229, 230, 231, 232, 235, 238, 243, 244, 256, 277, 284, 366, 721, 777, 868, 890, 894, 903, 906, 936, 942, 943, 990, 994, 995, 998, 999, 1002, 1007, 1012, 1015, 1024, 1026, 1031], "get_supported_offline_method": 22, "fit_meth": [22, 23], "ridgeregress": [22, 1033], "three": [22, 37, 99, 153, 194, 197, 209, 213, 226, 273, 703, 898, 952, 960, 984, 987, 989, 990, 995, 999, 1002, 1003, 1008, 1010, 1019, 1027, 1029], "linalg": 22, "lstsq": 22, "onlinealgorithm": 23, "rl": [23, 1034], "get_supported_online_method": 23, "1e": [23, 24, 202, 203, 204, 220, 222, 226, 289, 514, 619, 777, 912, 913, 914, 915, 916, 923, 930, 984, 987, 990, 994, 996, 998, 1000, 1002, 1029, 1031, 1033], "07": [24, 61, 158, 168, 890, 897, 908, 910, 965, 1005, 1007, 1023], "known": [24, 147, 155, 159, 162, 164, 205, 207, 209, 723, 761, 763, 764, 765, 828, 829, 830, 831, 832, 889, 897, 903, 989, 994, 1002, 1003, 1012, 1019, 1022, 1023, 1031], "tikhonov": [24, 1031], "regular": [24, 224, 889, 915, 990, 1031], "trainingsystem": 24, "coeffici": [24, 147, 155, 157, 167, 883, 887, 890, 896, 908, 916, 923, 1020, 1026, 1031], "modules_as_tupl": 25, "modules_as_dict": 25, "altern": [25, 247, 248, 988, 994, 996, 1006, 1008], "accept": [25, 458, 699], "chain": 25, "subsequ": [25, 993], "last": [25, 46, 47, 141, 153, 155, 162, 214, 226, 448, 889, 890, 891, 892, 896, 898, 900, 901, 908, 918, 919, 921, 926, 933, 989, 1007, 1021, 1027, 1030], "allow": [25, 75, 76, 77, 152, 277, 284, 481, 532, 533, 773, 892, 897, 898, 952, 960, 1012, 1017, 1023, 1027, 1028], "treat": [25, 226, 534, 996, 1002], "store": [25, 235, 961, 989, 1008, 1011, 1015, 1021, 1025, 1027], "regist": [25, 150, 176, 189, 984, 995, 1024], "submodul": 25, "what": [25, 404, 481, 984, 989, 999, 1002, 1008, 1010, 1012, 1014, 1015, 1019, 1022, 1023, 1026, 1031], "exactli": [25, 162, 257, 777, 1002], "sound": 25, "On": [25, 915, 924, 983, 987, 989, 994, 999, 1002, 1003, 1030], "hand": [25, 154, 166, 891, 989, 1003, 1027, 1029], "cascad": 25, "context": [25, 339, 416, 651, 777, 843, 1012, 1014], "end": [26, 30, 44, 45, 47, 48, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 64, 65, 137, 138, 140, 142, 143, 147, 152, 153, 154, 155, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 180, 182, 183, 185, 186, 206, 208, 210, 219, 224, 244, 285, 356, 411, 448, 490, 539, 651, 767, 777, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 889, 890, 892, 893, 894, 898, 900, 903, 906, 915, 916, 918, 924, 925, 930, 936, 937, 940, 951, 956, 957, 966, 983, 990, 999, 1002, 1003, 1006, 1007, 1008, 1019, 1020, 1021, 1023, 1026, 1027, 1031, 1033, 1034], "arraytyp": [26, 30, 41, 45, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 113, 158, 202, 203, 204, 205, 207, 209, 211, 212, 213, 220, 222, 226, 235, 238, 241, 242, 243, 244, 245, 273, 318, 319, 320, 321, 322, 356, 366, 418, 469, 480, 481, 487, 488, 489, 490, 492, 531, 532, 533, 539, 571, 572, 580, 581, 582, 642, 643, 644, 645, 646, 647, 648, 649, 650, 663, 740, 767, 782, 785, 790, 791, 792, 796, 826, 827, 828, 829, 830, 831, 832, 833, 873, 897, 901, 902, 906, 909, 910, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964], "twoendconnector": [26, 30, 828, 829, 830, 831, 832, 949, 951, 952, 954, 956, 957, 958, 960], "long": [27, 30, 46, 47, 145, 224, 702, 777, 816, 857, 880, 1012, 1018, 1019, 1028], "term": [27, 29, 30, 145, 147, 156, 165, 224, 245, 816, 889, 913, 915, 916, 924, 937, 954, 956, 957, 965, 966, 1000, 1019, 1026], "plastic": [27, 29, 30, 815, 952, 954, 956, 957, 960, 966, 1028], "short": [29, 30, 141, 147, 224, 339, 816, 843, 857, 891, 892, 893, 937, 954, 956, 957, 965, 966, 1020, 1021, 1028, 1031], "nullsynout": 30, "ltp": [30, 1005], "synoutput": 30, "compon": [30, 984, 989, 990, 1005, 1007], "target_par": [31, 32, 35, 36, 987, 989, 994, 999, 1002], "fixed_var": [31, 32, 33, 34, 35, 36], "pars_upd": [31, 32, 33, 34, 35, 36, 987, 989, 999, 1002], "resolut": [31, 32, 33, 34, 35, 36, 445, 987, 989, 994, 999, 1000], "1d": [31, 35, 199, 205, 207, 209, 216, 229, 230, 231, 238, 1002], "co": [31, 32, 824, 918, 1014, 1019], "dimension1": [31, 32], "dimension2": [31, 32], "fast_var": [33, 34, 1002], "slow_var": [33, 34, 1002], "help": [35, 37, 508, 582, 924, 989, 990, 993, 994, 997, 1000, 1002, 1008, 1012, 1021, 1027, 1033], "fast": [35, 723, 816, 889, 893, 898, 900, 910, 912, 957, 987, 994], "field": [35, 404, 777, 885, 937, 987, 994, 999, 1002, 1019], "point": [35, 37, 94, 138, 141, 155, 159, 167, 407, 445, 481, 503, 507, 628, 699, 702, 777, 885, 897, 909, 913, 984, 986, 989, 994, 995, 996, 997, 999, 1002, 1011, 1015, 1021, 1027, 1031], "popul": [35, 36, 79, 86, 117, 119, 669, 695, 880, 881, 886, 937, 940, 941, 989, 994, 999, 1002, 1004, 1010, 1027, 1028], "f_cell": [37, 987, 1000], "f_type": [37, 1000], "f_loss": [37, 1000], "excluded_var": 37, "f_loss_batch": 37, "slow": [37, 40, 44, 50, 51, 52, 53, 54, 56, 60, 893, 898, 900, 986, 989, 994, 1023], "closest": 37, "exclud": [37, 202, 203, 204, 206, 208, 210, 987, 989, 995, 1000], "threshold": [37, 45, 48, 49, 312, 479, 777, 889, 890, 891, 892, 896, 897, 900, 901, 903, 906, 908, 910, 936, 940, 987, 989, 1000, 1007], "non": [37, 47, 56, 140, 142, 145, 242, 257, 267, 617, 669, 695, 699, 715, 717, 903, 983, 987, 989, 997, 1000, 1010, 1017, 1023, 1028, 1030], "uniqu": [37, 730, 731, 732, 777, 987, 990, 1000, 1006, 1010, 1029], "accord": [37, 40, 50, 51, 79, 95, 96, 112, 113, 114, 147, 277, 894, 965, 966, 983, 989, 994, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1020, 1024, 1027, 1028, 1030, 1033], "toler": [37, 152, 911, 987, 1000, 1023], "far": [37, 991, 993, 1000], "awai": [37, 162, 243, 285, 1000], "outlier": [37, 1000], "unit": [37, 40, 120, 219, 224, 234, 356, 411, 469, 480, 539, 740, 767, 889, 890, 891, 892, 896, 898, 900, 903, 908, 936, 937, 989, 990, 1007, 1018, 1029, 1031], "discret": [37, 147, 255, 257, 697, 702, 723, 815, 1000, 1029, 1031], "get_dt": [37, 989, 990, 1008, 1021, 1029], "candid": [37, 987, 989, 994, 999, 1000, 1002], "brainpy_object": [38, 45, 46, 48, 49, 52, 259], "calcium": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 64, 906], "ion": [39, 40, 41, 64, 67, 885, 892, 898, 903, 910, 949, 952, 960, 964, 1007, 1008], "36": [40, 41, 42, 45, 46, 48, 49, 51, 52, 60, 64, 144, 814, 816, 818, 897, 910, 987, 989, 1003, 1007, 1023], "c_rest": 40, "00024": [40, 41, 42, 43], "c0": [40, 41, 42], "c_initi": [40, 41, 42], "oneinit": [40, 41, 42, 202, 203, 204, 220, 222, 226, 888, 893, 894, 896, 898, 900, 903, 906, 910, 989, 1010, 1028], "propos": [40, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 120, 153, 154, 918, 919, 983, 989, 990, 999, 1000, 1002, 1004, 1026], "intracellular": [40, 44, 64], "ca": [40, 42, 44, 45, 46, 47, 48, 49, 64, 903, 906], "were": [40, 284, 669, 699, 897], "determin": [40, 164, 166, 526, 528, 696, 698, 700, 761, 763, 764, 765, 777, 889, 891, 893, 900, 916, 952, 987, 999, 1018], "contribut": [40, 761, 763, 764, 765], "influx": 40, "due": [40, 162, 167, 952, 960, 984, 1011, 1019, 1020], "enter": [40, 1007], "diffus": [40, 955, 957, 1008, 1026], "interior": 40, "cell": [40, 44, 64, 206, 208, 210, 224, 886, 888, 897, 906, 952, 960, 1000, 1019, 1029, 1030, 1031], "concentr": [40, 41, 42, 43, 44, 64, 722, 906, 949, 952, 958, 960, 964, 1005, 1008], "thin": 40, "shell": 40, "beneath": 40, "membran": [40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 906, 908, 910, 936, 937, 949, 952, 960, 983, 990, 994, 1002, 1003, 1004, 1007, 1008, 1010], "wa": [40, 56, 64, 120, 147, 153, 154, 155, 781, 891, 892, 903, 989, 996, 1004], "k": [40, 44, 50, 51, 52, 53, 54, 56, 57, 58, 79, 97, 117, 119, 144, 145, 147, 165, 219, 238, 241, 242, 311, 388, 391, 424, 636, 665, 669, 697, 702, 703, 721, 723, 751, 796, 806, 815, 816, 847, 848, 849, 850, 852, 853, 854, 880, 881, 883, 893, 894, 900, 903, 906, 910, 916, 952, 957, 960, 995, 999, 1000, 1003, 1005, 1008, 1023, 1026, 1028, 1029], "96489": 40, "mathrm": [40, 44, 45, 47, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 144, 145, 156, 202, 203, 204, 220, 226, 234, 242, 356, 411, 469, 487, 488, 489, 490, 539, 571, 572, 740, 767, 782, 785, 790, 791, 792, 813, 818, 820, 821, 826, 888, 894, 906, 910, 915, 936, 949, 951, 952, 954, 956, 957, 958, 960, 962, 963, 964, 987, 989, 994, 1002, 1003, 1005, 1007, 1008, 1019, 1021, 1023, 1026], "mol": 40, "faradai": 40, "mu": [40, 137, 144, 699, 719, 893, 906, 910, 936, 958, 999, 1000, 1021], "depth": [40, 204], "i_t": [40, 206, 208, 210, 224], "cm": [40, 44, 47, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 906, 910, 1028], "millimolar": 40, "summat": [40, 147, 418, 642, 643, 644, 649, 827, 833], "ii": [40, 206, 208, 210, 224, 891], "efflux": 40, "pump": 40, "usual": [40, 144, 258, 267, 340, 534, 617, 897, 919, 952, 958, 960, 983, 989, 995, 997, 1002, 1005, 1008, 1015, 1018, 1020, 1023, 1024, 1025, 1026], "combin": [40, 161, 238, 256, 404, 889, 892, 989, 1003, 1006, 1017, 1021, 1024], "process": [40, 137, 143, 185, 806, 814, 815, 816, 818, 822, 897, 904, 935, 936, 937, 939, 940, 941, 946, 947, 949, 983, 989, 990, 992, 1005, 1007, 1008, 1014, 1017, 1021, 1024, 1026, 1029], "bind": [40, 44, 64, 949, 957, 958, 964, 1008, 1019], "buffer": [40, 72, 87, 88, 89, 90, 91, 92, 260, 271, 358, 460, 944, 945, 1017], "atpas": 40, "neighbor": [40, 80, 81, 82, 93, 97, 106, 107, 1027], "here": [40, 144, 158, 164, 166, 202, 203, 204, 242, 352, 404, 481, 534, 721, 903, 949, 952, 960, 964, 983, 984, 987, 989, 990, 996, 997, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "adopt": [40, 44, 45, 46, 52, 60, 65, 881], "kinet": [40, 64, 910, 952, 960], "scheme": [40, 114, 145, 178, 180, 182, 1026], "overset": 40, "c_1": [40, 152], "underset": [40, 44, 64], "c_2": [40, 152], "rightleftharpoon": [40, 44], "cap": 40, "xrightarrow": 40, "c_3": 40, "intermedi": [40, 994, 996, 997], "o": [40, 64, 152, 156, 164, 165, 166, 169, 690, 814, 816, 818, 857, 925, 952, 960, 964, 990, 1000, 1005, 1017, 1025, 1029, 1030, 1031, 1033, 1034], "extracellular": [40, 952, 960, 964, 1005], "c_": [40, 147, 152, 157, 206, 208, 210, 224, 906, 910, 930, 1003, 1021, 1023], "affin": [40, 202, 203, 204, 220, 222, 226], "wherea": 40, "extrus": 40, "slower": [40, 892, 1004], "blaustein": 40, "1988": 40, "therefor": [40, 145, 158, 159, 162, 164, 170, 358, 957, 983, 984, 993, 994, 995, 996, 997, 1002, 1003, 1005, 1006, 1008, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1025, 1027, 1028, 1030, 1033], "compar": [40, 162, 912, 990, 1008, 1019, 1022], "micha": 40, "menten": 40, "approxim": [40, 93, 145, 147, 153, 156, 159, 162, 164, 166, 183, 185, 186, 241, 242, 247, 248, 273, 445, 469, 777, 812, 898, 952, 960, 1000, 1020, 1023, 1027], "describ": [40, 56, 57, 58, 61, 62, 145, 147, 238, 244, 404, 761, 763, 764, 765, 777, 889, 890, 892, 893, 896, 900, 908, 910, 949, 989, 1006, 1008, 1018, 1019, 1025, 1027, 1031], "k_": [40, 64, 152, 157, 165, 166], "mm": [40, 44, 64, 885, 949, 952, 958, 960, 964, 1005], "product": [40, 166, 380, 643, 648, 831, 865, 995], "total": [40, 78, 136, 138, 141, 144, 145, 166, 244, 481, 508, 777, 789, 893, 906, 942, 943, 999, 1007, 1008, 1021, 1029], "dissoci": 40, "interpret": [40, 156, 159, 162, 284, 318, 319, 320, 321, 322, 777, 987, 989, 1019], "half": [40, 64, 697, 701, 702, 703, 811, 937, 1000], "ll": [40, 168, 206, 208, 210, 219, 224], "neglig": 40, "simpl": [40, 120, 156, 215, 366, 891, 900, 989, 990, 994, 997, 998, 1006, 1007, 1017, 1018, 1021, 1025, 1027, 1030], "bazhenov": [40, 52, 60], "et": [40, 44, 46, 47, 52, 56, 60, 64, 65, 114, 120, 147, 215, 219, 224, 233, 242, 247, 248, 255, 256, 257, 806, 811, 815, 816, 820, 888, 889, 891, 892, 893, 894, 896, 906, 908, 940, 957, 990, 1004, 1005, 1020], "al": [40, 44, 46, 47, 52, 56, 60, 64, 65, 114, 120, 147, 215, 219, 224, 233, 242, 247, 248, 255, 256, 257, 806, 811, 815, 816, 820, 888, 889, 891, 892, 893, 894, 896, 906, 908, 940, 957, 990, 1004, 1005, 1020], "1998": [40, 97, 1027], "rest": [40, 888, 889, 890, 891, 892, 894, 896, 898, 901, 902, 908, 936, 952, 960, 983, 987, 989, 1002, 1007], "tau_": [40, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 65, 891, 901, 906, 910, 940, 956, 957, 960, 999, 1005, 1007, 1008, 1026], "thick": 40, "perimembran": 40, "affect": [40, 898, 949, 989, 1002, 1004], "properti": [40, 153, 155, 892, 897, 958, 983, 984, 989, 1006, 1019, 1020, 1031], "valenc": 40, "text": [40, 44, 64, 112, 113, 145, 159, 164, 202, 203, 204, 226, 238, 244, 806, 807, 818, 891, 892, 894, 900, 901, 906, 915, 956, 983, 1005, 1007, 1023, 1031], "05": [40, 158, 202, 203, 204, 220, 222, 226, 289, 416, 514, 534, 619, 815, 923, 935, 936, 937, 941, 955, 987, 989, 1000, 1002, 1019, 1023, 1031], "nernst": 40, "rt": 40, "2f": [40, 989, 996], "_0": [40, 1019], "31441": 40, "circ": [40, 52, 60, 916, 1026], "309": [40, 996], "96": [40, 147, 996], "489": 40, "peri": 40, "mmol": 40, "outsid": [40, 41, 621, 761, 763, 764, 765, 918, 926, 952, 960, 989, 1003, 1010, 1019], "ga": 40, "destexh": [40, 44, 47, 64, 885, 958], "alain": [40, 44, 47, 64, 885, 958], "agnessa": 40, "babloyantz": 40, "terrenc": 40, "sejnowski": [40, 815], "ionic": [40, 44, 64, 894], "mechan": [40, 64, 721, 889, 891, 940, 983, 990, 999, 1002], "intrins": [40, 906, 908, 940], "thalam": [40, 44, 45, 47, 48, 49, 50, 51, 53, 54, 64, 65, 949, 1005], "relai": [40, 45, 48, 50, 51, 53, 54, 65], "biophys": [40, 892, 989], "journal": [40, 44, 46, 47, 50, 51, 52, 53, 54, 57, 60, 61, 64, 65, 147, 155, 185, 186, 215, 721, 880, 885, 889, 890, 891, 892, 897, 898, 906, 910, 913, 924, 935, 936, 952, 958, 960, 992], "65": [40, 93, 158, 889, 890, 891, 894, 897, 900, 908, 910, 987, 1003, 1007, 1017, 1023, 1027], "1993": [40, 44, 167, 886], "1538": 40, "1552": 40, "maxim": [40, 44, 47, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 645, 906, 915, 956, 957, 1002, 1003, 1017], "igor": [40, 923], "timofeev": 40, "mircea": 40, "steriad": 40, "cellular": 40, "intrathalam": 40, "augment": [40, 64, 989, 1011], "respons": [40, 889, 891, 957], "dure": [40, 215, 405, 406, 813, 913, 961, 984, 987, 995, 996, 997, 1007, 1011, 1012, 1015, 1017, 1018, 1021, 1024, 1028, 1031], "hz": [40, 140, 142, 219, 881, 989, 990, 999], "stimul": [40, 892, 1005, 1018], "neurophysiologi": [40, 44, 46, 47, 50, 51, 53, 54, 64, 65, 891, 906, 908, 958], "79": [40, 50, 51, 1029], "2730": 40, "2748": 40, "075": [42, 906], "hold": [43, 445, 995], "95": [44, 898, 912, 951, 956, 957, 996, 1002, 1019], "48": [44, 49, 185, 186, 886, 889, 891, 989, 1017, 1029], "09": [44, 990], "phi": [44, 47, 52, 57, 58, 60, 61, 62, 64, 65, 158, 242, 903, 910, 923, 1003, 1019], "potassium": [44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 892, 897, 906, 910, 1003, 1007], "1994": [44, 47, 886, 906], "both": [44, 55, 159, 255, 257, 397, 458, 665, 796, 889, 897, 930, 952, 960, 983, 988, 989, 994, 997, 1006, 1019], "vivo": [44, 958], "contrera": 44, "mull": 44, "1986": [44, 155, 994, 1002], "vitro": 44, "record": [44, 881, 884, 885, 989, 1007, 1018, 1024, 1027], "avanzini": 44, "1989": [44, 56, 64, 153], "presenc": [44, 891], "mark": [44, 889, 890, 891, 892, 896, 900, 908, 996, 1010, 1011, 1015], "hyper": [44, 812, 906], "polar": [44, 906], "ahp": [44, 906], "burst": [44, 49, 889, 893, 894, 898, 906, 937, 994, 1002, 1020], "mediat": [44, 952, 960, 1005], "bal": 44, "mccormick": [44, 45, 48, 50, 51, 53, 54, 65], "kca": 44, "introduc": [44, 242, 891, 893, 987, 991, 1004, 1007, 1011, 1018, 1027, 1028], "previous": [44, 995], "yamada": [44, 56], "nca": 44, "open": [44, 64, 508, 697, 701, 702, 703, 717, 947, 949, 952, 957, 960, 1000, 1003, 1008], "close": [44, 64, 243, 697, 702, 912, 915, 937, 949, 957, 1008, 1031], "stackrel": [44, 64], "ca_i": 44, "begin": [44, 45, 47, 48, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 64, 65, 147, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 180, 182, 183, 185, 186, 206, 208, 210, 219, 224, 244, 356, 411, 490, 539, 767, 773, 776, 777, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 889, 890, 892, 893, 894, 898, 900, 903, 906, 915, 916, 918, 924, 925, 930, 936, 937, 940, 951, 956, 957, 966, 983, 989, 1002, 1003, 1006, 1007, 1019, 1020, 1023, 1026, 1027], "g_": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 64, 65, 178, 180, 182, 183, 897, 903, 906, 910, 913, 923, 949, 951, 952, 954, 956, 957, 958, 960, 962, 963, 964, 1003, 1005, 1007, 1008, 1026], "max": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 65, 117, 119, 229, 230, 231, 241, 242, 445, 503, 721, 723, 740, 761, 763, 764, 765, 896, 915, 918, 919, 940, 949, 951, 952, 954, 956, 957, 958, 960, 990, 998, 1002, 1005, 1008, 1019, 1028, 1029], "e_k": [44, 897, 1007], "dp": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 65, 1031], "p_": [44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 64, 65, 185, 186], "tau_p": [44, 46, 47, 48, 49, 50, 51, 53, 54, 65], "maximum": [44, 45, 46, 48, 49, 94, 112, 113, 114, 138, 195, 196, 197, 228, 263, 273, 645, 732, 777, 828, 862, 897, 903, 906, 910, 918, 937, 949, 951, 952, 956, 957, 958, 960, 1000, 1008, 1010, 1019, 1021, 1024, 1031], "03": [44, 897, 910, 935, 996, 1003, 1007, 1023], "yield": [44, 164, 445, 990, 1029], "veri": [44, 154, 358, 397, 912, 952, 957, 960, 988, 993, 994, 1002, 1008, 1012, 1015, 1019, 1020, 1023, 1027], "similar": [44, 169, 243, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 696, 697, 698, 699, 700, 702, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 888, 906, 989, 993, 997, 1000, 1002, 1007, 1010, 1017, 1018, 1027, 1028, 1029], "densiti": [44, 47, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 65, 493, 494, 496, 702, 721, 723, 1000, 1028], "mv": [44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 889, 890, 891, 892, 893, 894, 896, 897, 900, 903, 906, 908, 910, 935, 936, 937, 939, 941, 949, 958, 964, 1003], "spindl": [44, 47], "rhythmic": [44, 45, 47, 48, 50, 51, 53, 54, 65], "isol": [44, 47, 50, 51, 53, 54, 892], "reticular": [44, 47, 49], "nucleu": [44, 47, 49], "72": [44, 47, 886, 989, 996, 1010, 1029], "803": [44, 47], "818": [44, 47], "t_base_p": [45, 46, 48, 49], "t_base_q": [45, 46, 48, 49], "v_sh": [45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64], "huguenard": [45, 48, 49, 50, 51, 53, 54, 65], "1992": [45, 48, 49, 50, 51, 53, 54, 65, 156, 166], "Its": [45, 46, 65, 155, 169, 180, 220, 481, 492, 983, 1002, 1008, 1028], "ht": 45, "q": [45, 46, 48, 49, 50, 51, 53, 54, 60, 147, 608, 610, 627, 658, 817, 857, 906, 1003], "e_": [45, 46, 48, 49, 56, 64, 152, 897, 910, 1003, 1007], "cdot": [45, 46, 47, 48, 49, 117, 119, 166, 214, 235, 242, 488, 489, 785, 810, 826, 910, 931, 952, 960, 1000, 1005, 1021, 1027, 1028, 1031], "exp": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 79, 117, 119, 158, 238, 356, 411, 534, 572, 721, 731, 791, 822, 897, 906, 910, 951, 956, 987, 996, 999, 1000, 1003, 1007, 1019, 1023, 1027, 1028], "sh": [45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64], "16": [45, 48, 154, 166, 169, 171, 172, 445, 458, 639, 697, 777, 880, 910, 988, 989, 990, 996, 997, 998, 1019, 1027, 1028], "18": [45, 48, 53, 54, 60, 61, 62, 158, 897, 898, 903, 906, 910, 949, 958, 990, 996, 1002, 1005, 1007, 1008, 1010, 1023], "612": [45, 48], "59": [45, 48, 53, 54, 65, 889, 891, 987, 1010, 1017], "dq": [45, 46, 48, 49, 50, 51, 53, 54, 60], "q_": [45, 46, 48, 49, 50, 51, 53, 54], "tau_q": [45, 46, 48, 49, 50, 51, 53, 54], "467": [45, 48], "66": [45, 48, 50, 51, 53, 54, 906, 1017], "quad": [45, 48, 50, 51, 54, 144, 162, 166, 179, 244, 897, 901, 987, 1007, 1019, 1026], "22": [45, 48, 52, 60, 152, 157, 445, 777, 990, 996, 1007, 1008, 1010], "geq": [45, 48, 50, 51, 54, 238, 723, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 894, 900, 1019], "83": [45, 48, 908, 996], "shift": [45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 202, 203, 204, 748, 1011, 1015], "phi_p": [45, 46, 48, 49, 50, 51, 53, 54, 56], "24": [45, 46, 48, 49, 64, 153, 458, 906, 990, 996, 1000], "phi_q": [45, 46, 48, 49, 50, 51, 53, 54, 56], "celsiu": [45, 46, 48, 49, 52, 60], "jr": [45, 48, 49], "da": [45, 48, 49, 1019], "involv": [45, 48, 50, 51, 53, 54, 65, 161, 984, 1008], "neurophysiol": [45, 47, 48], "68": [45, 48, 50, 51, 53, 54, 65, 889, 890, 891, 908, 996, 1017], "1373": [45, 48, 50, 51, 53, 54, 65], "1383": [45, 48, 50, 51, 53, 54, 65], "ica_p2q_form": [45, 46, 48, 49], "inou": [46, 47], "strowbridg": [46, 47], "2008": [46, 47, 155, 445, 890, 891, 898, 1000], "cal": 46, "300": [46, 141, 890, 891, 987, 998, 1021, 1029, 1031], "40": [46, 52, 58, 60, 62, 64, 154, 155, 169, 897, 936, 954, 989, 990, 996, 1000, 1007, 1008, 1010, 1023], "tsuyoshi": 46, "ben": 46, "transient": [46, 47, 910], "induc": [46, 47, 888], "increas": [46, 47, 145, 147, 162, 870, 893, 897, 919, 926, 987, 1002, 1020, 1021, 1022], "olfactori": [46, 47], "bulb": [46, 47], "interneuron": [46, 47, 880, 910], "99": [46, 47, 145, 202, 203, 204, 891, 996, 1020, 1024], "187": [46, 47, 155], "select": [47, 669, 723, 912, 989, 990, 999, 1000, 1010, 1017, 1018], "cation": [47, 64, 65, 952, 960], "43": [47, 53, 54, 65, 906, 1033, 1034], "bw": [47, 892, 893, 987, 1006, 1023], "cat": [48, 49, 255], "princ": [49, 50, 51, 53, 54, 155, 1023], "52": [49, 144, 445, 989, 1017], "27": [49, 154, 169, 906, 987, 990, 996, 1000, 1002, 1019], "102": [49, 898], "85": [49, 960, 996], "407": 49, "novel": 49, "underli": [49, 64, 97, 458, 868, 989, 1002], "prolong": 49, "ca2": [49, 903], "gabaerg": 49, "rat": [49, 50, 51, 53, 54], "neurosci": [49, 52, 60, 267, 617, 806, 815, 816, 880, 885, 889, 891, 897, 903, 906, 908, 910, 951, 952, 956, 957, 960, 991, 993, 994, 999, 1002, 1004, 1020], "3804": 49, "3817": 49, "90": [50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 153, 158, 910, 990, 999], "rapidli": [50, 51, 154, 994, 1002], "ia1": 50, "develop": [50, 51, 185, 186, 445, 930, 988, 991, 993], "averag": [50, 51, 93, 159, 166, 192, 193, 194, 198, 199, 200, 201, 762, 863, 880, 886, 912, 916, 923, 930, 937, 989, 1008, 1021, 1027], "behavior": [50, 51, 243, 352, 416, 697, 702, 777, 896, 897, 898, 906, 989, 999, 1002], "thalamu": [50, 51], "ia": [50, 51, 219, 989], "35": [50, 51, 56, 154, 155, 158, 897, 910, 987, 1007, 1019, 1020, 1023], "19": [50, 51, 52, 60, 155, 906, 990, 996, 1019], "37": [50, 51, 154, 889, 891], "78": [50, 51, 147, 777], "46": [50, 51, 906], "238": [50, 51], "63": [50, 51, 58, 62, 814, 816, 818, 960, 996, 1017], "john": [50, 51, 53, 54, 65, 906, 994, 1002], "david": [50, 51, 53, 54, 65, 159, 162, 886, 891, 896, 951, 956, 957], "tea": [50, 51, 53, 54], "sensit": [50, 51, 53, 54, 889, 890, 900, 903, 1007, 1010], "acut": [50, 51, 53, 54], "1991": [50, 51, 53, 54, 58, 62, 166, 906], "1316": [50, 51, 53, 54], "1328": [50, 51, 53, 54, 999], "ika2_hm1992": 50, "ia2": 51, "ika1_hm1992": 51, "t_base": [52, 64], "rectifi": [52, 120, 539, 740, 906, 910], "2002": [52, 60, 93, 960, 989, 1027], "alpha_p": [52, 57, 58, 60], "beta_p": [52, 57, 58, 60], "032": [52, 58], "thalamocort": [52, 60], "wave": [52, 60, 64, 811], "sleep": [52, 60], "transit": [52, 60, 64, 93, 897, 949, 983, 1008], "8691": [52, 60], "8704": [52, 60], "slowli": [53, 54, 912], "ik2a": 53, "ik2": [53, 54], "17": [53, 54, 60, 62, 990, 996, 1019, 1031, 1033, 1034], "81": [53, 54, 958], "1329": [53, 54], "200": [53, 54, 136, 139, 141, 534, 885, 897, 908, 965, 966, 983, 987, 989, 990, 996, 998, 1000, 1003, 1007, 1018, 1019, 1020, 1021, 1029, 1030, 1031], "ik2b": 54, "005": [55, 117, 119, 144, 145, 147, 999, 1002, 1028], "leak": [55, 285, 897, 903, 906, 910, 1007], "leakag": [55, 59], "acetylcholin": 55, "norepinephrin": 55, "004": 56, "tau_max": 56, "4000": [56, 984, 987], "account": 56, "frequenc": [56, 140, 142, 723, 897, 898, 961, 999, 1021], "adapt": [56, 152, 153, 154, 155, 161, 166, 168, 169, 192, 193, 194, 195, 196, 197, 807, 812, 889, 890, 898, 911, 912, 913, 914, 915, 916, 923, 937], "unless": [56, 178, 697, 702, 703, 730, 731, 732, 1023], "walter": 56, "97": [56, 144, 996, 1019], "45": [57, 61, 155, 949, 1017], "hodgkin": [57, 61, 897, 908, 910, 1003, 1022], "huxlei": [57, 61, 897, 906, 908, 910, 1022], "alan": [57, 61, 144, 154, 897], "andrew": [57, 61, 897, 951, 956, 957], "quantit": [57, 61, 897, 906], "descript": [57, 61, 479, 651, 857, 889, 890, 891, 892, 896, 897, 898, 900, 901, 902, 903, 908, 937, 949, 951, 952, 954, 956, 957, 958, 960, 993], "applic": [57, 61, 145, 168, 169, 721, 897, 903, 983, 989, 1010, 1011, 1018, 1019], "nerv": [57, 61, 892, 897], "physiologi": [57, 61, 897], "1952": [57, 61, 897, 910], "500": [57, 61, 147, 155, 897, 989, 998, 1002, 1019, 1021, 1029, 1031], "traub": [58, 62, 906], "mile": [58, 62, 906], "roger": [58, 62], "richard": [58, 62, 892, 936], "hippocampu": [58, 62], "vol": [58, 62, 147, 164, 822, 925], "777": [58, 62], "cambridg": [58, 62, 156, 166, 723, 891, 951, 956, 957], "univers": [58, 62, 156, 166, 721, 891, 991, 993, 1006, 1008, 1031], "press": [58, 62, 156, 166, 723, 891], "ina_tm1991": [58, 60], "sodium": [60, 61, 62, 70, 892, 897, 906, 910, 1003, 1007, 1010], "na": [60, 61, 62, 894, 897, 900, 906, 910, 999, 1000, 1007, 1023], "alpha_q": 60, "beta_q": 60, "split": [61, 62, 480, 806, 810, 811, 813, 815, 817, 820, 924, 925, 930, 1019, 1023, 1026, 1029], "dm": [61, 62, 1007, 1023], "alpha_m": [61, 62, 897, 1007], "beta_m": [61, 62, 897, 1007], "dh": [61, 62, 158, 1007, 1023], "alpha_h": [61, 62, 897, 1007], "beta_h": [61, 62, 897, 1007], "ina_ba2002": 62, "ih": [63, 1019], "0004": 64, "k4": 64, "g_inc": 64, "ca_half": 64, "002": [64, 1002], "hyperpolar": [64, 65], "propso": [64, 65], "1996": [64, 880, 910, 957, 989], "schema": [64, 178, 179, 1020, 1023, 1026], "gather": [64, 458, 1004, 1012, 1019], "rightleftarrow": 64, "o_": 64, "reaction": 64, "i_h": [64, 65], "second": [64, 153, 156, 162, 164, 170, 284, 404, 481, 526, 528, 531, 532, 533, 873, 883, 889, 914, 915, 923, 983, 989, 995, 1006, 1010, 1012, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1029], "bide": 64, "regul": [64, 910, 1005, 1012], "p_0": 64, "unbound": 64, "p_1": [64, 164, 1023, 1026], "four": [64, 81, 107, 153, 166, 699, 897, 984, 994, 1002, 1008, 1017, 1018, 1019, 1023, 1027], "site": [64, 781, 1008, 1019, 1027], "k_1": [64, 164, 165], "5e": 64, "k_2": [64, 164, 165], "4e": 64, "associ": [64, 669, 897], "lead": [64, 162, 445, 458, 761, 763, 764, 765, 915, 1020, 1023], "lock": [64, 901, 947], "o_l": 64, "k_3": [64, 165], "k_4": 64, "proport": [64, 723, 906, 1003], "g_h": 64, "inc": 64, "e_h": 64, "twice": [64, 247, 248, 995, 1022], "produc": [64, 152, 156, 237, 254, 445, 664, 667, 669, 679, 715, 717, 889, 890, 896, 908, 966, 994, 999, 1002, 1007, 1023, 1030], "observ": [64, 202, 203, 204, 773, 898, 1002], "sino": 64, "atrial": 64, "hagiwara": 64, "irisawa": 64, "m_": [64, 903, 906, 910, 915, 923], "tau_m": [64, 886, 889, 890, 983, 1007], "267": [64, 994, 1002], "71": [64, 1010], "14": [64, 65, 777, 796, 815, 816, 900, 935, 988, 990, 996, 999, 1010, 1011, 1027], "89": [64, 153, 777], "11": [64, 147, 152, 154, 155, 157, 169, 458, 581, 702, 777, 877, 888, 906, 941, 960, 988, 990, 996, 1005, 1012, 1027, 1029], "synchron": [64, 880, 886, 947, 1022], "ferret": 64, "76": [64, 508, 891, 1029], "2049": 64, "2070": 64, "086": 65, "0701": 65, "87": [65, 898, 1019, 1027], "leaki": [68, 235, 539, 810, 815, 888, 896, 901, 902, 906, 983, 989, 999, 1003, 1031], "include_self": [71, 75, 76, 77, 79, 80, 81, 82, 94, 97, 106, 107, 117, 119, 1027, 1028], "kind": [71, 152, 308, 445, 503, 794, 880, 886, 1005, 1008, 1012, 1017, 1020, 1021, 1026, 1029], "creat": [71, 72, 75, 76, 77, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 97, 106, 107, 117, 119, 169, 244, 260, 271, 273, 277, 285, 404, 467, 481, 695, 840, 841, 892, 961, 987, 989, 990, 998, 999, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1015, 1018, 1027, 1030], "num_pr": [71, 101, 102, 105, 1008], "num_post": [71, 102, 105, 1008, 1027], "bytes_or_buff": [72, 87, 88, 89, 90, 91, 92, 260, 271], "encod": [72, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 106, 107, 117, 119, 257, 260, 271, 621, 757, 986, 1000, 1027, 1028], "expos": [72, 87, 88, 89, 90, 91, 92, 260, 271], "decod": [72, 87, 88, 89, 90, 91, 92, 260, 271], "handler": [72, 87, 88, 89, 90, 91, 92, 260, 271], "__str__": [72, 87, 88, 89, 90, 91, 92, 260, 271], "repr": [72, 87, 88, 89, 90, 91, 92, 260, 271, 777], "getdefaultencod": [72, 87, 88, 89, 90, 91, 92, 260, 271], "strict": [72, 87, 88, 89, 90, 91, 92, 260, 271], "inptr": [73, 99], "connector": [73, 83, 84, 86, 98, 99, 261, 263, 1008], "built": [73, 83, 84, 98, 283, 284, 404, 526, 781, 986, 989, 1004, 1008, 1009, 1014, 1018, 1024], "csr": [73, 99, 100, 103, 104, 105, 235, 380, 418, 644, 1027], "spars": [73, 98, 99, 235, 380, 418, 506, 591, 796, 937, 949, 951, 952, 954, 956, 957, 958, 960, 991, 1027, 1028, 1029], "allow_multi_conn": [75, 76, 77], "probabl": [75, 76, 77, 79, 93, 94, 96, 97, 113, 117, 119, 185, 186, 215, 239, 241, 242, 255, 256, 257, 665, 667, 669, 721, 723, 912, 949, 966, 989, 1003, 1004, 1008, 1027, 1031], "pf": [76, 896], "pre_ratio": [77, 94], "ratio": [77, 94, 235, 777, 923, 989, 1004], "encoding_valu": [79, 117, 119, 1027], "periodic_boundari": [79, 80, 81, 82, 106, 107, 117, 119, 1027], "gaussian": [79, 117, 119, 469, 699, 807, 811, 812, 1027, 1028], "pattern": [79, 117, 119, 245, 811, 889, 894, 896, 900, 908, 923, 1004, 1008, 1027, 1028], "within": [79, 86, 94, 117, 119, 123, 202, 203, 204, 220, 222, 284, 458, 664, 868, 880, 897, 946, 947, 984, 989, 1004, 1010, 1027, 1028], "decai": [79, 119, 897, 904, 912, 914, 915, 916, 921, 923, 926, 933, 951, 954, 956, 957, 960, 1005, 1008, 1020, 1024, 1027], "sum_": [79, 117, 119, 144, 145, 152, 157, 242, 824, 880, 886, 896, 954, 957, 960, 1005, 1008, 1026, 1028], "v_k": [79, 117, 119, 881, 903, 1028], "th": [79, 119, 242, 888, 891, 896, 901, 983, 1007, 1028], "width": [79, 117, 119, 147, 203, 204, 508, 717, 818, 881, 937, 989, 1000, 1020, 1027], "posit": [79, 81, 94, 107, 117, 119, 140, 142, 162, 214, 226, 445, 458, 481, 492, 531, 532, 533, 665, 699, 777, 868, 873, 892, 897, 913, 914, 915, 936, 952, 960, 1003, 1019, 1027, 1028], "pi": [79, 117, 119, 242, 469, 805, 806, 824, 918, 919, 937, 1000, 1002, 1014], "period": [79, 80, 81, 82, 106, 107, 112, 114, 117, 119, 139, 511, 869, 889, 891, 893, 900, 901, 908, 933, 935, 954, 989, 1002, 1007, 1021, 1027], "boundari": [79, 80, 81, 82, 106, 107, 117, 119, 928, 994, 1002, 1027], "nearest": [80, 81, 82, 97, 106, 107, 445, 1027], "eight": [80, 106, 1027], "versionad": [80, 81, 82, 106, 107], "extend": [82, 152, 156, 531, 532, 533, 993, 996, 1015], "scope": [82, 651, 984], "pre_id": [83, 99, 101, 642, 645, 646, 647, 648, 649, 650, 1008, 1028], "post_id": [83, 99, 101, 642, 643, 644, 645, 646, 647, 648, 649, 827, 828, 829, 830, 831, 832, 833, 1008, 1028], "conn_mat": [84, 950, 953, 955, 989, 1000, 1028], "holm": [93, 1027], "kim": [93, 114, 1027], "grow": [93, 913, 1027], "graph": [93, 95, 96, 97, 1027], "degre": [93, 95, 96, 1000, 1019, 1027], "distribut": [93, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 143, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 224, 234, 235, 257, 665, 667, 669, 679, 683, 695, 696, 697, 698, 699, 700, 702, 703, 715, 717, 721, 722, 723, 807, 937, 1027, 1028, 1030], "cluster": [93, 886, 1027], "edg": [93, 95, 96, 97, 1027], "triangl": [93, 849, 853, 1027], "integ": [93, 95, 96, 144, 198, 199, 200, 201, 205, 207, 209, 211, 212, 213, 214, 226, 228, 229, 230, 231, 232, 237, 240, 241, 242, 254, 273, 416, 445, 481, 492, 503, 531, 532, 533, 572, 663, 664, 667, 669, 679, 690, 692, 697, 698, 702, 715, 717, 723, 761, 763, 764, 765, 771, 774, 791, 857, 873, 1007], "random_st": [93, 95, 96], "hard": [93, 487, 488, 489, 490, 951, 956, 994, 1000, 1002], "certain": [93, 892, 897, 1008, 1018, 1019], "cutoff": 93, "often": [93, 256, 665, 989, 1019, 1020], "quit": 93, "possibl": [93, 283, 284, 407, 507, 508, 628, 669, 996, 1031], "seem": [93, 989], "decreas": [93, 145, 893, 990, 1010], "barab\u00e1si": [93, 95, 96, 1027], "albert": [93, 95, 96, 1027], "ba": [93, 914], "growth": [93, 1002], "extra": [93, 1000], "chanc": 93, "too": [93, 989, 993, 994, 996, 1002, 1015, 1017, 1028, 1030], "thu": [93, 140, 142, 145, 880, 908, 952, 960, 996, 1007, 1026, 1027, 1028], "sens": [93, 144, 891], "higher": [93, 152, 155, 156, 238, 916, 1022, 1031], "attain": 93, "desir": [93, 696, 697, 698, 700, 773, 777, 1030, 1031], "disconnect": 93, "connectorerror": [93, 95, 96], "doe": [93, 95, 96, 283, 284, 397, 534, 582, 877, 885, 891, 897, 912, 915, 924, 986, 993, 1002, 1003, 1008, 1011, 1015, 1017, 1020, 1030, 1033], "free": [93, 183, 761, 763, 764, 765, 896, 1026, 1027], "tunabl": [93, 1027], "phy": [93, 886, 1027], "rev": [93, 886, 1027], "026107": [93, 1027], "dist": [94, 1000], "distanc": [94, 445, 1027, 1028], "under": [94, 773, 987, 1000, 1002, 1014], "preferenti": [95, 96, 1027], "attach": [95, 96, 284, 1027], "_node": [95, 97], "grown": [95, 96], "exist": [95, 96, 97, 284, 893, 897, 987, 994, 1002, 1008, 1025], "scienc": [95, 816, 888, 894, 898, 949, 989, 1027], "286": [95, 1027], "pp": [95, 97, 147, 155, 166, 224, 445, 908, 910, 925, 992, 994, 1002, 1027], "509": [95, 1027], "512": [95, 154, 168, 1000, 1027, 1029], "1999": [95, 901, 924, 957, 958, 1027], "m2": [96, 1027], "dual": [96, 956, 1027], "num_nod": 96, "either": [96, 198, 199, 200, 201, 205, 207, 209, 211, 212, 213, 228, 229, 230, 231, 232, 238, 241, 242, 478, 572, 777, 791, 897, 1027], "m_1": [96, 1020, 1027], "m_2": [96, 1027], "_1": 96, "oppos": [96, 1027], "_2": 96, "moshiri": [96, 1027], "barabasi": [96, 1027], "arxiv": [96, 118, 120, 179, 202, 203, 204, 219, 224, 226, 256, 817, 820, 912, 914, 916, 918, 923, 1027], "1810": [96, 1027], "10538": [96, 1027], "num_neighbor": [97, 1027], "watt": [97, 1027], "strogatz": [97, 1027], "world": [97, 404, 1019, 1027], "join": 97, "ring": [97, 1027], "topologi": 97, "rewir": [97, 1027], "Then": [97, 147, 152, 162, 988, 989, 990, 994, 996, 997, 998, 1000, 1003, 1004, 1007, 1008, 1010, 1017, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "_neighbor": 97, "odd": 97, "uniformli": [97, 130, 690, 698], "choic": [97, 357, 891, 999], "duncan": [97, 1027], "steven": [97, 164, 1027], "natur": [97, 888, 896, 952, 960, 990, 998, 1027], "393": [97, 155, 1027], "440": [97, 1027], "442": [97, 1027], "csr_mat": 98, "coo": [99, 100, 101], "binari": [99, 237, 255, 445, 781, 815, 988], "myconnector": 99, "build_mat": [99, 1027], "build_csr": [99, 1027], "build_coo": [99, 1027], "them": [99, 117, 967, 983, 984, 987, 989, 993, 994, 995, 996, 997, 1010, 1012, 1017, 1021, 1023, 1024, 1025, 1027, 1028, 1030], "conn_matrix": 99, "post_num": [100, 104, 642, 643, 644, 645, 646, 647, 648, 649, 827, 828, 829, 830, 831, 832, 833, 1008, 1027], "convert": [100, 101, 102, 104, 105, 110, 112, 318, 319, 320, 321, 322, 404, 407, 507, 628, 951, 998, 1008], "csc": [100, 104], "jax_platform_nam": 101, "ij": [102, 157, 1027], "num_period": 112, "linear": [112, 120, 158, 214, 233, 273, 356, 411, 469, 480, 539, 608, 610, 627, 658, 740, 767, 781, 891, 892, 896, 898, 940, 956, 983, 984, 986, 987, 989, 990, 996, 997, 998, 1000, 1023, 1029, 1031, 1033], "latenc": 112, "le": [112, 120, 356, 411, 490, 767, 893, 994, 1020], "t_f": 112, "larger": [112, 162, 445, 815, 890, 896, 908, 984, 990, 999, 1023], "earlier": [112, 906], "minim": [112, 113, 114, 155, 158, 647, 830, 925, 994, 1000, 1002, 1031], "how": [112, 202, 203, 204, 283, 458, 761, 763, 764, 765, 877, 889, 891, 906, 913, 916, 984, 986, 987, 989, 990, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "intens": [112, 935, 936, 937, 939, 941, 1018], "ln": [112, 721, 820, 996], "poisson": [113, 907, 961], "num_phas": 114, "weight_fun": 114, "main": [114, 155, 913, 1018], "idea": [114, 993, 1031], "major": 114, "convent": [114, 202, 203, 204], "jaehyun": 114, "deep": [114, 202, 203, 204, 811, 815, 816, 885, 916, 983, 984, 998, 1008, 1024, 1029, 1030], "neurocomput": 114, "311": [114, 990], "2018": [114, 806, 815, 816, 822, 888, 894, 896, 1020], "373": 114, "386": 114, "num_memori": [115, 144, 145, 146, 147, 893, 894, 1019, 1020], "jnp": [115, 144, 145, 146, 147, 273, 411, 621, 683, 722, 997, 998], "precis": [115, 137, 138, 140, 142, 143, 144, 145, 146, 147, 152, 157, 163, 211, 212, 213, 312, 315, 317, 369, 374, 401, 409, 416, 445, 474, 479, 509, 555, 585, 651, 702, 770, 771, 777, 811, 838, 857, 872, 880, 891, 911, 989, 1008, 1021, 1023], "fdeintegr": 115, "max_w": [117, 119, 1028], "min_w": [117, 119, 1028], "Of": [117, 721, 1000, 1028], "mathemat": [117, 153, 154, 155, 180, 202, 203, 204, 214, 481, 531, 532, 533, 873, 890, 891, 892, 897, 898, 906, 936, 937, 952, 989, 994, 1002, 1003, 1006, 1007, 1011], "w_": [117, 119, 178, 179, 180, 182, 183, 206, 208, 210, 219, 224, 235, 903, 904, 1026, 1028], "sigma_": [117, 886, 1028], "smaller": [117, 130, 167, 913, 994, 1017, 1028], "than": [117, 167, 445, 669, 723, 731, 777, 890, 896, 908, 916, 961, 984, 987, 989, 994, 996, 999, 1002, 1004, 1008, 1015, 1019, 1023, 1028], "min": [117, 445, 503, 740, 906, 918, 919, 1002, 1028], "avoid": [117, 244, 284, 534, 731, 820, 1017, 1025], "allow_self_connect": 117, "neg": [117, 140, 142, 162, 257, 445, 539, 695, 699, 715, 717, 868, 892, 897, 936], "amplitud": [117, 119, 140, 142, 897, 904, 1021], "minimum": [117, 119, 138, 170, 171, 172, 232, 647, 761, 763, 764, 765, 777, 781, 830, 864, 897, 918, 919, 1021], "below": [117, 119, 156, 226, 235, 481, 527, 777, 849, 853, 906, 987, 995, 997, 1000, 1003, 1004, 1006, 1007, 1008, 1010, 1017, 1018, 1021, 1022, 1024, 1027, 1028, 1029], "_w": [117, 119], "delta": [118, 178, 179, 180, 182, 183, 243, 880, 893, 912, 935, 937, 951, 956, 957, 960, 965, 966, 1000, 1005, 1008], "orthogon": [118, 219, 1028], "kernel": [118, 205, 206, 207, 208, 209, 210, 211, 212, 213, 885], "1806": 118, "05393": 118, "4d": 118, "5d": 118, "2015": [120, 202, 203, 204, 224, 806, 937, 940], "quoc": 120, "navdeep": 120, "jaitli": 120, "geoffrei": 120, "hinton": [120, 930], "preprint": [120, 179, 219, 224, 914], "1504": 120, "00941": 120, "superclass": [122, 123, 1003], "fan_in": [124, 125, 126, 127], "truncated_norm": [124, 126, 133, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 224, 234], "in_axi": [124, 125, 126, 127, 132, 133, 134, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 224, 234], "out_axi": [124, 125, 126, 127, 132, 133, 134, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 224, 234], "gain": [128, 235, 1026], "One": [129, 144, 205, 211, 621, 698, 897, 913, 942, 943, 987, 989, 995, 1010, 1017, 1024], "matric": [130, 883, 989, 1031], "squar": [130, 142, 252, 253, 808, 913, 930, 987, 990, 1000, 1021, 1031], "orthonorm": 130, "row": [130, 241, 242, 669, 796, 849, 1027, 1028], "column": [130, 849, 853, 1010], "side": [130, 154, 166, 683, 702, 760, 773, 891], "lower": [131, 152, 527, 697, 717, 849, 883, 1004, 1018], "limit": [131, 156, 445, 503, 897, 987, 989, 1002, 1015, 1020, 1028], "upper": [131, 147, 162, 697, 717, 853], "fan_avg": [133, 134, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 224, 234], "i_and_dur": 136, "bwteen": [136, 139], "isize1": 136, "duration1": 136, "isize2": 136, "duration2": 136, "current_and_dur": [136, 139], "t_start": [137, 138, 140, 142, 143, 989, 1021], "t_end": [137, 138, 140, 142, 143, 1021], "ornstein": [137, 904, 935, 936, 937, 939, 941, 1021], "uhlenbeck": [137, 904, 935, 936, 937, 939, 941, 1021], "drift": [137, 1026], "ou": 137, "deviat": [137, 145, 717, 1030], "wiener": [137, 143, 185, 904, 1021, 1026], "strength": [137, 721, 906, 915, 936, 937, 949, 951, 952, 954, 956, 957, 958, 960, 989, 995, 999, 1000, 1028], "timescal": [137, 806, 935, 936, 937, 939, 941], "c_start": [138, 1021], "c_end": [138, 1021], "gradual": 138, "ramp": [138, 1021], "return_length": [139, 1018, 1021], "section": [139, 469, 984, 989, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1021, 1023, 1024, 1027, 1028, 1029, 1030], "sinusoid": [140, 142, 1021], "sinu": 140, "around": [140, 142, 156, 752, 753, 930, 987, 1000, 1031], "dc": [140, 142, 894, 1019], "sp_time": [141, 897, 1021], "sp_len": [141, 897, 1021], "sp_size": [141, 897, 1021], "seri": [141, 162, 165, 824, 887, 898, 990, 1000, 1021, 1031], "funtion": [141, 1022, 1026, 1028], "400": [141, 984, 987, 989, 998, 1000, 1021, 1029], "mimick": [141, 1021], "oscillatori": [142, 897, 1021], "stimulu": [143, 892, 893, 894, 903, 949, 989, 999, 1000, 1021], "drawn": [143, 665, 669, 697, 698, 702, 703, 721, 723, 1021], "sqrt": [143, 178, 180, 182, 183, 202, 203, 204, 220, 226, 469, 619, 806, 866, 880, 912, 913, 915, 916, 930, 935, 936, 937, 939, 941, 1000, 1014, 1021], "caputo": [144, 145], "d_": [144, 147, 1019], "y_": [144, 152, 156, 157, 159, 162, 164, 165, 166, 170, 178, 179, 180, 182, 183, 242, 939, 1019], "ldot": [144, 147, 157, 226, 880, 886, 915, 1019], "lceil": 144, "rceil": 144, "y_0": [144, 159, 162, 164, 165, 170, 994, 1019], "ai": [144, 179, 983], "arbitrari": [144, 145, 158, 244, 245, 247, 248, 669, 891, 896, 997], "real": [144, 244, 352, 732, 897, 908, 987, 1008, 1019, 1033, 1034], "smallest": [144, 445, 503, 721, 777, 994], "geqslant": 144, "riemann": [144, 723], "liouvil": 144, "b_": [144, 152, 157], "t_": [144, 145, 147, 156, 157, 159, 162, 166, 170, 918, 919, 951, 956, 957, 960, 965, 966, 1005, 1019, 1021, 1026], "dy": [144, 145, 147, 164, 166, 893, 935, 936, 939, 1019, 1020, 1023, 1026], "dz": [144, 145, 147, 1019, 1020, 1023, 1026], "xyz": [144, 147, 1020], "li": [144, 159, 806, 815, 816, 916, 952, 960, 1005, 1026], "changpin": 144, "fanhai": 144, "zeng": 144, "finit": [144, 156], "ordinari": [144, 152, 155, 157, 163, 166, 167, 898, 986, 994, 1002], "34": [144, 158, 910], "2013": [144, 1000], "diethelm": 144, "kai": 144, "nevil": 144, "ford": 144, "freed": 144, "adam": [144, 915, 916, 923, 987, 990, 998, 1000, 1024, 1029], "2004": [144, 890, 900, 901, 935], "31": [144, 822, 987, 998], "prime": [145, 182, 906], "capabl": [145, 889, 987, 1002, 1019], "past": [145, 912, 913, 924], "law": [145, 723], "chi": [145, 886, 906], "approx": [145, 147, 156, 162, 1000], "solut": [145, 147, 154, 155, 156, 159, 162, 164, 185, 186, 888, 897, 956, 991, 994, 1002, 1019, 1020, 1023, 1031], "henc": 145, "markov": [145, 949, 1008], "trace": [145, 534, 891, 996, 1012], "relat": [145, 665, 993], "captur": [145, 989, 993, 999, 1003, 1007], "linearli": 145, "strongli": 145, "xz": 145, "oldham": 145, "spanier": 145, "1974": 145, "calculu": [145, 156, 1020], "theori": [145, 721, 908, 1002], "elsevi": 145, "fed": [146, 1020], "principl": [147, 723, 897, 951, 956, 957, 1020], "gr\u00fcnwald": 147, "letnikov": 147, "t_k": [147, 1026], "l_": 147, "sum": [147, 157, 238, 239, 244, 257, 481, 702, 731, 737, 761, 763, 764, 765, 791, 866, 867, 913, 942, 943, 987, 997, 998, 1000, 1008, 1012, 1017, 1029], "limits_": 147, "lenght": [147, 1019], "recurs": [147, 918, 983, 984], "fode": 147, "express": [147, 180, 502, 503, 893, 894, 897, 951, 957, 996, 1003, 1006, 1012, 1017, 1026], "infin": [147, 777, 891, 1020], "discrit": 147, "impli": [147, 987], "reduc": [147, 198, 199, 200, 201, 202, 203, 204, 206, 208, 210, 224, 228, 229, 230, 231, 232, 445, 558, 721, 730, 731, 732, 761, 763, 764, 765, 893, 894, 897, 903, 906, 999, 1010, 1020, 1024, 1027, 1031], "leq": [147, 238, 811, 815, 816, 1019], "accuraci": [147, 156, 990, 998, 1020, 1022, 1023], "increa": 147, "num_step": [147, 983, 984, 990, 1020], "clement": 147, "l\u00f3pez": 147, "arm": 147, "chaotic": [147, 990, 1019, 1020, 1031, 1033, 1034], "2019": [147, 247, 248, 256, 814, 815, 816, 818, 893, 915, 1020, 1030], "8th": 147, "intern": [147, 202, 203, 204, 224, 235, 284, 806, 815, 816, 896, 915, 924, 935, 992, 1015, 1019], "confer": [147, 224, 806, 811, 815, 816, 915, 992], "modern": 147, "circuit": [147, 815, 892, 940, 989, 1003, 1021], "technologi": [147, 1031], "mocast": 147, "ieee": [147, 445, 811, 814, 815, 816, 818, 890, 900], "tolba": 147, "abdelati": 147, "soliman": 147, "said": [147, 1008, 1019], "madian": 147, "azar": 147, "fpga": 147, "electron": 147, "commun": [147, 233, 888, 894, 896, 988, 990, 991, 993], "2017": [147, 811, 815, 923, 1005], "ste": [150, 176, 189], "var_typ": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 911, 948, 1023], "tol": [152, 153, 154, 155, 161, 168, 169, 554, 911, 1023], "neutral_delai": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 911, 1019], "rung": [152, 153, 154, 155, 156, 157, 161, 164, 165, 166, 167, 168, 169, 171, 172, 173, 183, 185, 186, 1026], "kutta": [152, 153, 154, 155, 156, 157, 161, 164, 165, 166, 167, 168, 169, 171, 172, 173, 183, 185, 186, 1026], "embed": [152, 153, 155, 169, 226], "estim": [152, 154, 159, 162, 164, 166, 169, 202, 203, 204, 914, 915, 930, 989, 1023], "local": [152, 155, 166, 170, 781, 815, 885, 994, 996, 1019, 1023, 1027], "truncat": [152, 166, 211, 212, 213, 717, 1023], "tableau": [152, 157, 159, 162, 164, 165, 166, 170], "y_n": [152, 159, 162, 164, 165, 179, 242, 244], "k_i": 152, "b_i": [152, 206, 208, 210, 224, 234], "butcher": [152, 153, 154, 155, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 186], "cccc": [152, 157, 166, 167, 172, 186, 1019], "a_": [152, 157], "dot": [152, 244, 888, 892, 937, 987, 996, 997, 998, 1000, 1006, 1008, 1021, 1023, 1030], "21": [152, 157, 777, 781, 896, 990, 996, 1005, 1010, 1027], "vdot": [152, 157], "ddot": [152, 157], "s1": [152, 404, 857, 999, 1000], "s2": [152, 999, 1000], "ss": [152, 984], "hline": [152, 153, 154, 155, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 186], "b_1": 152, "b_2": 152, "bogacki": [153, 1023], "shampin": [153, 155, 1023], "przemys\u0142aw": 153, "lawrenc": 153, "stage": [153, 154, 155, 159, 160, 161, 167, 168, 170, 171, 172, 173], "fsal": [153, 155], "per": [153, 155, 167, 220, 222, 226, 481, 777, 898, 912, 965, 966, 989, 996, 1007, 1029], "characterist": [153, 154, 160, 161, 167, 168, 171, 172, 173, 892], "tabl": [153, 154, 155, 157, 160, 161, 167, 168, 169, 171, 172, 173, 185, 186, 723, 1023], "lll": 153, "wikipedia": [153, 154, 155, 156, 162, 169, 243, 445, 721, 891, 892, 897, 903, 952, 960, 983, 1020], "org": [153, 154, 155, 156, 162, 169, 211, 212, 213, 226, 233, 242, 243, 255, 256, 257, 445, 721, 888, 889, 891, 892, 893, 897, 903, 912, 913, 918, 924, 937, 952, 960, 988, 989, 992], "wiki": [153, 154, 155, 156, 162, 169, 243, 445, 721, 891, 892, 897, 903, 952, 960], "e2": [153, 154, 155, 169, 892, 897, 903, 983, 989, 1004, 1018, 1025], "93shampine_method": 153, "formula": [153, 155, 156, 162, 168, 169, 930, 949, 956, 1008], "letter": 153, "321": 153, "325": 153, "doi": [153, 154, 155, 171, 172, 233, 242, 445, 893, 924, 936, 937, 989, 992], "1016": [153, 155, 924, 989], "0893": 153, "9659": 153, "90079": 153, "cash": [154, 1023], "karp": [154, 1023], "professor": 154, "jeff": 154, "imperi": 154, "colleg": 154, "london": [154, 898], "ibm": 154, "scientif": [154, 156, 166, 777], "center": [154, 897, 930, 1017, 1031], "six": [154, 155, 702], "fourth": [154, 155, 166, 167, 172, 1018, 1023], "fifth": [154, 155], "accur": [154, 162, 807, 812, 816, 908, 1022, 1023], "taken": [154, 238, 849, 853, 906, 908, 960, 997, 1022], "stepsiz": [154, 168, 1023], "lllll": [154, 169], "1631": 154, "55296": 154, "175": 154, "575": 154, "13824": 154, "44275": 154, "110592": 154, "253": 154, "4096": 154, "378": 154, "250": [154, 906], "621": 154, "594": 154, "1771": 154, "2825": 154, "27648": 154, "18575": 154, "48384": 154, "13525": 154, "277": 154, "14336": 154, "93karp_method": 154, "acm": [154, 242], "transact": [154, 890, 900], "softwar": 154, "1990": 154, "1145": [154, 242], "79505": 154, "79507": 154, "dormand": [155, 1023], "dopri": 155, "1980": 155, "seven": 155, "next": [155, 162, 164, 166, 233, 445, 877, 984, 988, 990, 996, 999, 1003, 1007, 1008, 1010, 1018, 1021, 1027, 1030, 1034], "chose": 155, "fehlberg": [155, 168, 169, 1023], "reason": [155, 162, 891], "suitabl": [155, 945, 994, 996, 1012, 1030], "practic": [155, 235, 284, 956, 989, 1019, 1031], "extrapol": 155, "hairer": [155, 167], "n\u00f8rsett": [155, 167], "wanner": [155, 167], "llllll": 155, "44": [155, 158, 910, 989, 996, 1010], "56": [155, 894, 989, 996, 1012, 1017, 1018, 1029], "19372": 155, "6561": 155, "25360": 155, "2187": 155, "64448": 155, "729": 155, "9017": 155, "3168": 155, "355": 155, "33": [155, 815, 987, 998], "46732": 155, "5247": 155, "49": [155, 989, 1017], "5103": 155, "18656": 155, "384": 155, "1113": 155, "6784": 155, "5179": 155, "57600": 155, "7571": 155, "16695": 155, "640": 155, "92097": 155, "339200": 155, "2100": [155, 998, 1029], "93prince_method": 155, "famili": [155, 169, 1023], "26": [155, 990, 992, 996, 999], "0771": 155, "050x": 155, "90013": 155, "qquad": [156, 159, 164, 170], "choos": [156, 702, 984, 989, 994, 1015, 1027], "nh": 156, "hf": [156, 159, 162, 206, 208, 210, 224], "increment": [156, 166, 889, 890, 966], "interv": [156, 159, 162, 166, 696, 697, 701, 702, 703, 717, 880, 881, 893, 989, 994, 1019, 1023], "illustr": [156, 897, 983, 989, 990, 996, 997, 998, 1002, 1004, 1007, 1008, 1017, 1019, 1021, 1023, 1027, 1030, 1031, 1033], "unknown": [156, 1012, 1019], "curv": [156, 159, 162, 891, 999], "blue": [156, 897, 916, 1019], "polygon": 156, "red": [156, 162, 897, 1002, 1019, 1028, 1031], "consid": [156, 159, 481, 531, 532, 533, 773, 873, 885, 906, 912, 983, 999, 1028], "taylor": [156, 162, 164, 165, 178, 182, 1000], "expans": [156, 162, 164, 165, 990, 1000], "hy": 156, "t_0": [156, 159, 162, 164, 165, 170, 273, 919, 952, 956, 957, 1019], "quadrat": [156, 243, 816, 890, 908, 937, 990], "third": [156, 160, 165, 171, 173, 989, 1018, 1023], "fundament": [156, 404, 993], "theorem": [156, 994], "procedur": 156, "lack": 156, "popular": [156, 167, 984, 1024], "mainli": [156, 891, 1003], "introductori": 156, "flanneri": [156, 166], "teukolski": [156, 166], "vetterl": [156, 166], "recip": [156, 166], "fortran": [156, 166], "art": [156, 166], "2nd": [156, 166, 952], "ed": [156, 166], "england": [156, 166, 952, 960], "710": 156, "euler_method": 156, "take": [157, 198, 228, 232, 481, 531, 532, 533, 695, 699, 731, 773, 776, 777, 873, 987, 993, 997, 998, 1000, 1002, 1003, 1004, 1008, 1018, 1019, 1023, 1027, 1028, 1030], "page": [157, 773, 986, 992], "put": [157, 220, 284, 777, 1023], "infer": [158, 198, 228, 232, 263, 318, 319, 320, 321, 322, 665, 995, 1002], "constraint": [158, 983, 996, 997], "your": [158, 445, 458, 582, 773, 776, 877, 947, 983, 986, 987, 989, 992, 993, 994, 996, 997, 1000, 1002, 1003, 1004, 1009, 1012, 1017, 1023, 1024, 1025], "ena": [158, 897, 906, 910, 1007, 1010, 1023], "ek": [158, 897, 906, 910, 1007, 1023], "el": [158, 897, 906, 910, 1007, 1023], "gna": [158, 897, 906, 910, 1007, 1010, 1023], "gk": [158, 897, 906, 910, 1007, 1023], "gl": [158, 897, 906, 910, 1007, 1023], "int_h": [158, 1007], "int_n": [158, 1007], "dn": [158, 250, 252, 253, 695, 699, 1003, 1007, 1023], "int_v": [158, 987, 994, 1002, 1007, 1022, 1023], "58": [158, 815, 910, 1017, 1018], "dhdt": [158, 1007, 1023], "dndt": [158, 1007, 1023], "m_alpha": 158, "m_beta": 158, "dvdt": [158, 1007, 1023], "logical_and": [158, 989, 995, 1007], "joint_eq": [158, 1022], "heun": [159, 160, 161, 178, 179, 1023, 1026], "karl": 159, "trapezoid": 159, "tild": 159, "t_n": [159, 162, 164, 165], "cc": [159, 161, 162, 164, 170], "alreadi": [159, 164, 283, 318, 319, 320, 321, 322, 988, 996, 1012, 1031], "big": [159, 164, 625, 860, 915, 1031], "tangent": [159, 162], "slope": [159, 162, 166, 539, 889, 891, 903], "address": [159, 912, 1003], "underestim": 159, "overestim": 159, "ideal": 159, "vertic": [159, 162, 1027], "coordin": 159, "halfwai": 159, "erron": 159, "s\u00fcli": [159, 162], "endr": [159, 162], "mayer": [159, 162], "introduct": [159, 162, 901, 986, 989, 1032], "2003": [159, 162, 889, 891, 900], "ccc": [160, 165, 171, 173, 186], "simplest": [161, 989, 1012, 1019], "why": 162, "know": [162, 283, 773, 994, 1002, 1006, 1019, 1020], "intersect": [162, 999, 1002], "increasingli": 162, "veer": 162, "green": [162, 897, 1019], "segment": [162, 761, 762, 763, 764, 765, 862, 863, 864, 865, 866, 867], "would": [162, 404, 761, 763, 764, 765, 777, 988, 992, 1028], "although": [162, 991, 1014, 1023, 1028], "could": [162, 352, 989, 996], "chord": 162, "diagram": [162, 897, 989, 999, 1003, 1031], "midpoint_method": 162, "seek": [164, 908, 1024], "a_1": 164, "a_2": 164, "tag": [164, 966], "p_2": [164, 1023, 1026], "By": [164, 211, 212, 213, 318, 319, 320, 321, 322, 761, 763, 764, 765, 773, 789, 849, 853, 916, 997, 1002, 1003, 1006, 1010, 1018, 1023, 1025, 1027], "substitut": [164, 910], "f_t": [164, 206, 208, 210, 224, 915], "f_y": [164, 994, 1019], "nonumb": 164, "equiv": 164, "partial": [164, 880, 990, 994, 997, 1002, 1014], "elimin": [164, 913, 1022], "implicit": [164, 995], "try": [164, 481, 951, 987, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1010, 1011, 1012, 1015, 1019, 1020, 1024, 1026, 1030, 1031, 1033, 1034], "df": [164, 668, 687, 714, 715, 1026], "furthermor": [164, 897], "chapra": 164, "raymond": 164, "canal": 164, "engin": [164, 991], "1221": 164, "york": [164, 166, 167, 952, 989], "mcgraw": 164, "hill": 164, "2011": [164, 913, 951, 956, 957], "classic": [165, 166, 168, 169, 893, 894, 949, 983, 984, 989, 991, 1007, 1008, 1017, 1023], "correct": [165, 257, 990, 996, 999, 1014], "up": [165, 534, 906, 916, 951, 956, 957, 987, 990, 1018, 1024, 1027, 1028], "rk": 166, "2k_": 166, "hk_": 166, "present": [166, 169, 893, 916, 999, 1017, 1024], "plu": 166, "again": [166, 996, 1002, 1021, 1023], "lambert": 166, "ch": [166, 891], "wilei": 166, "704": [166, 896], "716": 166, "slight": 167, "variat": [167, 898], "1901": 167, "primari": 167, "advantag": [167, 813, 994, 999, 1015, 1018], "almost": [167, 903, 1002, 1015], "slightli": [167, 897, 1027], "flop": 167, "ernst": [167, 896], "syvert": 167, "paul": [167, 906], "gerhard": 167, "nonstiff": 167, "berlin": [167, 235, 994, 1002], "springer": [167, 235, 952, 992, 994, 1002], "verlag": [167, 185, 186], "isbn": 167, "978": 167, "540": 167, "56670": 167, "rk1": 168, "255": [168, 998, 1019, 1029], "1969": [168, 169], "heat": [168, 169], "transfer": [168, 169, 949], "dub": 169, "novelti": 169, "ident": [169, 963, 1005, 1028], "conjunct": 169, "1932": [169, 723], "2197": 169, "7200": [169, 987], "7296": 169, "439": 169, "3680": 169, "513": 169, "845": 169, "4104": 169, "3544": 169, "2565": 169, "1859": 169, "6656": 169, "12825": 169, "28561": 169, "56430": 169, "1408": 169, "93kutta": 169, "93fehlberg_method": 169, "erwin": 169, "nasa": 169, "technic": [169, 285, 721, 888, 1031], "315": 169, "ntr": 169, "gov": 169, "citat": 169, "19690021375": 169, "download": [169, 988, 989, 998, 1029], "ralston": [170, 171, 172, 1023], "anthoni": [171, 172], "1962": [171, 172], "431": [171, 172, 940], "437": [171, 172], "1090": [171, 172], "s0025": [171, 172], "5718": [171, 172], "0150954": [171, 172], "45573725": 172, "29697761": 172, "15875964": 172, "21810040": 172, "05096516": 172, "83286476": 172, "17476028": 172, "55148066": 172, "20553560": 172, "17118478": 172, "strong": [173, 178, 182, 185, 186, 1023, 1026], "preserv": [173, 995, 1023], "intg_typ": [178, 179, 180, 181, 182, 183, 184, 185, 186, 948, 1026], "wiener_typ": [178, 179, 180, 181, 182, 183, 184, 185, 186, 948, 1026], "ito": [178, 182, 183, 1026], "stratonovich": [178, 180, 182, 183, 1026], "maruyama": 178, "h_": [178, 206, 208, 210, 219, 224, 234], "sim": [178, 180, 182, 183], "mathcal": [178, 180, 182, 183, 812], "converg": [178, 915, 925], "weak": [178, 185, 186, 913, 999], "inaccur": 178, "fact": [178, 989, 1006, 1019], "f_": [178, 180, 182, 183, 1005], "varphi": 179, "erdo\u011fan": 179, "utku": 179, "gabriel": 179, "lord": 179, "1608": [179, 918], "07096": 179, "2016": [179, 255, 257, 816, 897], "milstein": [179, 183, 1026], "g_n": 182, "frist": 183, "thank": 183, "approach": [183, 897, 989, 992, 993, 1017, 1031], "srk": [185, 186, 1026], "p_d": [185, 186], "llll": 185, "r\u00f6\u00dfler": [185, 186], "andrea": [185, 186], "recent": [185, 186, 990, 1030], "statist": [185, 186, 202, 203, 204, 245, 665, 721, 1007], "physica": [185, 186, 886], "hd": [185, 186], "2010": [185, 186, 952], "siam": [185, 186, 890, 936], "922": [185, 186], "952": [185, 186], "activate_fun": 191, "target_shap": [192, 193, 194, 195, 196, 197], "channel_axi": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 228, 229, 230, 231, 232], "down": [192, 193, 194, 195, 196, 197], "spatial": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 207, 209, 211, 212, 213, 226, 228, 229, 230, 231, 232], "skip": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 228, 229, 230, 231, 232], "kernel_s": [198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 229, 230, 231, 232, 998], "stride": [198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 229, 230, 231, 232, 233, 990, 998, 1030], "pad": [198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 229, 230, 231, 232, 241, 242, 404, 989, 1019], "valid": [198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 228, 229, 230, 231, 232, 257, 374, 849, 853, 897, 937, 1007], "inter": [198, 199, 200, 201, 205, 207, 209, 228, 229, 230, 231, 232, 581, 989, 1022, 1028], "signal": [199, 200, 201, 229, 230, 231, 235, 814, 816, 818, 989, 1031], "num_featur": [202, 203, 204], "epsilon": [202, 203, 204, 220, 222, 226, 619, 820, 912, 913, 914, 915, 923, 930, 935, 1029], "momentum": [202, 203, 204, 916, 923, 925, 998, 1024], "bias_initi": [202, 203, 204, 220, 222, 226], "zeroinit": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 224, 226, 234, 235, 889, 890, 891, 892, 893, 896, 898, 900, 901, 902, 908, 940, 1028], "scale_initi": [202, 203, 204, 220, 222, 226], "axis_nam": [202, 203, 204], "axis_index_group": [202, 203, 204], "operatornam": [202, 203, 204, 244], "notion": [202, 203, 204], "hat": [202, 203, 204, 1031], "x_t": [202, 203, 204, 206, 208, 210, 219, 224, 234, 1026], "featur": [202, 203, 204, 205, 207, 209, 214, 220, 222, 233, 534, 781, 888, 983, 991, 993, 998, 1000, 1003, 1006, 1030], "denomin": [202, 203, 204, 220, 222, 226, 913, 916], "running_mean": [202, 203, 204], "running_var": [202, 203, 204], "boolean": [202, 203, 204, 220, 222, 226, 261, 263, 366, 380, 418, 458, 472, 502, 582, 664, 669, 768, 877, 996, 1012], "learnabl": [202, 203, 204, 220, 222, 226], "being": [202, 203, 204, 238, 284, 404, 445, 949, 952, 958, 960, 996, 1019], "map": [202, 203, 204, 773, 888, 942, 943, 944, 945, 983, 995, 1017, 1027], "suppli": [202, 203, 204, 699], "replica": [202, 203, 204], "devic": [202, 203, 204, 358, 397, 534, 773, 944, 945, 988, 991, 1018], "ioff": [202, 203, 204], "sergei": [202, 203, 204], "christian": [202, 203, 204], "szegedi": [202, 203, 204], "acceler": [202, 203, 204, 781, 924, 925, 996, 1007, 1008, 1019], "covari": [202, 203, 204], "ab": [202, 203, 204, 226, 242, 247, 248, 817, 820, 912, 916, 918, 997, 1019, 1020], "1502": [202, 203, 204], "03167": [202, 203, 204], "pag": [202, 203, 204, 817, 820, 916, 923], "height": [203, 204], "in_channel": [205, 206, 207, 208, 209, 210, 211, 212, 213], "out_channel": [205, 206, 207, 208, 209, 210, 211, 212, 213], "lhs_dilat": [205, 206, 207, 208, 209, 210], "rhs_dilat": [205, 206, 207, 208, 209, 210], "w_initi": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 889, 890, 892, 893, 903, 1030, 1033], "xaviernorm": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 224, 234, 984], "18967582": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 224, 234, 235, 661, 897], "1213212632": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 224, 234, 235, 661, 897], "b_initi": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 224, 234, 235, 1030, 1034], "mask": [205, 207, 209, 211, 212, 213, 630, 657, 990], "convolut": [205, 206, 207, 208, 209, 210, 211, 212, 213, 816, 923, 983, 998], "dilat": [205, 207, 209], "transpos": [205, 207, 209, 211, 212, 213, 380, 418], "atrou": [205, 207, 209], "divid": [205, 207, 209, 220, 244, 619, 855, 866, 880, 881, 930, 1011, 1015], "input_shap": [206, 208, 210, 235], "state_initi": [206, 208, 210, 219, 224, 234], "train_stat": [206, 208, 210, 219, 224, 234, 990, 1030], "lstm": [206, 208, 210, 224, 983, 1029, 1030], "cite": [206, 208, 210, 986], "xingjian2015convolut": [206, 208, 210], "core": [206, 208, 210, 219, 224, 234, 349, 508, 773, 988, 993, 1008, 1012, 1017, 1019], "hi": [206, 208, 210, 224], "b_f": [206, 208, 210, 224], "g_t": [206, 208, 210, 224, 915], "tanh": [206, 208, 210, 219, 224, 235, 469, 481, 490, 1030, 1031], "ig": [206, 208, 210, 224], "hg": [206, 208, 210, 224], "b_g": [206, 208, 210, 224], "o_t": [206, 208, 210, 224], "ho": [206, 208, 210, 224, 958], "b_o": [206, 208, 210, 224], "c_t": [206, 208, 210, 224, 930], "h_t": [206, 208, 210, 219, 224, 234], "forget": [206, 208, 210, 224, 1024], "gate": [206, 208, 210, 219, 224, 480, 897, 898, 908, 952, 960, 999, 1000, 1003, 1008], "equal": [206, 208, 210, 219, 222, 224, 234, 458, 527, 664, 667, 679, 715, 777, 849, 853, 1019], "hidden": [206, 208, 210, 219, 224, 234], "jozefowicz2015empir": [206, 208, 210], "union": [206, 208, 210, 211, 212, 213, 334, 335, 336, 337, 349, 482, 506, 512, 531, 558, 561, 635, 868, 876], "kernel_shap": [206, 208, 210, 211, 212, 213], "expand": [206, 208, 210, 989, 1007], "aka": [211, 212, 213], "deconvolut": [211, 212, 213], "output_channel": [211, 212, 213], "output_shap": [211, 212, 213], "www": [211, 212, 213, 255, 257, 445, 889, 892, 903, 930, 992], "xla": [211, 212, 213, 277, 534, 773, 1018], "operation_semant": [211, 212, 213], "conv_convolut": [211, 212, 213], "with_bia": [211, 212, 213], "w_init": [211, 212, 213], "b_init": [211, 212, 213], "data_format": [211, 212, 213], "nwc": 211, "ncw": 211, "typevar": [211, 212, 213, 241, 242], "trainvar": [211, 212, 213, 241, 242, 481, 534, 996, 997, 998, 1030], "nhwc": 212, "nchw": 212, "ndhwc": 213, "ncdhw": 213, "num_in": [214, 219, 224, 233, 234, 984, 990, 1029, 1030, 1031, 1033, 1034], "num_out": [214, 219, 224, 234, 235, 984, 990, 1029, 1030, 1031, 1033, 1034], "subset": [215, 1002, 1004, 1015], "compens": 215, "drop": [215, 761, 763, 764, 765], "surviv": 215, "multipli": [215, 703, 915, 1011, 1015], "circumst": 215, "srivastava": 215, "nitish": 215, "prevent": [215, 256], "overfit": 215, "machin": [215, 224, 245, 445, 503, 913, 930, 983, 986, 993, 995, 997, 1006, 1017, 1024, 1029, 1030, 1031, 1033], "2014": [215, 219, 224, 891, 914], "1929": 215, "1958": 215, "contigu": 216, "dim": [216, 288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 868, 869, 870, 871, 872, 874, 875, 876, 990], "fun": [217, 270, 458, 481, 492, 531, 532, 533, 534, 873], "grucel": 218, "wi_initi": [219, 224, 234], "wh_initi": [219, 224, 234], "chung": 219, "bias": [219, 220, 222, 226, 999, 1030], "z_t": 219, "iz": 219, "b_z": 219, "r_t": 219, "ir": 219, "hr": 219, "b_r": 219, "a_t": 219, "bigodot": 219, "b_a": 219, "backward": [219, 243, 445, 481, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 983], "gru": [219, 534, 983, 998, 1030], "unsupport": 219, "gulcehr": 219, "cho": 219, "bengio": 219, "empir": [219, 224, 989], "1412": [219, 822, 914], "3555": 219, "num_group": 220, "num_channel": [220, 222], "d1": [220, 226, 695, 699, 702, 1030], "d2": [220, 226, 702, 1030], "randn": [220, 226, 1004, 1007, 1025], "placehold": 221, "insensit": 221, "regard": [222, 989, 1003], "group_siz": 222, "lstmcell": [223, 1029], "zaremba": 224, "jozefowicz": 224, "wojciech": 224, "ilya": [224, 915], "sutskev": 224, "oriol": 224, "vinyal": 224, "1409": 224, "2329": 224, "rafal": 224, "explor": [224, 986, 999, 1008, 1016], "architectur": 224, "2342": 224, "2350": 224, "pmlr": 224, "normalized_shap": 226, "elementwise_affin": 226, "1607": 226, "06450": 226, "elementwis": [226, 732], "_shape": 226, "singleton": [226, 868], "nlp": 226, "sentence_length": 226, "embedding_dim": 226, "layer_norm": 226, "imag": [226, 238, 255, 257, 897, 987, 989, 1008], "shown": [226, 256, 937, 999, 1006, 1018, 1022, 1024, 1027, 1028], "nonlinear": [233, 890, 891, 892, 894, 897, 898, 990, 994, 1000, 1002, 1030, 1031], "gauthier": [233, 990], "bollt": 233, "griffith": 233, "nat": [233, 807, 812], "5564": 233, "2021": [233, 807, 812, 990, 992], "1038": [233, 893], "s41467": 233, "021": 233, "25801": 233, "w_i": [234, 1004], "w_h": 234, "b_h": 234, "leaky_r": [235, 1031], "activation_typ": 235, "win_initi": [235, 1031, 1033], "wrec_initi": [235, 1033], "in_connect": [235, 1033], "rec_connect": [235, 1033], "comp_typ": [235, 1033], "spectral_radiu": [235, 1031], "noise_in": 235, "noise_rec": 235, "noise_typ": 235, "wise": [235, 356, 411, 469, 487, 488, 489, 490, 539, 571, 740, 767, 782, 785, 790, 792, 826, 923, 989, 1012], "happen": [235, 926, 957, 1027, 1031], "ff": 235, "fb": [235, 851, 1031], "rec": [235, 1029, 1031], "extern": [235, 580, 582, 889, 890, 891, 892, 893, 896, 897, 898, 900, 908, 983, 987, 989, 1000, 1003, 1007], "internal_st": 235, "themselv": 235, "spectral": 235, "radiu": [235, 243], "luko\u0161evi\u010diu": [235, 1031], "manta": [235, 1031], "guid": [235, 987, 988, 1031], "echo": [235, 986, 990, 1032, 1033], "trick": [235, 1031], "trade": [235, 1023, 1031], "heidelberg": [235, 994, 1002], "2012": [235, 912, 930, 949, 1031], "659": 235, "686": 235, "vanilla": 236, "logist": [237, 254, 996], "ground": [237, 243, 254, 990, 1031], "truth": [237, 243, 254, 990, 1031], "score": [237, 238, 254, 989], "reduct": [238, 244, 250, 252, 253, 732, 820, 906], "criterion": [238, 244], "logsoftmax": 238, "nllloss": 238, "classif": [238, 255, 257, 807, 812, 990, 994, 1002], "particularli": [238, 990, 1027], "unbalanc": 238, "raw": 238, "unnorm": [238, 255, 257, 667], "minibatch": 238, "d_1": 238, "d_2": 238, "d_k": 238, "sum_j": [238, 572, 791], "appropri": [238, 445, 697, 702], "rescal": [238, 572, 791, 1000], "sigmoid": [239, 255, 487, 571, 785, 820, 826], "entropi": [239, 240, 255, 256, 257, 990], "logit": [239, 240, 241, 242, 244, 254, 255, 256, 257, 667, 998], "entri": [239, 240, 257, 261, 669, 730, 731, 732], "softmax": [240, 257, 572, 667, 816, 832], "nclass": 240, "logit_pad": [241, 242], "label_pad": [241, 242], "blank_id": [241, 242], "log_epsilon": [241, 242], "100000": [241, 242], "ctc": [241, 242], "docstr": [241, 283, 284, 285, 508, 527, 849, 853], "ctc_loss_with_forward_prob": 241, "frame": [241, 242], "blank": [241, 242], "logitpad": [241, 242], "labelpad": [241, 242], "repetit": [241, 242], "id": [241, 242, 247, 248, 642, 645, 646, 647, 648, 649, 827, 828, 829, 830, 831, 832, 833, 992, 1015, 1027, 1028], "token": [241, 242], "stabl": [241, 242, 308, 731, 897, 987, 989, 999, 1000, 1002, 1031], "likelihood": 242, "pi_": 242, "pi_t": 242, "grave": 242, "2006": [242, 245, 999], "insert": [242, 777, 868], "represent": [242, 445, 777, 915, 937, 1031], "logarithm": [242, 253, 572, 1027], "dl": 242, "1143844": 242, "1143891": 242, "loss_valu": [242, 481, 531, 532, 533, 873], "logalpha_blank": 242, "logalpha_nonblank": 242, "alpha_b": 242, "alpha_l": 242, "respect": [242, 481, 492, 531, 532, 533, 777, 873, 893, 897, 923, 940, 987, 989, 994, 997, 999, 1007, 1019, 1027, 1031], "huber": [243, 247, 248], "clip": [243, 360, 1024, 1029], "l2_loss": [243, 998, 1029], "mae": 244, "unreduc": 244, "ell": 244, "l_1": 244, "l_n": 244, "top": [244, 984, 1017], "x_n": [244, 1000], "still": [244, 1014, 1023], "divis": 244, "size_averag": 244, "recognit": [245, 811, 815, 923], "bishop": 245, "tibshirani": 245, "christoph": [245, 669], "cosh": [247, 248], "rubric": [247, 256], "openreview": [247, 248], "rkglvsc9ym": [247, 248], "assum": [248, 669, 910, 957, 989, 999, 1008], "d_i": [249, 250, 252, 253], "keep_axi": [249, 250, 252, 253], "d0": [250, 252, 253, 695, 699], "y_true": 253, "y_pred": [253, 998], "multiclass": 254, "n_class": 254, "task": [255, 257, 942, 943, 944, 945, 990, 991, 1032], "mutual": [255, 257], "exclus": [255, 257, 697, 698, 1007], "multilabel": 255, "goodfellow": [255, 257], "deeplearningbook": [255, 257], "content": [255, 257, 708, 992, 1018], "html": [255, 257, 534, 893, 894, 913, 988, 996, 1012], "smooth": [256, 805, 806, 808, 813, 814, 816, 821, 822, 823, 881, 897, 983, 1002, 1020], "favour": 256, "gap": [256, 445, 987], "better": [256, 815, 828, 829, 830, 831, 832, 897, 915, 923, 987, 988, 993, 994, 996, 1002, 1008, 1017, 1023, 1027], "calibr": [256, 989], "overconfid": 256, "m\u00fcller": 256, "1906": 256, "02629": 256, "hot": [256, 257, 621], "greedi": [256, 410], "categori": [256, 1023], "num_categori": 256, "cifar": 257, "truck": 257, "nonbatchingmod": [258, 340, 617, 983, 1004, 1005, 1030], "funasobject": [259, 467, 841, 984], "concat": 260, "before_t0": [261, 266, 273, 1019], "rotat": [261, 263, 265, 271], "Or": [261, 263, 990, 1000, 1008, 1012, 1014, 1021, 1023, 1026], "initial_delay_data": [261, 263, 265, 950, 953, 955, 989], "child_obj": [262, 270, 366, 458, 481, 492, 502, 531, 532, 533, 534, 840, 841, 873, 877, 984, 1029], "delay_target": [263, 265, 266, 273], "delay_len": [263, 265, 266, 273, 1008, 1019], "update_method": [263, 265], "timedelai": [263, 266, 1008, 1019], "neutral": [265, 266, 1019], "lengthdelai": [265, 273, 1008, 1019], "interp_method": [266, 273, 1019], "linear_interp": [266, 273], "tradit": [267, 617, 990, 993, 1030], "value_or_s": [269, 274, 276], "pointer": [269, 274, 276, 1011, 1015, 1027], "preces": 273, "before_to": 273, "_delai": [273, 1019], "longest": 273, "deal": [273, 995], "examepl": 273, "_len": 273, "53": [273, 445, 906, 958, 1002, 1010, 1017, 1018, 1029], "situat": [273, 996, 997, 1008, 1011], "interpol": [273, 608, 610, 627, 658], "round": [273, 1019], "concreat": [276, 1012], "v1": [276, 903, 984, 995, 1012], "cpu_func": 277, "gpu_func": 277, "apply_cpu_func_to_gpu": 277, "batching_transl": 277, "jvp_translat": 277, "transpose_transl": 277, "multiple_result": 277, "inp1_info": 277, "inp2_info": 277, "inp3_info": 277, "out1_info": 277, "out2_info": 277, "concret": [277, 534, 996, 1008], "inp1": 277, "inp2": 277, "inp3": 277, "out1": 277, "out2": 277, "cpu": [277, 478, 773, 776, 781, 944, 945, 983, 984, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "No": [277, 318, 319, 320, 321, 322, 984, 996, 998, 999, 1020, 1021, 1023, 1026], "obj": [283, 284, 386, 404, 492, 508, 510, 531], "runtimeerror": 283, "routin": [283, 284, 508], "typeerror": [283, 526, 997], "warn_on_python": 284, "document": [284, 285, 704, 706, 947, 984, 997, 1027], "typic": [284, 445, 892, 958, 989, 1003, 1008, 1027, 1031], "purpos": [284, 777, 986, 992, 1008, 1015], "edit": 284, "without": [284, 580, 582, 669, 777, 877, 983, 984, 1012, 1030, 1031], "primarili": 284, "itself": [284, 285, 404, 508, 1027], "method1": 284, "docstring1": 284, "method2": 284, "docstring2": 284, "emit": [284, 909], "userwarn": [284, 1008], "pure": [284, 481, 534, 993, 996, 1002], "never": 284, "cannot": [284, 796, 828, 829, 830, 831, 832, 897, 947, 984, 993, 995, 1002, 1014, 1027], "read": [284, 898, 1010, 1025], "appear": [284, 1019], "caller": 284, "grab": 284, "char": [284, 857], "tp_doc": 284, "slot": 284, "violat": 284, "best": [284, 898, 912], "pytypeobject": 284, "pytype_readi": 284, "py_incref": 284, "lose": 284, "releas": [284, 947, 957, 966, 986, 988, 1008, 1027], "add_ufunc_docstr": 285, "ufunc": 285, "new_docstr": 285, "null": 285, "At": [285, 999, 1019, 1024], "alloc": [285, 395, 414], "heap": 285, "mempori": 285, "reclaim": 285, "until": [285, 1012], "even": [285, 669, 777, 891, 912, 1008, 1019, 1020], "repeatedli": [285, 445, 1012, 1014], "throw": [285, 1017], "tensor1": [286, 287], "tensor2": [286, 287], "keepdim": [288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876], "syntax": [288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876, 946, 947, 996, 998, 1017], "keep_dim": [288, 289, 290, 291, 292, 294, 295, 296, 297, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 408, 409, 410, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 482, 483, 484, 485, 486, 491, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 760, 766, 778, 779, 783, 784, 786, 787, 788, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 825, 834, 835, 836, 837, 838, 839, 842, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 869, 870, 871, 872, 874, 875, 876], "rtol": [289, 514], "atol": [289, 514], "08": [289, 514, 893, 914, 915, 916, 987, 1000], "equal_nan": [289, 313, 514], "arr": [295, 296, 315, 386, 390, 423, 510, 630, 692, 708, 756, 835, 850, 854], "func1d": 296, "x1": [304, 342, 344, 345, 371, 399, 400, 417, 445, 452, 454, 455, 456, 457, 468, 483, 484, 491, 499, 537, 538, 540, 541, 542, 573, 574, 588, 593, 594, 598, 616, 620, 641, 741, 746, 803, 855, 994], "x2": [304, 342, 344, 345, 371, 399, 400, 417, 445, 452, 454, 455, 456, 457, 468, 483, 484, 491, 499, 537, 538, 540, 541, 542, 573, 574, 588, 593, 594, 598, 616, 620, 641, 741, 746, 803, 855, 995, 1019], "fill_valu": [309, 447, 465, 466, 618, 778, 834, 858, 859, 876], "decim": [310, 445, 752, 753], "copi": [311, 318, 319, 320, 321, 322, 404, 591, 597, 599, 692, 995], "ndmin": 311, "max_line_width": [312, 315, 317], "suppress_smal": [312, 315, 317], "formatt": [312, 479, 777], "edgeitem": [312, 479, 777], "sign": [312, 445, 479, 697, 702, 777, 790, 813, 823, 857, 994], "floatmod": [312, 777], "suffix": 312, "legaci": [312, 777], "a1": [313, 314, 632, 637, 638, 896], "a2": [313, 314, 632, 637, 638, 896], "ari": [316, 334, 335, 336, 402, 408, 497, 797, 874], "indices_or_sect": [316, 402, 497, 797, 874], "devicearrai": [318, 319, 458, 534, 998, 1011], "array_lik": [318, 319, 320, 321, 322, 597, 664, 665, 679, 692, 715, 721, 723, 780, 789], "match": [318, 319, 320, 321, 322, 352, 404, 508, 995, 1031], "float64": [326, 352, 416, 526, 621, 990, 994, 1019], "arraylik": [337, 558, 561, 876], "liter": [337, 506, 558, 561, 876], "x64": [339, 416, 771, 843, 987, 994, 1002, 1031, 1033, 1034], "complex_": [339, 416, 771, 843], "bool_": [339, 416, 771, 843, 1027], "environ": [339, 771, 773, 781, 843, 983, 990], "cut": [339, 843], "batching_mod": [339, 990, 1030, 1031, 1033, 1034], "batchingmod": [340, 983, 1030], "minlength": 341, "invert": [343, 505, 518], "tracer": [349, 534, 996], "sparsetensor": 352, "indexedslic": 352, "uint8": [352, 404, 697], "uint16": 352, "uint32": [352, 661, 663, 1014, 1015, 1027], "uint64": [352, 404], "int8": [352, 404], "int16": [352, 404, 503], "int32": [352, 404, 503, 506, 526, 534, 796, 993, 998, 1008, 1010, 1011, 1015, 1017, 1024, 1027], "int64": [352, 404, 697, 702], "float16": 352, "float32": [352, 366, 458, 580, 581, 582, 621, 796, 993, 995, 996, 997, 1000, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1024, 1028, 1030], "complex64": 352, "complex128": 352, "bfloat16": 352, "imaginari": 352, "handl": [352, 761, 763, 764, 765, 777, 989, 995, 996], "nan": [352, 599, 777, 820], "inf": [352, 777], "undefin": 352, "destin": [352, 596], "concaten": [353, 364, 1002, 1018, 1027, 1029], "regener": 358, "alwai": [358, 777, 994, 996, 1024, 1025], "a_min": [359, 360], "a_max": [359, 360], "tup": [361, 403, 498, 754, 875], "pred": [366, 580], "true_fun": [366, 580, 1012], "false_fun": [366, 580, 1012], "operand": [366, 409, 410, 458, 502, 877, 984, 1012], "statement": [366, 651], "els": [366, 380, 418, 502, 534, 580, 664, 667, 717, 915, 990, 996, 1000, 1012, 1030], "true_f": [366, 580, 1012], "false_f": [366, 580, 1012], "arguement": [366, 502], "thereof": [366, 458, 492], "conjug": 367, "dst": 372, "src": 372, "rowvar": [373, 378], "ddof": [378, 611, 613, 736, 738, 802, 871], "fweight": 378, "aweight": 378, "axisa": 379, "axisb": 379, "axisc": 379, "nse": [380, 418], "cumprod": 382, "rad2deg": 385, "ndim": [389, 1000], "offset": [392, 404, 460, 842, 849, 853, 883], "axis1": [392, 825, 842], "axis2": [392, 825, 842], "prepend": 393, "append": [393, 911, 1012, 1019, 1023, 1027, 1029, 1031], "bin": [394, 493, 494, 495, 496, 702, 721, 880, 1017], "disabl": [395, 414, 777], "mesg": 397, "linefe": 397, "displai": [397, 702, 721, 723, 777, 884, 987, 1006], "write": [397, 781, 947, 983, 1012, 1023], "flush": 397, "feed": 397, "attributeerror": [397, 1030], "besid": [397, 987, 997, 1002, 1003, 1004, 1007], "stringio": 397, "buf": 397, "getvalu": 397, "homogen": [404, 1010], "struct": 404, "dictionari": [404, 405, 479, 946, 995], "comma": [404, 777], "sticki": 404, "flag": [404, 773, 889, 890, 891, 892, 896, 900, 908], "isalignedstruct": 404, "result_typ": 404, "f1": [404, 877, 996, 997, 1006, 1023], "i2": [404, 896, 897, 983, 989, 999, 1000, 1004, 1018, 1021, 1025], "unsign": [404, 857], "f2": [404, 877, 994, 996, 997, 1006, 1012], "u8": 404, "i4": 404, "protocol": 404, "f8": 404, "s10": 404, "f0": [404, 997], "void": [404, 857], "hello": [404, 534], "i8": 404, "subdivid": 404, "byte": 404, "i1": [404, 896, 897, 999, 1000, 1021], "gender": 404, "ag": 404, "u1": 404, "surnam": 404, "s25": 404, "718281828459045": 407, "to_end": 408, "to_begin": 408, "_use_xeinsum": 409, "subscript": 410, "tempor": [416, 806, 815, 816, 1031], "training_mod": [416, 843, 983, 990, 1029, 1030, 1031, 1033, 1034], "lif1": [416, 1004], "nonbatching_mod": [416, 983], "lif2": 416, "driven": [418, 642, 643, 644, 991, 1008], "val": [444, 504, 630, 726, 1018], "inplac": 444, "occupi": [445, 503, 1002, 1017], "ep": [445, 777, 914, 915, 916, 923, 987, 990, 1000], "64": [445, 906, 998], "754": 445, "22e": 445, "epsneg": 445, "less": [445, 669, 999, 1019], "11e": 445, "iexp": 445, "expon": [445, 893, 894], "portion": 445, "machar": 445, "machep": 445, "largest": [445, 503, 697, 702], "maxexp": 445, "overflow": [445, 731], "minexp": 445, "mantissa": 445, "negep": 445, "nexp": 445, "nmant": 445, "digit": [445, 777], "tini": [445, 1022], "smallest_norm": 445, "kept": [445, 987, 1000], "smallest_subnorm": 445, "iinfo": 445, "adjac": [445, 1027], "nextaft": 445, "toward": [445, 816, 897, 915, 992], "expens": [445, 908, 1023], "impact": [445, 958, 1002], "insid": [445, 937, 1002, 1003, 1006, 1010, 1011, 1031], "actual": [445, 984, 995, 997, 1002, 1003, 1006, 1008, 1012, 1014, 1015, 1020, 1029], "subnorm": 445, "fill": [445, 696, 698, 699, 700, 1030], "significantli": [445, 996], "arithmet": 445, "1109": 445, "ieeestd": 445, "4610935": 445, "denorm": 445, "denormal_numb": 445, "start_dim": 448, "end_dim": 448, "unchang": [448, 1030], "body_fun": [458, 581, 582, 877, 1012], "unrol": [458, 639], "remat": 458, "simpli": [458, 996, 1002, 1007, 1008, 1010, 1022, 1024], "speak": [458, 481, 996, 1002, 1008, 1010], "bodi": [458, 877, 1012, 1023], "labeld": 458, "a_hist": 458, "anoth": [458, 955, 983, 984, 987, 989, 997, 1003, 1004, 1007, 1014, 1015, 1017, 1020, 1023, 1027, 1030], "scan": [458, 760, 1012], "along": [458, 480, 572, 597, 621, 667, 692, 708, 721, 723, 730, 731, 732, 761, 762, 763, 764, 765, 789, 791, 849, 853, 862, 863, 864, 865, 866, 867, 1024, 1027], "body_func": [458, 1018], "primit": [458, 897, 1017, 1018], "stack": [458, 877, 897], "count": [460, 464, 702, 721, 723, 789, 860, 881, 944, 989, 1027], "sep": 464, "to_object": [467, 984, 990, 1014, 1029], "erf": 469, "044715": 469, "exact": [469, 891, 937, 1003, 1023], "stop": [471, 877, 987, 1000], "endpoint": 471, "dftype": [472, 473, 475, 476], "tpu": [478, 776, 988, 998, 1006, 1017, 1020, 1021, 1026], "print_opt": 479, "linewidth": [479, 777, 1019], "suppress": [479, 777], "nanstr": [479, 777], "infstr": [479, 777], "set_printopt": [479, 651], "printopt": [479, 777], "set_string_funct": [479, 777], "grad_var": [481, 492, 531, 532, 533, 873, 984, 996, 1029], "argnum": [481, 492, 531, 532, 533, 873], "holomorph": [481, 492, 531, 532, 533], "allow_int": [481, 532, 533], "reduce_ax": 481, "has_aux": [481, 531, 532, 533, 873, 1029], "return_valu": [481, 492, 531, 532, 533, 873, 984, 996, 1029], "worthi": [481, 995, 997, 1002, 1004, 1008, 1015, 1030], "arg_grad": [481, 531, 532, 533, 873, 997], "var_grad": [481, 531, 532, 533, 873, 997], "aux_data": [481, 531, 532, 533, 873, 997], "__call__": [481, 534, 984, 996, 997, 998, 1012, 1014, 1019, 1024, 1028, 1033], "t1": [481, 995, 1012], "t2": [481, 995, 1011], "f_grad": [481, 996, 997], "grad_tanh": 481, "961043": 481, "inexact": 481, "sequnc": [481, 492, 873], "promis": [481, 492, 531, 532, 533], "trivial": [481, 532, 533], "float0": [481, 532, 533], "implicitli": [481, 1003], "broadcast": [481, 664, 665, 667, 679, 697, 715, 717, 722, 1021], "psum": 481, "auxiliary_data": 481, "gradienttransform": [481, 531, 532, 533, 873, 984], "vararg": 482, "edge_ord": 482, "_sigmoid": [487, 488, 489, 571], "relu6": 487, "silu": [488, 489, 826], "_silu": [488, 489], "_tanh": 490, "arraycollector": [492, 1025], "objecttransform": [492, 984], "look": [502, 989, 995, 1003, 1006, 1027, 1031], "nativ": [502, 697, 993], "least": [502, 989, 1008], "relationship": [502, 995, 999], "len": [502, 643, 644, 650, 669, 780, 898, 1000, 1008, 1027, 1029, 1031], "int_typ": 503, "finfo": [503, 777], "ii16": 503, "32768": 503, "32767": 503, "ii32": 503, "2147483648": 503, "2147483647": 503, "ar1": [505, 512, 778, 779, 858], "ar2": [505, 512, 778, 779, 858], "assume_uniqu": [505, 512, 518, 778, 779], "dtypelik": 506, "maxwidth": 508, "toplevel": 508, "avail": [508, 534, 651, 773, 888, 897, 966, 988, 989, 996, 1007, 1023], "search": [508, 781, 888, 986, 987, 999, 1000, 1002, 1017], "lookfor": 508, "interact": [508, 815, 989, 1031], "prompt": 508, "ipython": [508, 1019], "polyv": 508, "polynomi": [508, 990], "fftpack": 508, "xp": 511, "fp": [511, 1000], "return_indic": 512, "test_el": 518, "arg1": [526, 527, 528, 534], "arg2": [526, 527, 528, 534], "issubclass": [526, 527], "except": [526, 995, 996, 997, 1006, 1011, 1012, 1015, 1019, 1027, 1030], "issubsctyp": 526, "issubdtyp": [526, 528], "issctyp": [526, 528], "typecod": [527, 857], "hierarchi": 527, "lax": [527, 582, 761, 763, 764, 765, 849, 853, 1012, 1019], "builtin": 527, "dtype_lik": 527, "coercibl": 527, "obj2sctyp": 528, "s8": 528, "offici": [531, 532, 533, 924, 1027], "jacrev": [532, 873], "static_argnum": 534, "static_argnam": [534, 996, 1012], "inlin": 534, "keep_unus": 534, "abstracted_ax": 534, "abil": [534, 990], "NOT": 534, "usag": [534, 983, 997, 1002, 1014, 1017, 1018, 1019, 1021], "jitted_func": 534, "var1": 534, "var2": 534, "notebook": [534, 897], "common_gotchas_in_jax": 534, "_src": [534, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 888, 896, 898, 900, 901, 996, 1019, 1020, 1021, 1026, 1027], "concretizationtypeerror": [534, 996, 1012], "encount": [534, 996, 1019], "shapedarrai": [534, 996], "weak_typ": [534, 996, 997, 1012], "mlp": 534, "jit_mlp": 534, "further": [534, 984, 994, 1000, 1002, 1014], "selu": 534, "67": [534, 651, 1017], "lmbda": 534, "static": [534, 761, 763, 764, 765, 880, 1011, 1012, 1015], "comment": [534, 757], "inspect": [534, 989, 997, 1020, 1024], "signatur": 534, "experiment": [534, 891, 1004, 1019], "inherit": [534, 989, 1003, 1006, 1007, 1024, 1027, 1028], "deviceassign": 534, "negative_slop": 539, "_relu": 539, "ge": [539, 820, 994], "uplo": [548, 550], "symmetrize_input": 548, "rcond": [552, 557, 635], "numpy_resid": 552, "ord": 556, "hermitian": [557, 561], "full_matric": 561, "compute_uv": 561, "ind": [562, 656, 849, 853, 1027], "_softmax": 572, "x_i": [572, 791], "x_j": [572, 791], "cond": [580, 877, 1012, 1019], "cond_func": 580, "condict": 580, "judgement": 580, "controlobject": [580, 581, 582], "has_return": 581, "hist_b": 581, "hist_b_plu": 581, "loop_func": [581, 582], "cond_fun": [582, 877, 1012], "while_loop": 582, "easi": [582, 908, 988, 989, 1008, 1010, 1023, 1031, 1033], "shoul": 582, "cond_f": [582, 1012], "body_f": [582, 1012], "amax": 587, "overwrite_input": [590, 606, 608, 610, 627, 658], "xi": [591, 1019], "xy": [591, 1023], "amin": [592, 734], "remaind": [594, 1000], "sort": [597, 761, 763, 764, 765, 828, 829, 830, 831, 832, 1027], "sorted_arrai": 597, "posinf": 599, "neginf": 599, "varianc": [619, 699, 700, 807, 886, 930, 1028], "num_class": 621, "indici": 621, "jax_enable_x64": 621, "bitord": [625, 860], "pad_width": 626, "141592653589793": 628, "condlist": [629, 766], "funclist": 629, "kw": 629, "seq_of_zero": 631, "trim_leading_zero": [634, 637], "deg": 635, "cov": [635, 685], "pre2post": [643, 644], "idnptr": [643, 644, 1008], "pre_num": [643, 644, 1008, 1027], "pre_valu": [645, 646, 647, 648, 649, 650, 1008], "zip": [645, 647, 648, 649], "syn": [650, 827, 828, 829, 830, 831, 832, 833, 906, 910, 949, 951, 952, 954, 956, 957, 958, 960, 962, 963, 964, 965, 966, 989, 1008, 1010, 1023], "syn_val": 650, "syn_i": [650, 827, 828, 830, 831, 833], "pre_i": [650, 1027], "enumer": [650, 827, 828, 830, 831, 833, 898, 995, 1029, 1031], "restor": [651, 995], "old": [651, 1012], "assert_equ": 651, "claus": 651, "opt": [651, 984, 990, 996, 998, 1029], "get_printopt": [651, 777], "promote_integ": [652, 653, 735, 737, 804], "prod": [653, 735, 990], "deg2rad": 660, "track": [661, 663, 989], "seed_or_kei": [663, 670], "prnkei": 663, "nonneg": [664, 667, 679, 717, 721, 761, 763, 764, 765], "draw": [665, 721, 723, 1027], "int_0": [665, 886], "seen": [665, 983, 984, 1008, 1030, 1031], "bayesian": 665, "parameter": [665, 721, 723], "belong": [667, 1027, 1028], "prng": [667, 683, 722], "valueerror": [669, 995, 1012, 1019], "greater": [669, 723, 1022], "randint": [669, 702, 998, 1010, 1015, 1027], "permut": [669, 984, 1029], "sampler": 669, "aa_milne_arr": 669, "pooh": 669, "rabbit": 669, "piglet": 669, "u11": 669, "clone": 670, "dfnum": [673, 688], "dfden": [673, 688], "loc": [676, 678, 680, 689, 722], "ngood": 677, "nbad": 677, "nsampl": 677, "scipi": [683, 721, 722, 723, 1027], "counterpart": [683, 722], "stat": [683, 721, 722, 723], "pval": 684, "choleski": 685, "nonc": [687, 688], "randomli": [692, 699, 961, 1004, 1027], "lam": 693, "port": [695, 699, 701], "matlab": [695, 699, 995, 1025], "random_sampl": [695, 701, 704, 706], "That": [695, 699, 984], "14022471": 695, "96360618": 695, "37601032": 695, "25528411": 695, "49313049": 695, "94909878": 695, "torch": [696, 698, 700], "inclus": [697, 698, 702], "lowest": [697, 698, 702], "highest": [697, 698, 702], "byteord": 697, "random_integ": 697, "omit": [697, 702, 777, 954, 1030], "standard_norm": 699, "default_rng": [699, 703, 721, 723], "quick": [699, 703, 721, 723], "int_lik": 699, "univari": 699, "1923875335537315": 699, "49401501": 699, "00950034": 699, "81814867": 699, "29718677": 699, "39924804": 699, "68456316": 699, "99394529": 699, "84057254": 699, "eas": [701, 1003], "evenli": 702, "five": [702, 995, 999, 1007, 1010, 1033, 1034], "625": 702, "roll": 702, "dice": 702, "dsum": 702, "histogram": [702, 721, 723], "hist": [702, 721], "unif": 703, "47108547995356098": 703, "30220482": 703, "86820401": 703, "1654503": 703, "11659149": 703, "54323428": 703, "99149989": 703, "52338984": 703, "99091858": 703, "79479508": 703, "23204345": 703, "75224494": 703, "sub": [708, 889, 890, 900, 1002], "remain": [708, 897, 966, 1003, 1007, 1028, 1031], "mutablesequ": 708, "mutabl": 708, "student": 715, "spread": 717, "kappa": [719, 880], "weibull_max": 721, "weibull_min": 721, "genextrem": 721, "gumbel": 721, "iii": 721, "asymptot": 721, "extrem": 721, "sev": 721, "rosin": 721, "rammler": 721, "gev": 721, "frechet": 721, "peak": [721, 894], "waloddi": 721, "royal": [721, 898], "stockholm": 721, "1939": 721, "materi": 721, "ingeniorsvetenskapsakademien": 721, "handlingar": 721, "nr": 721, "151": [721, 924], "generalstaben": 721, "litografiska": 721, "anstalt": 721, "forlag": 721, "wide": [721, 983, 1022, 1023], "asm": 721, "1951": 721, "weibull_distribut": 721, "weib": 721, "zeta": 723, "invers": [723, 808, 1031], "rank": [723, 730, 731, 732], "cumul": 723, "american": 723, "linguist": 723, "georg": 723, "kingslei": 723, "who": [723, 892, 903, 1015, 1028], "word": [723, 897, 995], "languag": [723, 781, 993, 1006], "studi": [723, 897, 898, 908, 989, 990, 993, 1002, 1027], "ma": [723, 894, 1003, 1007], "harvard": 723, "univ": 723, "20000": [723, 989, 1002, 1031], "bincount": 723, "semilogi": 723, "grid": [723, 1010, 1033, 1034], "titl": [723, 898, 989, 992, 1000, 1004, 1021, 1031], "multi_index": 725, "input_tensor": [730, 731, 732], "euclidean": 730, "retain": [730, 731, 732], "underflow": 731, "total_repeat_length": 742, "newshap": 743, "new_shap": 744, "strip_zero": 750, "vstack": 754, "allow_pickl": 756, "fix_import": 756, "fname": 757, "fmt": [757, 999, 1002], "18e": 757, "delimit": 757, "newlin": 757, "header": [757, 781], "footer": 757, "kwd": [758, 759], "sorter": 760, "segment_id": [761, 762, 763, 764, 765, 862, 863, 864, 865, 866, 867], "num_seg": [761, 763, 764, 765, 862, 863, 864, 865, 866, 867], "indices_are_sort": [761, 763, 764, 765, 827, 828, 829, 830, 831, 832, 833, 834], "unique_indic": [761, 763, 764, 765, 834], "bucket_s": [761, 763, 764, 765], "segment_sum": [761, 763, 764], "duplic": [761, 763, 764, 765, 987, 989, 994, 995, 999, 1000, 1002, 1025], "bucket": [761, 763, 764, 765], "gatherscattermod": [761, 763, 764, 765], "googl": [762, 862, 863, 864, 865, 866, 867], "cn": [762, 862, 863, 864, 865, 866, 867, 988], "api_doc": [762, 862, 863, 864, 865, 866, 867], "tf": [762, 862, 863, 864, 865, 866, 867], "choicelist": 766, "0507009873554804934193349852946": 767, "6732632423543772848170429916717": 767, "global": [768, 769, 772, 774, 886, 912, 957, 989], "tell": [773, 1002, 1011], "host": [773, 944], "consequ": [773, 897], "hood": 773, "xla_flag": 773, "xla_force_host_platform_device_count": 773, "num_devic": 773, "understand": [773, 908, 983, 990, 994, 997, 999, 1008, 1010, 1015, 1018, 1024, 1027], "incomplet": 773, "strang": 773, "phenomenon": 773, "issu": [773, 1003, 1017], "forum": 773, "summar": 777, "rather": [777, 897, 984, 1002, 1008, 1015], "maxsiz": 777, "summari": [777, 1006, 1027], "charact": [777, 857], "break": [777, 1028], "notat": [777, 1031], "1e3": [777, 898], "whitespac": 777, "individu": [777, 914, 983, 1002, 1004, 1022, 1030], "timedelta": 777, "timedelta64": 777, "datetim": 777, "datetime64": 777, "longfloat": 777, "complexfloat": 777, "longcomplexfloat": 777, "numpystr": 777, "string_": 777, "unicode_": 777, "object_": 777, "onc": [777, 888, 889, 890, 926, 952, 960, 984, 996, 1002, 1004, 1007, 1008, 1012, 1015, 1018], "int_kind": 777, "float_kind": 777, "complex_kind": 777, "str_kind": 777, "maxprec_equ": 777, "fewer": 777, "maxprec": 777, "0d": 777, "colon": 777, "unrecogn": 777, "array2str": 777, "temporarili": 777, "123456789": 777, "1235": 777, "summaris": 777, "9304e": 777, "4409e": 777, "0000e": 777, "00": [777, 1002], "overrid": [777, 1024, 1028], "linspac": [777, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 994, 1000, 1017], "ey": 780, "librari": [781, 988, 998], "variou": [781, 986, 990, 993, 995, 997, 1008, 1010, 1018, 1021, 1025], "resourc": [781, 965, 966, 983, 1008, 1017], "directori": 781, "get_includ": 781, "distutil": 781, "system_info": 781, "mostli": 781, "f77": 781, "library_dir": 781, "include_dir": 781, "src_dir": 781, "define_macro": 781, "preprocessor": 781, "macro": 781, "baselin": 781, "dispatch": [781, 1019], "bla": 781, "lapack": 781, "instal": [781, 986], "wheel": [781, 988], "pip": 781, "openbla": 781, "algebra": [781, 1023], "configur": 781, "gcc": 781, "gfortran": 781, "packag": [781, 988, 989, 1003, 1008, 1017, 1019, 1027, 1029, 1033], "lib": [781, 1008, 1019, 1020, 1021, 1026, 1027], "dylib": 781, "influenc": [781, 987, 1007, 1010, 1028, 1031], "npy_blas_lib": 781, "npy_cblas_lib": 781, "npy_lapack_lib": 781, "npy_blas_ord": 781, "npy_lapack_ord": 781, "cfg": 781, "rememb": 781, "locat": [781, 885, 1002], "appl": 781, "blas_opt_info": 781, "have_cbla": 781, "usr": 781, "element_count": 789, "soft": [790, 823], "_sign": 790, "quicksort": 794, "col": 796, "8331761": 796, "3708692": 796, "510223": 796, "9960836": 796, "37550318": 796, "7370341": 796, "3700516": 796, "7574289": 796, "1124535": 796, "438388": 796, "4346815": 796, "361964": 796, "9171978": 796, "1214957": 796, "90534496": 796, "_util": [805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 888, 898, 900, 901], "vjpcustom": [805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 888, 898, 900, 901], "judg": [805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 823, 824], "get_figur": [805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 890, 897, 898, 903, 949, 951, 952, 954, 956, 957, 960, 989, 1008, 1010], "feedfoward": [805, 806, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824], "erfc": 806, "2x": [806, 817], "nonzero_sign_log": 806, "esser": [806, 816], "appuswami": 806, "merolla": [806, 816], "backpropag": [806, 815, 816], "energi": [806, 816, 820], "neuromorph": [806, 816, 991], "1117": 806, "1125": 806, "wu": [806, 815, 816, 992, 1000], "deng": [806, 815, 816], "spatio": [806, 815, 816], "frontier": [806, 815, 816], "331": [806, 815, 816], "yin": [806, 807, 812, 815], "corradi": [806, 807, 812], "boht\u00e9": [806, 807, 812], "2020": [806, 815, 816, 885, 888, 937, 957], "domain": [807, 812], "mach": [807, 812], "intel": [807, 812], "905": [807, 812], "913": [807, 812, 935], "tail": [811, 817], "leaky_relu": 811, "cai": 811, "zhaowei": 811, "quantiz": 811, "vision": [811, 923, 1029], "cvpr": 811, "5406": 811, "5414": 811, "nonzero": [813, 1000], "nonzerosign": 813, "cost": 813, "piecewis": [814, 815, 816, 898], "neftci": [814, 815, 816, 818, 1030], "mostafa": [814, 815, 816, 818, 1030], "zenk": [814, 816, 818, 1030], "magazin": [814, 816], "51": [814, 816], "cx": 815, "cw": 815, "2w": 815, "grads1": [815, 824], "venkataramanaiah": 815, "hardwar": 815, "biomed": 815, "bioca": 815, "huh": 815, "proceed": [815, 816, 898, 949], "32nd": [815, 816], "1440": 815, "1450": 815, "faster": [815, 916], "aaai": 815, "intellig": 815, "1311": 815, "1318": 815, "gu": 815, "xiao": [815, 880], "pan": [815, 916], "stca": 815, "credit": 815, "feedback": [815, 892, 936, 1031], "ijcai": 815, "1366": 815, "1372": 815, "roi": [815, 816], "chakraborti": 815, "cognit": [815, 891, 991], "iccc": 815, "cheng": 815, "hao": 815, "xu": 815, "lisnn": 815, "robust": [815, 912], "1519": 815, "1525": 815, "kaiser": 815, "decol": 815, "424": 815, "arthur": 816, "nation": [816, 949, 1031], "academi": [816, 949], "41": [816, 996], "11441": 816, "11446": 816, "bellec": [816, 888], "salaj": 816, "subramonei": 816, "795": 816, "805": 816, "panda": 816, "aketi": 816, "scalabl": 816, "residu": 816, "hybrid": 816, "pseudospik": 817, "fat": 817, "herranz": 817, "celotti": 817, "luca": 817, "jean": 817, "rouat": 817, "2202": 817, "00282": 817, "2022": [817, 820, 916, 992], "mag": 818, "61": [818, 989, 1010, 1017, 1018, 1029], "param": [820, 868, 915, 918, 998, 1024], "suetak": 820, "kazuma": 820, "2201": [820, 987], "10879": 820, "slayer": 822, "shrestha": 822, "orchard": 822, "reassign": 822, "1421": 822, "neurip": 822, "squarewav": 824, "fourier": 824, "sin": [824, 994, 997, 1002, 1019], "2i": 824, "t_period": 824, "syn_valu": [827, 828, 829, 830, 831, 832, 833, 1008], "post_i": [827, 828, 830, 831, 833], "guarante": [828, 829, 830, 831, 832], "rep": [839, 893], "funasdynsi": 840, "trainingmod": [844, 983, 1030], "diagon": [849, 853, 883], "tril": 849, "filt": 851, "trim": 851, "triu": 853, "typechar": 857, "doubl": 857, "unicod": 857, "return_index": 859, "return_invers": 859, "return_count": 859, "discont": 869, "283185307179586": [869, 1002], "jacfwd": 873, "difer": 877, "moment": [877, 891, 914, 915, 954, 966, 994, 1002], "coher": [880, 989, 999, 1000], "lag": [880, 1019], "suppos": [880, 983, 1012], "kappa_": 880, "much": [880, 886, 916, 961, 989, 1002, 1004, 1017, 1027, 1028], "cc_index": 880, "jing": 880, "gy\u00f6rgi": 880, "buzs\u00e1ki": 880, "inhibit": [880, 885, 910, 960, 1000, 1018], "hippocamp": [880, 906, 910], "6402": [880, 910], "6413": [880, 910], "brian2": 881, "n_": [881, 1027], "sp": [881, 966], "n_k": [881, 1028], "millisecond": [881, 893, 989], "timeseri": 882, "multidimension": 882, "num_tim": [882, 990, 1018], "num_sampl": [882, 984, 990, 1018, 1031], "connectivity_matrix": 882, "pearson": [883, 887, 989], "triagon": 883, "coef": [883, 1020], "sp_matrix": 884, "raster": [884, 989], "bnp": 884, "spike_typ": 885, "exc": 885, "xmax": 885, "ymax": 885, "va": 885, "lambda_": 885, "sig_i": 885, "sig_": 885, "1500000000000004": 885, "soma": [885, 906], "unitari": 885, "ulfp": 885, "lfp": 885, "subthreshold": [885, 1007], "dendrit": [885, 906], "inhibtiori": 885, "n_exc": 885, "n_inh": 885, "exc_sp": 885, "inh_sp": 885, "inh": 885, "superfici": 885, "surfac": 885, "axon": [885, 989], "veloc": [885, 1024], "sec": [885, 987, 999, 1000], "dev": [885, 996], "telenczuk": 885, "bartosz": 885, "maria": 885, "344": 885, "108871": 885, "come": [886, 1002], "v_i": [886, 940, 1028], "fluctuat": [886, 889, 890, 891, 900], "sigma_v": 886, "langl": 886, "rangle_t": 886, "t_m": 886, "synchroni": 886, "consum": [886, 1017, 1018], "sync_index": 886, "golomb": 886, "4810": 886, "4814": 886, "259": 886, "282": 886, "2007": [886, 891, 892, 903, 957, 1004], "scholarpedia": [886, 889, 892, 903], "1347": 886, "corr": 887, "tau_a": 888, "2000": [888, 897, 908, 984, 987, 990, 998, 1021, 1029], "a_initi": 888, "spike_fun": [888, 896, 898, 900, 901], "eprop": 888, "sfa": 888, "glif2": 888, "white": [888, 990], "glif": 888, "alleninstitut": 888, "formal": [888, 891, 901, 994, 1002, 1007, 1018], "guillaum": 888, "dilemma": 888, "allen": 888, "institut": 888, "databas": 888, "celltyp": 888, "v_t": [889, 891, 915, 924, 925, 987], "delta_t": [889, 891, 987], "tau_w": [889, 890, 903], "adex": 889, "rw": 889, "ri": [889, 891, 896, 901, 902, 908, 987, 1006], "reach": [889, 890, 891, 894, 926, 1007], "rightarrow": [889, 890, 1026, 1031], "action": [889, 891, 897, 908, 965, 966, 1023], "rise": [889, 954, 956, 960], "explan": [889, 890, 891, 892, 896, 898, 900, 903, 908, 936, 937], "recoveri": [889, 890, 892, 893, 894, 900, 903, 965], "resist": [889, 891, 894, 896, 901, 902, 908, 1003], "refractori": [889, 891, 900, 901, 908, 954, 989, 1007, 1025], "t_last_spik": [889, 890, 891, 892, 896, 898, 900, 908, 1007, 1025], "1e7": [889, 890, 891, 892, 896, 898, 900, 908, 989, 1007, 1008], "stamp": [889, 890, 891, 892, 896, 898, 900, 908], "fourcaud": [889, 891], "trocm\u00e9": [889, 891], "nicola": [889, 891], "23": [889, 891, 990, 996, 1004, 1010], "11628": [889, 891], "11640": [889, 891], "articl": [889, 892, 893, 903, 992], "adaptive_exponential_integr": 889, "fire_model": 889, "v_c": [890, 908], "add_subplot": [890, 897, 898, 903, 949, 951, 952, 956, 957, 960, 989, 1008, 1010, 1033, 1034], "ylabel": [890, 891, 903, 989, 990, 1000, 1003, 1010, 1019, 1021, 1023, 1024, 1029, 1031], "critic": [890, 908], "cortic": [890, 900, 960, 989, 1004], "1063": [890, 900], "1070": [890, 900], "touboul": 890, "jonathan": 890, "1045": 890, "1079": 890, "gt": [891, 901, 983, 1007], "ref": [891, 901, 1007], "sharp": 891, "delta_": 891, "vartheta_": 891, "rh": 891, "restart": [891, 918, 919], "rm": [891, 892, 897, 1007, 1023], "suffici": [891, 999, 1027], "gg": 891, "plai": [891, 908, 1034], "role": [891, 908, 1034], "upsw": 891, "rapid": 891, "goe": [891, 1004], "incredibli": [891, 908], "push": [891, 1008], "hansel": 891, "carl": 891, "van": [891, 956, 989], "vreeswijk": [891, 957, 989], "brunel": [891, 957, 960], "confirm": 891, "badel": 891, "promin": 891, "theoret": [891, 892, 1023], "remark": 891, "extract": 891, "evid": [891, 989], "though": [891, 989, 1008, 1011, 1025], "enough": [891, 1017, 1019], "gerstner": 891, "kistler": 891, "naud": 891, "paninski": 891, "laurent": 891, "sandrin": 891, "lefort": 891, "romain": [891, 901], "brett": [891, 901, 957, 1004], "petersen": 891, "wulfram": 891, "magnu": 891, "je": [891, 999, 1000], "richardson": 891, "iv": 891, "reliabl": 891, "predictor": 891, "naturalist": 891, "pyramid": [891, 906, 958], "656": 891, "666": 891, "drive": [891, 897, 999, 1026], "physic": [891, 937], "review": [891, 937, 1004], "021919": 891, "exponential_integr": 891, "vth": [892, 893, 911, 995, 1002], "fitzhugh": [892, 893, 935, 936, 987, 989, 994, 995, 1002, 1006, 1020], "nagumo": [892, 935, 936, 987, 989, 994, 995, 1002, 1006], "1922": 892, "suggest": [892, 912, 992], "1961": 892, "year": [892, 990, 992, 1019], "prototyp": 892, "motiv": 892, "conceptu": 892, "electrochem": 892, "cubic": 892, "regen": 892, "ri_": 892, "relax": [892, 893], "exce": 892, "exhibit": [892, 893], "excurs": 892, "behaviour": [892, 897, 1030, 1031], "elev": 892, "diminish": [892, 930], "de": [892, 898, 958], "deactiv": 892, "impuls": 892, "physiolog": [892, 908, 1003, 1031], "445": 892, "466": 892, "93nagumo_model": 892, "nagumo_model": 892, "775": 893, "0001": [893, 923, 987, 1024], "y_initi": [893, 898, 935, 936, 937, 939, 941, 989], "fh": 893, "1976": 893, "unpublish": 893, "modif": [893, 1015], "fhn": [893, 936, 955, 987, 989, 995, 1006, 1023], "rcl": 893, "magnitud": [893, 923, 1000], "pace": 893, "subsystem": [893, 988], "millivolt": 893, "tonic": 893, "quiescent": 893, "interburst": 893, "becom": [893, 912, 913, 918, 994, 1006, 1011, 1012, 1022, 1023, 1029, 1031], "shorter": 893, "mondal": [893, 894, 1020], "2019_fractional_order_fhr_model": 893, "sharma": 893, "upadhyai": [893, 894], "sci": 893, "15721": 893, "s41598": 893, "019": 893, "52061": 893, "u_initi": [894, 900], "le1": 894, "commensur": 894, "dimensionless": [894, 898], "\u03c9": 894, "leftarrow": [894, 896, 900, 912, 915], "teka": [894, 1020], "2018_fractional_izhikevich_model": 894, "wondimu": 894, "ranjit": 894, "kumar": 894, "argha": 894, "v_th_inf": 896, "v_th_reset": 896, "k1": 896, "r1": [896, 999, 1000, 1002], "r2": [896, 999, 1000, 1002], "i1_initi": 896, "i2_initi": 896, "vth_initi": 896, "custom_deriv": 896, "custom_vjp": 896, "i_j": 896, "k_j": 896, "meet": [896, 984], "IF": 896, "r_j": 896, "a_j": 896, "th_": 896, "reproduc": [896, 900, 1003], "i_1": [896, 999], "i_2": [896, 999], "mihala\u015f": 896, "\u015ftefan": 896, "niebur": 896, "divers": 896, "2009": [896, 952, 956, 960], "718": 896, "teeter": 896, "corinn": 896, "ramakrishnan": 896, "iyer": 896, "vila": 896, "menon": 896, "nathan": 896, "gouwen": 896, "feng": 896, "jim": 896, "berg": 896, "aaron": 896, "szafer": 896, "classifi": [896, 984, 990, 1029], "77": [897, 910, 1003, 1007, 1023], "m_initi": [897, 1010], "h_initi": [897, 910, 1010], "n_initi": [897, 910], "ever": [897, 1007], "concept": [897, 985, 993], "prove": [897, 989], "bio": 897, "electr": [897, 1003], "paramecium": 897, "own": [897, 989, 993, 1003, 1012, 1024, 1025, 1027, 1028, 1030, 1031], "_k": [897, 916, 1007], "alpha_x": [897, 1007], "beta_x": [897, 1007], "alpha_n": [897, 1003, 1007], "beta_n": [897, 1003, 1007], "thought": [897, 952, 960], "difficult": [897, 990], "analyt": [897, 951, 994, 1002, 1003], "cycl": [897, 987, 989, 1002], "proven": 897, "manifold": 897, "care": [897, 987, 995, 997, 1002, 1003, 1018], "hoc": 897, "equilibrium": [897, 903, 1002, 1003], "eigenvalu": [897, 987, 1000, 1031], "likewis": 897, "eigenvector": 897, "reveal": 897, "collaps": 897, "onto": [897, 901, 902, 1004, 1005, 1008, 1018], "off": [897, 1023], "undergo": 897, "hopf": [897, 939], "sudden": 897, "jump": [897, 954, 957, 1003], "canard": 897, "unstabl": [897, 987, 988, 999, 1002], "born": 897, "solid": [897, 1002], "black": [897, 1000], "spike_input": 897, "550": 897, "1030": 897, "1060": 897, "1100": [897, 998, 1029], "1200": [897, 984, 987, 998, 1000, 1029], "900": [897, 998, 1029], "950": 897, "1500": [897, 966, 998, 1029], "xlim": [897, 954, 989], "xtick": 897, "ytick": 897, "msiemen": [897, 910], "learki": [897, 910], "capacit": [897, 903, 906, 910, 1003, 1007], "ufarad": [897, 910], "93huxley_model": 897, "ashwin": 897, "peter": 897, "stephen": 897, "coomb": 897, "rachel": 897, "nick": 897, "92": [897, 1020], "1872325029": [897, 903], "1882570654": [897, 903], "z_initi": 898, "hindmarsh": [898, 1002], "rose": [898, 1002], "experi": [898, 989, 993, 1002, 1007, 1018, 1021], "set_dt": 898, "set_default_odeint": 898, "quiescenc": 898, "irregular_spik": 898, "irregular_burst": 898, "row_num": 898, "col_num": 898, "row_len": 898, "col_len": 898, "xlabel": [898, 989, 990, 1000, 1003, 1019, 1021, 1023, 1024, 1029, 1031], "switch": [898, 949, 1008], "govern": [898, 966, 999, 1002, 1023], "member": 898, "jame": 898, "societi": [898, 924], "1222": 898, "1984": 898, "storac": 898, "marco": 898, "daniel": 898, "linaro": 898, "enno": 898, "lang": 898, "chao": [898, 935, 989, 990, 1020, 1031, 1033, 1034], "interdisciplinari": 898, "033128": 898, "holder": [899, 905], "eugen": 900, "1569": 900, "1572": 900, "variant": [901, 915, 1007], "abbott": 901, "larri": 901, "lapicqu": 901, "1907": 901, "bulletin": 901, "303": 901, "304": [901, 994, 1002], "v_ca": 903, "g_ca": 903, "g_k": 903, "v_leak": 903, "g_leak": 903, "v3": 903, "v4": 903, "morri": [903, 1010], "lecar": [903, 1010], "i_k": [903, 1007, 1023], "cathi": 903, "harold": 903, "1981": [903, 936], "favorit": [903, 989, 1023], "emploi": [903, 993, 1017], "instantan": [903, 952, 957, 960, 1008, 1023], "respond": 903, "invari": 903, "cm2": 903, "uf": 903, "m_inf": 903, "reciproc": 903, "w_inf": 903, "1333": 903, "lecar_model": 903, "93lecar_model": 903, "1084554199": [903, 935, 936, 937, 939, 941], "1127553013": [903, 935, 936, 937, 939, 941], "exp_eul": [904, 1023, 1026], "dx_": 904, "theta": [904, 915, 916, 924, 925, 931, 987], "dw_": 904, "gahp": 906, "gc": [906, 989], "eca": 906, "vs_initi": 906, "vd_initi": 906, "ca_initi": 906, "rinsel": 906, "hodgin": 906, "ca3": 906, "demonstr": [906, 984, 987, 990, 1000, 1017, 1020, 1023, 1029, 1030], "qualit": [906, 1002], "despit": [906, 1018], "ping": 906, "pong": 906, "interplai": 906, "somat": 906, "dr": 906, "app": [906, 910], "sd": 906, "dca": 906, "omega": 906, "omega_": 906, "016": 906, "025": [906, 987, 990, 1000], "072": 906, "975": 906, "00002": 906, "area": [906, 955, 989, 1007], "rhythmogenesi": 906, "39": [906, 1003], "wong": [906, 999], "michelson": 906, "incorpor": 906, "clamp": [906, 1018], "635": 906, "650": 906, "freq": [907, 961, 989, 990], "contrast": [908, 997, 1008], "computation": 908, "qif": 908, "subtleti": 908, "straightforward": [908, 1008], "ubiquit": 908, "latham": 908, "richmond": 908, "nelson": 908, "nirenberg": 908, "808": 908, "827": 908, "need_sort": 909, "character": [909, 1002], "buzsaki": 910, "obei": [910, 999], "balanc": [910, 957, 983, 1018], "passiv": 910, "msec": 910, "hist_v": [911, 1023], "odeintegr": [911, 995, 1002, 1007, 1023], "lr": [912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 984, 987, 990, 996, 1000, 1024, 1029], "train_var": [912, 913, 914, 915, 916, 923, 924, 925, 927, 930, 931, 984, 990, 996, 997, 1024, 1029], "weight_decai": [912, 913, 914, 915, 916, 923, 924, 925, 930, 931], "06": [912, 913, 930, 1000], "drawback": [912, 993, 995], "throughout": 912, "extens": [912, 986, 992], "don": [912, 995], "boldsymbol": [912, 916], "odot": [912, 913], "speech": 912, "learning_r": [912, 998], "zeiler": 912, "1212": [912, 999], "5701": 912, "frequent": [913, 1018], "theta_": [913, 915], "dfrac": 913, "eta": [913, 916, 923, 924, 925, 930, 931, 937], "benefit": [913, 1023], "tune": [913, 989], "leav": [913, 998, 999, 1002], "turn": 913, "shrink": [913, 1028], "eventu": 913, "infinitesim": 913, "acquir": [913, 947], "knowledg": [913, 1002], "duchi": 913, "hazan": 913, "singer": 913, "subgradi": 913, "2121": 913, "2159": 913, "jmlr": 913, "v12": 913, "duchi11a": 913, "beta1": [914, 915, 952, 987, 1000], "beta2": [914, 915, 952, 987, 1000], "999": [914, 915, 987, 994, 1000, 1024], "sgd": [914, 915, 924, 984, 996, 1024], "beta_1": [914, 915, 916, 952], "beta_2": [914, 915, 916, 952], "kingma": 914, "6980": 914, "amsgrad": 915, "behav": [915, 1006], "intend": [915, 993, 996], "110mm": 915, "4pt": 915, "textbf": 915, "theta_0": 915, "hspace": 915, "13mm": 915, "textit": 915, "m_0": [915, 1020], "v_0": 915, "widehat": 915, "ex": 915, "5mm": 915, "10mm": 915, "nabla_": [915, 924, 925, 931], "theta_t": 915, "m_t": 915, "2_t": 915, "bf": [915, 989], "beyond": [915, 993, 1019], "loshchilov": 915, "frank": 915, "hutter": 915, "decoupl": [915, 916], "no_prox": 916, "nesterov": [916, 925, 1024], "mathbf": [916, 1019], "beta_3": 916, "varepsilon": 916, "lambda_k": 916, "10x": 916, "penalti": 916, "color": [916, 989, 1019, 1031], "But": [916, 945, 993, 1012, 1019, 1030], "adamw": 916, "xie": 916, "xingyu": 916, "zhou": 916, "huan": 916, "zhouchen": 916, "lin": [916, 992], "shuicheng": 916, "yan": 916, "2208": 916, "06677": 916, "last_epoch": [917, 918, 919, 920, 921, 922, 926, 928, 929, 932, 933], "t_max": 918, "eta_min": [918, 919], "cosin": [918, 919], "anneal": [918, 919], "eta_": [918, 919, 923], "cur": [918, 919], "epoch": [918, 919, 921, 926, 933, 984, 990, 1029], "sgdr": [918, 919], "eta_t": [918, 919], "neq": 918, "2k": 918, "notic": [918, 926, 1027], "simultan": [918, 926, 947, 952, 960], "sole": 918, "warm": [918, 919, 990], "_sgdr": 918, "03983": 918, "num_call_per_epoch": 919, "t_mult": 919, "last_cal": [919, 920, 922, 928, 929], "rac": 919, "cosleft": 919, "ight": 919, "decay_step": [920, 922, 929, 987, 990, 1000, 1024], "decay_r": [920, 922, 987, 990, 1000, 1024], "staircas": 922, "tc": [923, 995], "techniqu": [923, 1002, 1017], "notabl": [923, 1008], "trust": 923, "yang": 923, "gitman": 923, "bori": 923, "ginsburg": 923, "relev": 924, "dampen": 924, "qian": 924, "s0893": 924, "6080": 924, "98": [924, 949, 1004, 1008, 1020], "00116": 924, "1983": 925, "unconstrain": 925, "convex": 925, "dokladi": 925, "ansssr": 925, "soviet": 925, "docl": 925, "269": 925, "543": [925, 996], "547": 925, "mileston": 926, "final_lr": [929, 1024], "stem": 930, "resolv": 930, "radic": 930, "gist": 930, "maintain": 930, "discount": 930, "root": [930, 994, 1029], "p_t": 930, "addition": 930, "tieleman": 930, "lectur": 930, "coursera": 930, "youtub": 930, "com": [930, 988, 989], "watch": 930, "o3sxac4hxzu": 930, "step_siz": 933, "scalar_or_schedul": 934, "x_ou_mean": [935, 936, 937, 939, 941], "x_ou_sigma": [935, 936, 937, 939, 941, 955, 989], "x_ou_tau": [935, 936, 937, 939, 941], "y_ou_mean": [935, 936, 937, 939, 941], "y_ou_sigma": [935, 936, 937, 939, 941, 955, 989], "y_ou_tau": [935, 936, 937, 939, 941], "x_initi": [935, 936, 937, 939, 941, 989], "kostova": 935, "ravindran": 935, "schonbek": 935, "revisit": 935, "region": [935, 989], "lyapunov": 935, "925": 935, "6886": 936, "v0": [936, 995], "x_0": 936, "plant": 936, "150": [936, 949, 951, 952, 954, 956, 957, 960, 990, 1010], "1137": [936, 1000], "0140012": 936, "macroscop": 937, "lorentzian": 937, "background": [937, 983, 999], "infinit": 937, "few": [937, 994, 1002], "thousand": 937, "lorenzian": 937, "montbri\u00f3": 937, "paz\u00f3": 937, "roxin": 937, "021028": 937, "1103": 937, "physrevx": 937, "gast": 937, "schmidt": 937, "kn\u00f6sche": 937, "1615": 937, "1634": 937, "stuart": 939, "landau": 939, "tau_i": [940, 1019], "066": 940, "beta_i": 940, "351": 940, "noise_": 940, "noise_i": [940, 989], "e_initi": 940, "i_initi": 940, "nu_": 940, "v_e": 940, "chaudhuri": 940, "rishidev": 940, "hierarch": 940, "primat": 940, "cortex": 940, "88": 940, "419": 940, "e_tau": 941, "e_a": [941, 989], "e_theta": [941, 989], "i_tau": 941, "i_a": [941, 989], "i_theta": [941, 989], "wee": [941, 989], "wie": [941, 989], "wei": [941, 989], "wii": [941, 989], "exp_euler_auto": [941, 989], "wilson": [941, 989], "cowan": [941, 989], "num_process": [942, 943, 946, 947, 1017], "num_task": [942, 943], "tqdm_kwarg": [942, 943], "inp": [942, 943], "as_jax": [942, 943, 998, 1017], "__name__": [942, 943, 995, 1012, 1017], "__main__": [942, 943, 946, 947, 995, 1017], "cpu_unordered_parallel": [942, 1017], "thread": [942, 943, 1015, 1017], "unord": [943, 1017], "num_parallel": [944, 945, 1017], "clear_buff": [944, 945, 1017], "all_param": [946, 947, 1017], "multiprocess": [946, 947], "sometim": [947, 997, 1003, 1008, 1012, 1018, 1021, 1022, 1028, 1031], "someth": [947, 1012, 1023], "some_func": 947, "sdeintegr": 948, "comp_method": [949, 951, 952, 954, 956, 957, 958, 959, 960], "42": [949, 998, 1008], "delay_step": [949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 989, 1008, 1010], "t_durat": [949, 958, 1008], "stop_spike_gradi": [949, 951, 952, 954, 956, 957, 958, 960], "receptor": [949, 952, 957, 960, 1005, 1008], "ionotrop": [949, 952, 960], "neurotransmitt": [949, 957, 966, 1008], "immedi": 949, "postsynapt": [949, 952, 960, 989, 1028], "unbind": [949, 958, 964, 1008], "neu1": [949, 951, 952, 954, 956, 957, 960, 983, 1010], "neu2": [949, 951, 952, 954, 956, 957, 960, 983, 1010], "syn1": [949, 951, 952, 954, 956, 957, 960, 983, 1010], "_time": [949, 951, 952, 954, 956, 957, 958, 960], "transmitt": [949, 958], "vijayan": 949, "kopel": 949, "awak": 949, "implic": 949, "109": 949, "18553": 949, "18558": 949, "coupling_var": 950, "var_to_output": [950, 953, 955, 989], "delayed_coupling_var": 950, "cuba": [951, 954, 956, 957, 962, 990, 1005, 1029, 1030], "tau_decai": [951, 956, 960, 989], "sterratt": [951, 956, 957], "bruce": [951, 956, 957], "graham": [951, 956, 957], "gilli": [951, 956, 957], "willshaw": [951, 956, 957], "mgblock": [952, 960, 989, 1005], "alpha1": 952, "alpha2": 952, "t_dur": 952, "glutam": [952, 960], "kainat": [952, 960], "pore": [952, 960], "charg": [952, 960], "magnesium": [952, 960, 964, 1005], "reliev": [952, 960], "depolar": [952, 960], "mg": [952, 960, 964, 1005], "act": [952, 960, 989], "coincid": [952, 960], "detector": [952, 960], "met": [952, 960], "alpha_1": 952, "alpha_2": 952, "inact": 952, "devanei": 952, "furukawa": [952, 960], "hiroyasu": [952, 960], "satind": [952, 960], "singh": [952, 960], "romina": [952, 960], "mancusso": [952, 960], "eric": [952, 960], "gouaux": [952, 960], "subunit": [952, 960], "438": [952, 960], "7065": [952, 960], "2005": [952, 960], "185": [952, 960], "tsien": [952, 960], "medicin": [952, 960], "361": [952, 960], "302": [952, 960], "nmda_receptor": [952, 960], "delay_var": 953, "required_shap": 953, "post_ref_kei": 954, "t_j": 954, "chemic": 954, "presynapt": [954, 989, 1028], "transmiss": [954, 989, 1019], "simplic": [954, 1028], "coupling_var1": 955, "coupling_var2": 955, "delayed_coupling_var1": 955, "cmat": [955, 989], "dmat": [955, 989], "tau_ris": [956, 960, 989], "tau_1": [956, 1019], "tau_2": [956, 1019], "arrayarrai": 956, "roth": 956, "rossum": 956, "neuroscientist": 956, "cleft": [957, 1008], "quickli": [957, 1020], "accordingli": 957, "hakim": 957, "sompolinski": [957, 989], "tian": 957, "062": [958, 964], "57": [958, 964, 1010, 1017], "deni": 958, "par\u00e9": 958, "neocort": 958, "1531": 958, "1547": 958, "decis": [960, 986, 987, 994, 1001, 1002, 1008, 1012], "neuromodul": 960, "domin": [960, 1000], "2001": [960, 987, 1031], "num_input": 961, "poissongroup": [961, 989], "preload": 961, "realiz": [961, 997, 998, 1006, 1010, 1012, 1017, 1021, 1026, 1028], "membrane_var": [962, 964], "cc_mg": [964, 989, 1005], "depress": [965, 966, 1005], "filter": [965, 966, 987, 989, 994, 999, 1000, 1002], "vesicl": 965, "tau_f": 966, "tau_d": 966, "deplet": 966, "readi": [966, 984, 989], "arriv": [966, 1008], "facilit": [966, 995], "inspir": [983, 991, 993, 1019], "__version__": [983, 984, 987, 989, 990, 993, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "brainpyoject": 983, "mind": [983, 1008], "yourmodel": [983, 1017], "contrari": [983, 1030], "firstli": [983, 989, 1027], "lif_for_brainsimul": 983, "is_subclass": [983, 1030], "explicitli": [983, 984, 988, 1014, 1018], "abroad": 983, "overcom": [983, 993], "f_surrog": 983, "size2num": 983, "inv_square_grad": 983, "variable_": 983, "heavisid": 983, "snippet": 983, "einet": [983, 1004, 1018, 1025], "62": [983, 989, 996, 1017], "e2i": [983, 989, 1004, 1018, 1025], "i2i": [983, 989, 1004, 1018, 1025], "net1": 983, "scenario": 983, "ainet": 983, "syn2": 983, "neu3": 983, "net2": [983, 1004], "shared_args_over_tim": 983, "sike": 983, "wonder": [984, 1008, 1010], "vecter": 984, "familiar": [984, 993, 1012], "talk": [984, 995, 996, 997, 1002, 1003, 1005, 1008, 1010, 1011, 1012, 1014, 1021, 1029, 1030], "teach": 984, "correctli": [984, 1002], "n_out": [984, 996], "linear0": 984, "linear1": 984, "supervis": [984, 1031], "paradigm": [984, 989, 999, 1002], "split_kei": [984, 998, 1015, 1029], "x_data": [984, 990], "y_data": [984, 990], "cross_entropy_loss": [984, 990, 998, 1029], "4f": [984, 1029], "6710": 984, "5992": 984, "5332": 984, "1600": [984, 987, 989, 998, 1029], "4720": 984, "4189": 984, "2400": [984, 987, 989], "3736": 984, "2800": [984, 987], "3335": 984, "2972": 984, "3600": [984, 987], "2644": 984, "2346": 984, "essenc": [984, 993, 1004, 1008, 1012, 1023], "varibl": [984, 1012], "question": 984, "attribu": 984, "retriv": [984, 1025], "matter": [984, 994, 995, 996, 1002, 1010, 1017, 1018], "composit": 984, "superlinear": 984, "sl": 984, "superlinear0": 984, "linear2": 984, "register_implicit_var": [984, 995], "register_implicit_nod": [984, 995], "supersuperlinear": 984, "vv": [984, 997], "v_a": 984, "ssl": 984, "supersuperlinear0": 984, "supersuperlinear1": 984, "superlinear3": 984, "superlinear4": 984, "linear5": 984, "linear6": 984, "go": [984, 991, 995, 996, 997, 999, 1002, 1004, 1008, 1010, 1012, 1014, 1015, 1021, 1024, 1029, 1030, 1034], "sequential0": 984, "num_of_var": [984, 994, 996], "loss0": 984, "_var0": 984, "similarli": [984, 989, 994, 1005, 1008, 1010, 1012, 1014, 1025, 1027, 1029], "recers": 984, "num_of_grad_var": 984, "num_of_dyn_var": 984, "direactli": [984, 998], "bdp": [986, 989, 1011], "among": [986, 989, 1008, 1021], "ingredi": 986, "interoper": 986, "brainpi": [987, 988, 989, 990, 994, 999, 1000, 1002, 1003, 1004, 1010, 1013, 1014, 1017, 1018, 1019, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034], "rich": 987, "brief": [987, 1006, 1007, 1027], "detailsand": 987, "expif": 987, "bif": [987, 1002], "i_ext": 987, "plot_bifurc": [987, 989, 994, 999, 1002], "am": [987, 989, 990, 994, 999, 1000, 1002], "closer": 987, "overlap": 987, "disappear": [987, 1002], "insight": [987, 990, 1002], "bifurcationi": 987, "shall": [987, 989], "plot_nullclin": [987, 994, 999, 1002], "plot_vector_field": [987, 994, 999, 1002], "plot_fixed_point": [987, 994, 999, 1000, 1002], "plot_trajectori": [987, 1002], "show_figur": [987, 989, 994, 999, 1002], "fx": [987, 994, 999, 1002], "nullclin": [987, 994, 999, 1002], "fy": [987, 994, 999, 1002], "866": [987, 1002], "2729223248464073": [987, 1002], "5338542697673022": [987, 1002], "violet": 987, "arrow": 987, "junction": 987, "gjcoupledfhn": 987, "gjw": 987, "int_w": [987, 994, 1002], "gj": 987, "attractor": [987, 990, 999, 1033, 1034], "find_fps_with_gd_method": [987, 1000], "num_batch": [987, 990, 1000, 1029], "exponentialdecai": [987, 990, 1000, 1024], "9999": [987, 1000], "bigger": [987, 994, 1019], "filter_loss": [987, 1000], "keep_uniqu": [987, 1000], "29": [987, 990, 996, 1019], "0003104926": 987, "0002287778": 987, "401": [987, 1000], "0001775225": 987, "601": [987, 1000, 1019], "0001401555": 987, "801": [987, 1000], "0001119446": 987, "1001": [987, 1000], "0000904519": 987, "1201": 987, "1400": [987, 998, 1029], "0000738873": 987, "1401": 987, "0000609509": 987, "1601": 987, "1800": [987, 998, 1029], "0000506783": 987, "1801": 987, "0000424477": 987, "2200": [987, 998, 1029], "0000357793": 987, "0000303206": 987, "2401": 987, "2600": 987, "0000258537": 987, "2601": 987, "0000221875": 987, "2801": 987, "3000": [987, 1031], "0000191505": 987, "3001": 987, "0000166231": 987, "3201": 987, "3400": 987, "0000144943": 987, "3401": 987, "0000126804": 987, "3601": 987, "3800": 987, "0000111463": 987, "3801": 987, "0000098656": 987, "4001": 987, "4200": 987, "0000087958": 987, "4201": 987, "4400": 987, "0000078796": 987, "4401": 987, "4600": 987, "0000070861": 987, "4601": [987, 1029], "4800": 987, "0000063897": 987, "4801": 987, "5000": [987, 994, 1002, 1021], "0000057697": 987, "5001": 987, "5200": 987, "0000052188": 987, "5201": 987, "5400": 987, "0000047263": 987, "5401": 987, "5600": 987, "0000042864": 987, "5601": 987, "5800": 987, "0000038972": 987, "5801": 987, "6000": [987, 1021, 1031], "0000035515": 987, "6001": 987, "6200": 987, "0000032389": 987, "6201": 987, "6400": 987, "0000029477": 987, "6401": 987, "6600": 987, "0000026731": 987, "6601": 987, "6800": 987, "0000024145": 987, "6801": 987, "7000": 987, "0000021735": 987, "7001": 987, "0000019521": 987, "7201": [987, 1029], "7400": 987, "0000017512": 987, "7401": 987, "7600": 987, "0000015672": 987, "7601": 987, "7800": [987, 998], "0000013971": 987, "7801": 987, "8000": 987, "0000012403": 987, "8001": 987, "0000010954": 987, "8201": 987, "8400": 987, "0000009603": 987, "0000010000": 987, "815": 987, "fixed_point": [987, 1000], "17757852": 987, "81465053": 987, "59697314": 987, "14331316": 987, "46519033e": 987, "decomposit": [987, 1000], "compute_jacobian": [987, 1000], "good": [987, 989, 1031], "gnu": 988, "osx": 988, "decid": 988, "openi": 988, "git": 988, "pku": 988, "nip": 988, "lab": 988, "ubuntu": 988, "jaxlib": 988, "storag": 988, "googleapi": 988, "jax_releas": 988, "jax_cuda_releas": 988, "upgrad": 988, "nvidia": 988, "cudnn": 988, "prefer": [988, 989], "whl": 988, "blob": 988, "cuda111": 988, "favourit": 988, "attempt": 989, "fine": 989, "examin": [989, 1003], "snn": [989, 990, 1030], "irregular": [989, 1004], "stuctur": 989, "plenti": 989, "handi": 989, "yet": 989, "successfulli": 989, "biult": 989, "brianpi": [989, 995, 1004, 1007], "flexibli": [989, 993], "spking": 989, "statu": 989, "achiev": [989, 1017, 1022], "extraordinari": 989, "assist": 989, "figsiz": [989, 990, 1003, 1020, 1031, 1033, 1034], "subplot": [989, 990, 1019, 1020, 1023, 1031], "conflict": [989, 995], "subpopul": 989, "prevail": 989, "vice": 989, "versa": 989, "i_b": 989, "noise_a": 989, "noise_b": 989, "noise_n": 989, "a2a": 989, "a2b": 989, "a2n": 989, "a2i": 989, "b2a": 989, "b2b": 989, "b2n": 989, "b2i": 989, "n2a": 989, "n2b": 989, "n2n": 989, "n2i": 989, "i2a": 989, "i2b": 989, "i2n": 989, "ia2a": 989, "ib2b": 989, "noise2a": 989, "noise2b": 989, "noise2n": 989, "noise2i": 989, "imit": 989, "pre_stimulus_period": 989, "simuli": 989, "stimulus_period": 989, "delay_period": 989, "total_period": 989, "possion": 989, "poissonstim": 989, "freq_mean": 989, "freq_var": 989, "t_interv": 989, "freq_t_last_chang": 989, "in_interv": 989, "clearer": 989, "accommod": 989, "decisionmak": 989, "mu0": 989, "num_a": 989, "num_b": 989, "num_n": 989, "poisson_freq": 989, "w_po": 989, "w_neg": 989, "g_ext2e_ampa": 989, "g_ext2i_ampa": 989, "g_e2e_ampa": 989, "g_e2i_ampa": 989, "g_e2e_nmda": 989, "g_e2i_nmda": 989, "g_i2e_gabaa": 989, "g_i2i_gabaa": 989, "ampa_par": 989, "gaba_par": 989, "nmda_par": 989, "ib": [989, 999], "n2b_ampa": 989, "n2a_ampa": 989, "n2n_ampa": 989, "n2i_ampa": 989, "n2b_nmda": 989, "n2a_nmda": 989, "n2n_nmda": 989, "n2i_nmda": 989, "b2b_ampa": 989, "b2a_ampa": 989, "b2n_ampa": 989, "b2i_ampa": 989, "b2b_nmda": 989, "b2a_nmda": 989, "b2n_nmda": 989, "b2i_nmda": 989, "a2b_ampa": 989, "a2a_ampa": 989, "a2n_ampa": 989, "a2i_ampa": 989, "a2b_nmda": 989, "a2a_nmda": 989, "a2n_nmda": 989, "a2i_nmda": 989, "connectioni": 989, "sharex": 989, "markers": 989, "ratea": 989, "rateb": 989, "stimuli": 989, "axvlin": 989, "linestyl": [989, 1031], "dash": 989, "444444": 989, "tight_layout": [989, 990, 1019, 1031], "coars": 989, "grain": 989, "realist": 989, "especi": [989, 993, 994, 1002, 1008, 1012, 1024], "neuro": 989, "wc": 989, "wilsoncowanmodel": 989, "digram": 989, "overview": 989, "x_ext": 989, "y_ext": 989, "plot_limit_cycle_by_sim": 989, "40000": 989, "579": 989, "piec": [989, 1012, 1030], "cake": [989, 1030], "verifi": [989, 1002], "connectom": 989, "connectomedb": 989, "human": 989, "hcp": 989, "weiyun": 989, "wkpparki": 989, "npz": [989, 995, 1025], "dti": 989, "tractographi": 989, "parcel": 989, "atla": 989, "aal2": 989, "fiber": 989, "serv": [989, 991], "fmri": 989, "offer": 989, "fairli": 989, "unbias": 989, "eeg": 989, "well": [989, 991, 994, 1002, 1012, 1017, 1023, 1031], "subject": 989, "fc": 989, "rcparam": 989, "cmap": [989, 1028, 1031], "plasma": 989, "subplots_adjust": 989, "wspace": 989, "im": [989, 1028], "imshow": 989, "set_titl": [989, 1019, 1033, 1034], "colorbar": [989, 1028, 1031], "046": 989, "inferno": 989, "sigal_spe": 989, "delay_mat": 989, "fill_diagon": [989, 995], "wholebrainnet": 989, "6e3": 989, "functional_connect": 989, "areal": 989, "matrix_correl": 989, "fcemp": 989, "274": [989, 1019], "5293": 989, "1724": 989, "1726": [989, 1020], "1126": 989, "probabilist": 989, "reverber": 989, "955": 989, "968": 989, "s0896": 989, "6273": 989, "01092": 989, "saw": 990, "revolut": 990, "brainpy_dataset": [990, 1029, 1031, 1033, 1034], "bd": [990, 1029, 1031, 1033, 1034], "readout": [990, 997, 998, 1029, 1031], "ng": 990, "rc": 990, "autoregress": [990, 1030], "nvar": [990, 1030, 1034], "forecast": [990, 1031], "ahead": [990, 1031, 1033, 1034], "lorenzeq": [990, 1033, 1034], "312": 990, "313": 990, "get_subset": [990, 1033, 1034], "hstack": [990, 1033, 1034], "accomplish": [990, 996, 1007, 1008, 1012], "monomi": 990, "ngrc": [990, 1030, 1034], "ridgetrain": [990, 1031], "warmup_data": 990, "x_train": [990, 1029, 1031, 1033, 1034], "y_train": [990, 1029, 1031, 1033, 1034], "x_test": [990, 1031, 1033, 1034], "y_test": [990, 1031, 1033, 1034], "mean_squared_error": [990, 1031, 1033, 1034], "62923347e": 990, "plot_differ": 990, "harder": 990, "to_numpi": 990, "cumsum": [990, 1027], "functool": [990, 994, 1014], "build_inputs_and_target": 990, "noise_t": 990, "train_data": [990, 1029], "state_train": 990, "vanillarnn": 990, "num_hidden": [990, 1031, 1033], "training_environ": [990, 1030], "mse": 990, "l2_reg": 990, "2e": 990, "l2_norm": 990, "99975": 990, "num_epoch": [990, 998, 1029], "2705": 990, "5431804598636681": 990, "1520": 990, "1111436345136279": 990, "0568": 990, "028502398640104478": 990, "0550": 990, "021557415636524625": 990, "2334": 990, "02103036084318231": 990, "0782": 990, "03621808481894387": 990, "2978": 990, "020830462560546617": 990, "1253": 990, "020349677236923852": 990, "0884": 990, "01999626884753028": 990, "0844": 990, "019711449539100128": 990, "0470": 990, "01948684809571936": 990, "0619": 990, "019206390127710953": 990, "018981963159608338": 990, "0411": 990, "01878478481278808": 990, "0648": 990, "018614482841389626": 990, "0385": 990, "01834170918632372": 990, "0266": 990, "0329911761349229": 990, "0184": 990, "019153171678052538": 990, "0218": 990, "01789557062710536": 990, "0252": 990, "017628752447072186": 990, "0711": 990, "01743445520243582": 990, "0872": 990, "017260501677986928": 990, "0393": 990, "017055458142235507": 990, "0689": 990, "01688203255689325": 990, "01670960989088571": 990, "0435": 990, "016556937911224538": 990, "0464": 990, "01639770153466529": 990, "0527": 990, "01624334924290911": 990, "0409": 990, "0160952063182731": 990, "0563": 990, "015950705589392912": 990, "get_hist_metr": [990, 1029], "metric": 990, "exponeneti": 990, "num_rec": [990, 1029, 1030], "inputgroup": [990, 1029, 1030], "leakyintegr": [990, 1005, 1029, 1030], "i2r": [990, 1029, 1030], "kaimingnorm": [990, 1029, 1030], "r2o": [990, 1029, 1030], "get_data": [990, 1014, 1029, 1031], "num_report": 990, "9103": 990, "7219832174729163": 990, "7449": 990, "6696123267371417": 990, "6464": 990, "6491206328569219": 990, "5883": 990, "6156547140069775": 990, "5729": 990, "5987596785982736": 990, "6343": 990, "5862205241316523": 990, "7598": 990, "5607236263572535": 990, "6077": 990, "5457860326436039": 990, "5707": 990, "5264014105800172": 990, "5862": 990, "5146514133005329": 990, "5722": 990, "5068201255745326": 990, "5812": 990, "4896138875231886": 990, "5887": 990, "4799118492626251": 990, "5656": 990, "47088261120558417": 990, "5742": 990, "44685486258925866": 990, "160": 990, "5626": 990, "43019316163725896": 990, "5736": 990, "4131096257548337": 990, "5706": 990, "4043105738199416": 990, "37480466053211214": 990, "5926": 990, "36532990528050513": 990, "gridspec": 990, "plot_voltage_trac": 990, "mem": 990, "spk": 990, "spike_height": 990, "a0": 990, "sharei": 990, "argmax": [990, 998, 1029], "3f": 990, "910": 990, "comprehens": [991, 993], "signific": [992, 994, 1008], "acknowledg": 992, "academ": 992, "public": 992, "si": [992, 1000], "biorxiv": 992, "514024": 992, "1101": 992, "wang2022brainpi": 992, "author": 992, "eloc": 992, "publish": 992, "cold": 992, "spring": 992, "harbor": 992, "laboratori": 992, "url": 992, "earli": 992, "eprint": 992, "jiang": 992, "liu": 992, "zou": 992, "ji": [992, 999, 1000], "decemb": 992, "cham": 992, "inproceed": 992, "wang2021just": 992, "yingqian": 992, "xinyu": 992, "xiaohan": 992, "xiaolong": 992, "zilong": 992, "booktitl": 992, "behind": 993, "execut": [993, 1012], "Such": [993, 1012], "aspect": [993, 1018, 1028], "mutat": 993, "12345": [993, 1027], "47887695": 993, "5548092": 993, "8850775": 993, "30382073": 993, "6007602": 993, "5375282": 993, "5970201": 993, "272839": 993, "233081": 993, "2738593": 993, "oop": 993, "tranform": 993, "neurodynam": [994, 1002, 1023], "blind": [994, 1002], "mislead": [994, 1002], "codimens": [994, 1002], "probe": [994, 1002], "lowdimanalyz": 994, "fitzhughnagumomodel": [994, 1002, 1006], "x_var": 994, "y_var": 994, "f_fx": 994, "f_fy": 994, "jittransform": [994, 996], "int_x": [994, 1002], "int_i": [994, 1002], "f_int_x": 994, "f_int_i": 994, "std_deriv": 994, "inner": [994, 1003], "0x00000268a2599e50": 994, "0x00000268a2599ee0": 994, "x_by_y_in_fx": 994, "y_by_x_in_fx": 994, "accoord": 994, "f_x": 994, "x_by_y_in_fi": 994, "y_by_x_in_fi": 994, "adavantag": 994, "disadvantag": 994, "toolkit": [994, 1002, 1023], "heavili": [994, 1031], "brent": 994, "bfg": [994, 1000], "998": 994, "997": 994, "lie": 994, "tri": 994, "x_1": 994, "x_2": 994, "opposit": 994, "plot_interv": 994, "x0": [994, 1019], "scatter": [994, 1002, 1027, 1031], "edgecolor": [994, 1002], "axhlin": [994, 1002], "overal": [994, 1020], "pro": 994, "anlysi": [994, 1002], "con": 994, "amount": [994, 1031], "pai": [994, 997, 1014, 1025], "attent": [994, 997, 1014, 1025], "minima": 994, "challeg": 994, "aux_rank": [994, 1000], "num_rank": [994, 999, 1002], "thing": [994, 996, 1014], "optimzi": [994, 1024], "favori": 994, "brentq": 994, "316": [994, 1002], "1985": [994, 1002], "lee": [994, 1002], "biologi": [994, 1002, 1005, 1019], "chemistri": [994, 1002], "topic": [994, 1002], "morphogenesi": [994, 1002], "281": [994, 1002], "1987": [994, 1002], "manipul": [995, 1027], "inher": [995, 1015], "uniquenameerror": [995, 1006], "detect": [995, 996, 1002, 1006], "0x0000013bea0ddf10": 995, "oject": 995, "class_nam": 995, "number_of_inst": 995, "fhn0": 995, "fhn1": [995, 1006], "insignific": 995, "fhn2": [995, 1006], "0x13bea0ddb20": 995, "rk44": 995, "explicit_rk": [995, 1022, 1023], "0x13bea1200a0": 995, "complic": [995, 1018], "feedforwardcircuit": 995, "num1": 995, "num2": 995, "fhn3": 995, "fhn4": 995, "feedforwardcircuit0": 995, "0x13bea120dc0": 995, "0x13bea139eb0": 995, "0x13bea120430": 995, "rk45": 995, "0x13bea139a00": 995, "rk46": 995, "0x13bea13bcd0": 995, "subtyp": 995, "node_nam": 995, "field_nam": 995, "fnh": 995, "var_nam": [995, 1002], "var_valu": 995, "perspect": 995, "br": 995, "atest": 995, "all_var": [995, 1025], "sub_nod": 995, "atest0": 995, "0x13bea269d00": 995, "implicit_var": [995, 998, 1024], "implicit_nod": 995, "anothertest": 995, "anothertest0": 995, "0x13bea271670": 995, "0x13bea271b80": 995, "0x13bea249b80": 995, "rk49": 995, "0x13bea271be0": 995, "rk410": 995, "0x13bea25d700": 995, "alter": 995, "great": [995, 997], "export": 995, "hdf5": [995, 1025], "h5": [995, 1025], "pkl": [995, 1025], "pickl": [995, 1025], "cl": 995, "interest": [995, 997, 1018], "travel": 995, "modela": 995, "shareda": 995, "a_shar": 995, "0x13bea5c6f40": 995, "0x13bea5c82e0": 995, "0x13bea5c8550": 995, "catch": 995, "bracket": 995, "occur": [995, 996, 1027], "old_kei": 995, "new_valu": 995, "ciompil": 996, "logisticregress": 996, "num_dim": 996, "num_point": 996, "200000": 996, "timeit": 996, "slowest": 996, "took": 996, "fastest": 996, "000": [996, 1008], "lr_jit": 996, "73": 996, "\u00b5": 996, "logisticregression0": 996, "secret": 996, "update1": 996, "update2": 996, "discuss": 996, "linearnet": 996, "graident": [996, 1024], "train_jit": 996, "5844618": 996, "3233343": 996, "1798474": 996, "1003369": 996, "560716": 996, "69": 996, "313641": 996, "175531": 996, "98268": 996, "55024": 996, "91": 996, "30816": 996, "17261": 996, "9671": 996, "5420": 996, "3040": 996, "1707": 996, "961": 996, "47": 996, "38": 996, "104": 996, "86": 996, "94": [996, 1005, 1008, 1019], "82": 996, "randomest": 996, "1234": [996, 1015, 1027], "dynamicjaxprtrac": 996, "aros": 996, "adadu": [996, 1008, 1019, 1027], "appdata": [996, 1019, 1027], "temp": [996, 1019, 1027], "ipykernel_12696": 996, "2472963545": 996, "f_jit": 996, "worth": 996, "recompil": [996, 1017], "focu": [997, 1002, 1003, 1028], "82967794": 997, "4514538": 997, "7641852": 997, "5760739": 997, "15079832": 997, "67167246": 997, "9960797": 997, "4768778": 997, "5323193": 997, "2970233": 997, "mention": [997, 1018], "regardless": 997, "746162": 997, "linearaux": 997, "aux": 997, "00531888": 997, "15332317": 997, "21680796": 997, "49158132": 997, "94955766": 997, "12618113": 997, "9718574": 997, "943076": 997, "33870268": 997, "9838389": 997, "1802454": 997, "simulaten": 997, "mathbb": [997, 1008], "grad_f1": 997, "grad_f2": 997, "ab2": 997, "grads_of_grad_var": 997, "grads_of_arg": 997, "f3": 997, "grads_of_gv": 997, "grad_of_arg": 997, "f4": 997, "had": 997, "6534876": 997, "41332984": 997, "31663823": 997, "28691947": 997, "6181594": 997, "91058135": 997, "8970927": 997, "8738642": 997, "144211": 997, "9752406": 997, "1096077": 997, "2716377": 997, "94111": 997, "671802": 997, "5042689": 997, "22114661": 997, "8319812": 997, "6531685": 997, "17096272": 997, "3563294": 997, "_x": 997, "_y": 997, "vec": 997, "6209068": 997, "84147096": 997, "5244129": 997, "different": 997, "absl": 998, "fall": [998, 1019, 1020, 1021, 1026], "tf_cpp_min_log_level": [998, 1020, 1021, 1026], "rerun": [998, 1020, 1021, 1026], "info": [998, 1020, 1021, 1026], "optax": 998, "in_ax": 998, "compute_loss": 998, "opt_stat": 998, "apply_upd": 998, "target_param": 998, "assert": [998, 1000, 1015, 1027], "allclos": 998, "flax": 998, "cnn": 998, "linen": 998, "compact": 998, "avg_pool": 998, "window_shap": 998, "tree_util": 998, "tree_flatten": 998, "tree_map": [998, 1000], "tree_unflatten": 998, "tree": 998, "loss_func": 998, "train_dataset": [998, 1029], "5824": 998, "96465": 998, "66015625": 998, "9035": 998, "38974": 998, "89453125": 998, "1075": 998, "31525": 998, "890625": 998, "4062": 998, "23846": 998, "91015625": 998, "3371": 998, "21995": 998, "9296875": 998, "5692": 998, "20885": 998, "92578125": 998, "700": [998, 1005, 1029], "0139": 998, "24748": 998, "90625": 998, "9635": 998, "14563": 998, "953125": 998, "8845": 998, "17017": 998, "94140625": 998, "0537": 998, "09413": 998, "95703125": 998, "3714": 998, "06015": 998, "984375": 998, "6957": 998, "12061": 998, "94921875": 998, "1300": [998, 1029], "8346": 998, "13908": 998, "5252": 998, "10718": 998, "7274": 998, "07869": 998, "96875": 998, "3928": 998, "08295": 998, "1700": [998, 1029], "7718": 998, "07569": 998, "96484375": 998, "9243": 998, "08607": 998, "9609375": 998, "1900": [998, 1029], "2454": 998, "04332": 998, "6231": 998, "02369": 998, "9921875": 998, "03862": 998, "9765625": 998, "5431": 998, "01871": 998, "2300": [998, 1029], "1064": 998, "03255": 998, "assembli": 999, "compet": 999, "r_1": 999, "r_2": 999, "i_i": 999, "r_i": 999, "ai_i": 999, "108": [999, 1000], "s_1": 999, "s_2": 999, "ds_1": 999, "ds_2": 999, "641": [999, 1000], "j_e": 999, "j_i": 999, "b1": [999, 1015], "j_": 999, "mu_1": 999, "b2": [999, 1015], "mu_2": 999, "consant": 999, "2609": 999, "0497": 999, "00052": 999, "unitless": 999, "mu_0": 999, "satur": [999, 1000], "i0": 999, "3255": 999, "jaext": [999, 1000], "int_s1": [999, 1000], "coh": [999, 1000], "int_s2": [999, 1000], "particular": 999, "parmet": 999, "portrait": 999, "absenc": 999, "coord": 999, "x_style": [999, 1002], "y_style": [999, 1002], "5669871605297269": 999, "031891419715715866": 999, "31384492489136057": 999, "05578533347184539": 999, "saddl": [999, 1000, 1002], "1026514458219984": 999, "10265095098914433": 999, "05578534267632889": 999, "3138449310808786": 999, "03189144636489119": 999, "5669870352865433": 999, "symmetr": 999, "reconfigur": 999, "spontan": 999, "vanish": 999, "asymmetr": 999, "658694232143127": 999, "05180719943991283": 999, "42445578984858384": 999, "4244556283731401": 999, "05180717720080605": 999, "6586942355713474": 999, "motion": 999, "basin": 999, "attract": 999, "6679776124172938": 999, "04583022226100692": 999, "3845586078985544": 999, "4536309035289816": 999, "059110032802350894": 999, "6481046659437735": 999, "annihil": 999, "favor": 999, "7092805209334904": 999, "02396366304199462": 999, "30000": 999, "1744": 999, "10000": [999, 1031], "474": 999, "perceptu": 999, "1314": 999, "wish": 1000, "contin": 1000, "find_fps_with_opt_solv": 1000, "exclude_outli": 1000, "cours": 1000, "3725": 1000, "00117": 1000, "ib1": 1000, "3297": 1000, "ib2": 1000, "ds1": 1000, "ds2": 1000, "answer": [1000, 1002], "select_candid": 1000, "with_plot": 1000, "2827633321285248": 1000, "40635180473327637": 1000, "013946513645350933": 1000, "6573889851570129": 1000, "7004518508911133": 1000, "004864312242716551": 1000, "0510474481": 1000, "0046035680": 1000, "0007384720": 1000, "0001601687": 1000, "0000381663": 1000, "0000088441": 1000, "0000100000": 1000, "934": 1000, "28276306": 1000, "40635154": 1000, "7004519": 1000, "00486429": 1000, "01394659": 1000, "6573889": 1000, "yeah": [1000, 1002], "cann1d": 1000, "j0": 1000, "z_min": 1000, "z_max": 1000, "z_rang": 1000, "make_conn": 1000, "irec": 1000, "x_left": 1000, "x_right": 1000, "jxx": 1000, "get_stimulus_by_po": 1000, "po": 1000, "noisi": 1000, "bump": 1000, "629": 1000, "357": 1000, "sklearn": [1000, 1033], "pca": 1000, "fp_pc": 1000, "fit_transform": 1000, "pc": 1000, "visualize_fixed_point": 1000, "decompos": [1000, 1005], "ten": 1000, "_fixed_point": 1000, "num_col": 1000, "sussillo": 1000, "barak": 1000, "box": 1000, "626": 1000, "649": 1000, "kosuk": 1000, "hamaguchi": 1000, "shun": 1000, "ichi": 1000, "amari": 1000, "994": 1000, "1025": 1000, "dive": [1002, 1007, 1010, 1022], "facecolor": 1002, "hollow": 1002, "var_interv": 1002, "424777960769386": 1002, "1415926535897984": 1002, "552755127361717e": 1002, "absolutelti": 1002, "fold": 1002, "collid": 1002, "analys": [1002, 1031], "imposs": 1002, "collis": 1002, "evolut": [1002, 1006, 1007, 1008, 1018], "isoclin": 1002, "defaut": 1002, "plot_method": 1002, "streamplot": 1002, "quiver": 1002, "proviv": 1002, "profound": 1002, "_valu": 1002, "inflect": 1002, "granular": 1002, "r3": 1002, "tip": 1002, "_var": 1002, "_par": 1002, "recogn": 1002, "poinit": 1002, "simulan": 1002, "tol_aux": 1002, "50000": 1002, "4997": 1002, "x_r": 1002, "int_z": 1002, "1156": 1002, "simplifi": 1003, "capacitor": 1003, "conductor": 1003, "batteri": 1003, "mayb": 1003, "explic": 1003, "volum": 1003, "predefin": 1003, "crucial": [1003, 1028], "r_": 1003, "categor": 1003, "fortun": 1003, "lot": 1003, "initialz": 1003, "assembl": 1003, "scratch": 1003, "hoxlei": 1003, "cuurent": 1003, "surprisingli": 1003, "contruct": 1003, "neu": [1003, 1007, 1010], "straightforwardli": 1003, "predifin": 1003, "click": [1003, 1027], "explain": [1004, 1019], "comfirm": 1004, "biggest": 1004, "rudolph": 1004, "carneval": 1004, "hine": 1004, "beeman": 1004, "bower": 1004, "strategi": 1004, "349": 1004, "par": [1004, 1017, 1018, 1025], "w_e": 1004, "e_par": 1004, "i_par": 1004, "einet0": 1004, "exponential0": [1004, 1005], "lif0": 1004, "exponential1": [1004, 1005], "exponential2": 1004, "exponential3": 1004, "coba2": 1004, "coba4": 1004, "coba3": 1004, "coba5": 1004, "exc_group": 1004, "inh_group": 1004, "lif4": 1004, "lif5": 1004, "overwrit": [1004, 1027], "yourself": 1004, "einetv2": 1004, "update_local_delai": 1004, "ensur": [1004, 1015, 1031], "upon": 1004, "fore": 1005, "dg": [1005, 1008, 1026], "dyanmic": 1005, "synpat": 1005, "spiketimegroup": 1005, "spiketimegroup0": 1005, "leakyintegrator0": 1005, "nmda0": 1005, "ambiti": 1005, "guoshi": 1005, "craig": 1005, "henriquez": 1005, "flavio": 1005, "fr\u00f6hlich": 1005, "distinct": [1005, 1026], "entrain": 1005, "plo": 1005, "e1005797": 1005, "6e": 1005, "ampa0": 1005, "3e": 1005, "gabaa0": 1005, "nmda1": 1005, "todo": 1005, "fitzhughnagumomodel0": 1006, "fitzhughnagumomodel1": 1006, "fitzhughnagumomodel2": 1006, "fitzhughnagumomodel3": 1006, "normalmod": 1006, "acess": 1006, "compli": 1006, "enjoi": 1006, "fhn_net": 1006, "492591": 1006, "9365357": 1006, "network0": 1006, "discontinu": 1007, "neurogroup": 1007, "elabor": [1007, 1027], "e_l": 1007, "_l": 1007, "int_m": 1007, "i_na": [1007, 1023], "i_leak": [1007, 1023], "dmdt": [1007, 1023], "complier": 1007, "discontin": 1007, "reaet": 1007, "t_ref": 1007, "logical_or": 1007, "crrent": 1007, "spend": 1008, "aris": 1008, "afterward": [1008, 1018], "abund": 1008, "target_data_to_delai": 1008, "example_delai": 1008, "example_conn": 1008, "pre_siz": [1008, 1027, 1028], "post_siz": [1008, 1027, 1028], "establish": [1008, 1027], "helper": 1008, "highlight": 1008, "baseexpsyn": 1008, "check_pre_attr": 1008, "check_post_attr": 1008, "pre_spik": [1008, 1025], "baseampasyn": 1008, "spike_arrival_tim": 1008, "tt": 1008, "show_syn_model": 1008, "date": 1008, "_pre": 1008, "_post": 1008, "ouput": 1008, "superpos": 1008, "expconnmat": 1008, "pull": 1008, "delayed_spik": 1008, "post_sp": 1008, "ampaconnmat": 1008, "invalid": [1008, 1015], "g_post": 1008, "anymor": 1008, "fashion": 1008, "expall2al": 1008, "ampaall2al": 1008, "realli": 1008, "huge": [1008, 1018, 1023], "wast": [1008, 1028], "ineffici": 1008, "useless": 1008, "expspars": 1008, "miniconda3": [1008, 1019, 1027], "egg": [1008, 1019], "pre_syn_post": 1008, "event_op": 1008, "event_csr_matvec": 1008, "central": [1008, 1027], "ampaspars": 1008, "num_syn": 1008, "arrival_tim": 1008, "hope": 1008, "debug": 1010, "70759": 1010, "13152": 1010, "63894": 1010, "90401": 1010, "41827": 1010, "instruct": [1010, 1012, 1017, 1028], "047512": 1010, "037655": 1010, "74895": 1010, "8206": 1010, "256607": 1010, "55422": 1010, "628696": 1010, "0226": 1010, "7881355": 1010, "40693295": 1010, "7243513": 1010, "47316658": 1010, "15884387": 1010, "6759169": 1010, "5255966": 1010, "13250259": 1010, "49933627": 1010, "9400071": 1010, "56140935": 1010, "7105977": 1010, "89582247": 1010, "63783807": 1010, "97180253": 1010, "2137514": 1010, "famou": [1010, 1019, 1026], "morrislecar": 1010, "proper": 1010, "briefli": 1011, "wrong": [1011, 1012, 1023], "graft": 1011, "floor": [1011, 1015], "modulo": [1011, 1015], "xor": [1011, 1015], "elif": 1012, "oddeven": 1012, "type_": 1012, "arbitrarili": 1012, "oddevencauseerror": 1012, "wrong_model": 1012, "__class__": 1012, "jit_f": 1012, "static_k1": 1012, "static_k2": 1012, "comparison": 1012, "rewrit": [1012, 1026], "oddevenwher": 1012, "oddevencond": 1012, "pred1": 1012, "pred2": 1012, "func1": 1012, "func2": 1012, "funcn": 1012, "loopsimpl": 1012, "seq": [1012, 1028], "measure_tim": 1012, "return_r": 1012, "501": 1012, "74664": 1012, "9443738460540771": 1012, "1003": 1012, "4931": 1012, "unbear": 1012, "fori_loop": 1012, "for_loop_funct": 1012, "hist_of_out_var": 1012, "loopstruct": 1012, "fist": 1012, "anyth": 1012, "counter": [1012, 1029], "seamlessli": 1014, "7222161": 1014, "2043277": 1014, "59838593": 1014, "255252": 1014, "14954388": 1014, "05150986": 1014, "214692": 1014, "03857851": 1014, "81150043": 1014, "4669956": 1014, "60626677": 1014, "69464463": 1014, "81361761": 1014, "1583908": 1014, "50378113": 1014, "17677626": 1014, "7507633": 1014, "75699064": 1014, "33320096": 1014, "38958635": 1014, "3014124236": 1014, "2009892527": 1014, "873106783": 1014, "4065854088": 1014, "3526960574": 1014, "230845945": 1014, "80141556": 1014, "19009137": 1014, "get_data_v2": 1014, "38541543": 1014, "5843446": 1014, "85543776": 1014, "36957836": 1014, "get_data_v3": 1014, "31096482": 1014, "7970413": 1014, "26830554": 1014, "15947664": 1014, "myob": 1014, "ob": 1014, "3595979": 1014, "3462192": 1014, "7149456": 1014, "4283268": 1014, "1362855": 1014, "18378317": 1014, "26401126": 1014, "6798397": 1014, "8422355": 1014, "0795223": 1014, "41247413": 1014, "955116": 1014, "6234829": 1014, "44811824": 1014, "03835859": 1014, "5203867": 1014, "02713326": 1014, "6490041": 1014, "9861029": 1014, "36676335": 1014, "31499916": 1014, "526808": 1014, "7946268": 1014, "86713606": 1014, "7008592": 1014, "05957834": 1014, "5677447": 1014, "04765594": 1014, "574145": 1014, "11830498": 1014, "22663854": 1014, "8517947": 1014, "3546717": 1014, "2332705": 1014, "79247886": 1014, "9352005": 1014, "70490587": 1015, "9825947": 1015, "79977": 1015, "21864283": 1015, "70959914": 1015, "7049059": 1015, "2186428": 1015, "7095991": 1015, "49689227": 1015, "9654924": 1015, "63963205": 1015, "04780469": 1015, "5035309": 1015, "meant": 1015, "39813817": 1015, "2902342": 1015, "0428251": 1015, "7002579": 1015, "47972953": 1015, "2113592192": 1015, "1902136347": 1015, "1076515368": 1015, "3893328283": 1015, "3028232624": 1015, "826525938": 1015, "4198471980": 1015, "1111166693": 1015, "1457783592": 1015, "2493283834": 1015, "3244149147": 1015, "2659778815": 1015, "2548793527": 1015, "3057026599": 1015, "874320145": 1015, "4142002431": 1015, "3368470122": 1015, "3462971882": 1015, "1756854521": 1015, "1662729797": 1015, "1682297581": 1015, "3751629511": 1015, "654321": 1015, "id_of_a": 1015, "id_of_data": 1015, "2781947736704": 1015, "2781965742144": 1015, "2781965752128": 1015, "seriou": 1015, "2781946941520": 1015, "old_id": 1015, "check_no_chang": 1015, "new_v": 1015, "concurr": 1017, "cpu_ordered_parallel": 1017, "pseudocod": 1017, "run_model": 1017, "jupyt": 1017, "hh_spike_num": 1017, "bg_current": 1017, "reimport": 1017, "hh_spike_num2": 1017, "think": 1017, "worker": 1017, "manner": 1017, "jax_vectorize_map": 1017, "hh_spike_num3": 1017, "hpc": 1017, "supercomput": 1017, "deliv": 1017, "simd": 1017, "analogi": 1017, "jax_parallelize_map": 1017, "virtual": 1017, "job": 1017, "slurm": 1017, "script": 1017, "submit": 1017, "bash": 1017, "sbatch": 1017, "your_script": 1017, "instance_of_dynamical_system": 1018, "inputs_for_target_dynamicalsystem": 1018, "interested_variables_to_monitor": 1018, "dynamical_changed_vari": 1018, "enable_jit_or_not": 1018, "report_the_running_progress": 1018, "transform_into_numpy_ndarrai": 1018, "tdt": 1018, "simulation_time_length": 1018, "input_data": 1018, "whether_reset_the_model_st": 1018, "shared_arg": 1018, "shared_arguments_across_different_lay": 1018, "eval_tim": 1018, "evaluate_the_running_tim": 1018, "inputs_are_batch": 1018, "outstand": 1018, "runner1": 1018, "ei": 1018, "31656": 1018, "02285": 1018, "898117": 1018, "487587": 1018, "33741": 1018, "158283": 1018, "variable_nam": 1018, "ram": 1018, "runner2": 1018, "runner3": 1018, "runner4": 1018, "spite": 1018, "key_nam": 1018, "runner5": 1018, "mimic": [1018, 1021], "transcrani": 1018, "magnet": 1018, "tm": 1018, "patch": 1018, "type1": 1018, "op1": 1018, "type2": 1018, "op2": 1018, "runner6": 1018, "section_input": 1018, "runner7": 1018, "set_input": 1018, "runner8": 1018, "econom": 1019, "tau_k": [1019, 1026], "tau_j": 1019, "neutimedelai": 1019, "neulendelai": 1019, "histor": 1019, "request": [1019, 1028], "host_callback": 1019, "_callbackwrapp": 1019, "0x0000016db6f87280": 1019, "threw": 1019, "cpucallback": 1019, "delayvar": 1019, "_check_time1": 1019, "721": 1019, "1295": 1019, "_outside_call_run_callback": 1019, "1164": 1019, "wrapped_callback": 1019, "mlir": 1019, "1765": 1019, "_wrapped_callback": 1019, "1790": 1019, "pxla": 1019, "2136": 1019, "profil": 1019, "314": 1019, "wrapper": 1019, "apply_primit": 1019, "712": 1019, "process_primit": 1019, "332": 1019, "bind_with_trac": 1019, "2449": 1019, "control_flow": 1019, "780": 1019, "cond_bind": 1019, "_cond": 1019, "traceback_util": 1019, "reraise_with_filtered_traceback": 1019, "jit_error_check": 1019, "ipykernel_35084": 1019, "1658324099": 1019, "interactiveshel": 1019, "3398": 1019, "run_cod": 1019, "3338": 1019, "run_ast_nod": 1019, "3135": 1019, "run_cell_async": 1019, "async_help": 1019, "_pseudo_sync_runn": 1019, "2936": 1019, "_run_cel": 1019, "2881": 1019, "run_cel": 1019, "ipykernel": 1019, "zmqshell": 1019, "528": 1019, "ipkernel": 1019, "383": 1019, "do_execut": 1019, "kernelbas": 1019, "730": 1019, "execute_request": 1019, "406": 1019, "dispatch_shel": 1019, "499": 1019, "process_on": 1019, "510": 1019, "dispatch_queu": 1019, "asyncio": 1019, "_run": 1019, "base_ev": 1019, "1905": 1019, "_run_onc": 1019, "run_forev": 1019, "tornado": 1019, "kernelapp": 1019, "traitlet": 1019, "config": 1019, "846": 1019, "launch_inst": 1019, "ipykernel_launch": 1019, "runpi": 1019, "_run_cod": 1019, "_run_module_as_main": 1019, "delay_odeint": 1019, "cas3": 1019, "xdelai": 1019, "case1_delai": 1019, "case2_delai": 1019, "case3_delai": 1019, "case1": 1019, "case2": 1019, "case3": 1019, "rect": 1019, "suptitl": 1019, "ihf": 1019, "delay1": 1019, "delay2": 1019, "delay3": 1019, "delay4": 1019, "case4": 1019, "y_1": 1019, "y_2": 1019, "ydelai": 1019, "ihf_x": 1019, "ihf_i": 1019, "2y": 1019, "2y_1": 1019, "kwon": 1019, "freedom": 1019, "life": 1019, "74": 1019, "00001": 1019, "009": 1019, "zdelai": 1019, "inhibitor": 1019, "molecul": 1019, "0005": 1019, "db": 1019, "dd": 1019, "abcd": 1019, "disturb": 1019, "1416": 1019, "ettor": 1019, "messina": 1019, "qingyu": 1019, "qu": 1019, "mindset": 1019, "faction": 1020, "varieti": [1020, 1023], "qi": 1020, "qi_system": 1020, "xla_bridg": [1020, 1021, 1026], "lorenz_system": 1020, "chua": 1020, "725": 1020, "593": 1020, "268": 1020, "m0": 1020, "7872": 1020, "chua_system": 1020, "93": 1020, "glwithmemori": 1020, "binomial_coef": 1020, "galleri": 1020, "electrophysiolog": 1021, "current1": 1021, "arrrai": 1021, "current2": 1021, "current3": 1021, "current4": 1021, "current5": 1021, "current6": 1021, "uhlenback": 1021, "current7": 1021, "current8": 1021, "current9": 1021, "interconnect": 1022, "interdepend": 1022, "numar": 1022, "itg": 1022, "confus": 1022, "diff": [1022, 1023], "itg_v_u": 1022, "int_u": 1022, "illusr": 1022, "brainpy_itg_of_ode6": 1022, "0x0000022948dd6a60": 1022, "0x229660543a0": 1022, "brainpy_itg_of_ode12_joint_eq": 1022, "0x0000022967ec0c40": 1022, "0x22967ec0160": 1022, "resort": 1023, "quation": 1023, "f_1": 1023, "g_1": 1023, "p1": [1023, 1026], "p2": [1023, 1026], "g1": 1023, "scalar_var": 1023, "pop_var": 1023, "system_var": 1023, "redefin": 1023, "decor": [1023, 1026], "isinst": 1023, "0x15abadeedc0": 1023, "brainpy_itg_of_ode1_diff": 1023, "dx_k1": 1023, "dy_k1": 1023, "x_new": [1023, 1033], "y_new": 1023, "0x0000015abadfbf70": 1023, "0x15abae03550": 1023, "brainpy_itg_of_ode2_diff": 1023, "k2_x_arg": 1023, "k2_y_arg": 1023, "dx_k2": 1023, "dy_k2": 1023, "k3_x_arg": 1023, "k3_y_arg": 1023, "k3_t_arg": 1023, "dx_k3": 1023, "dy_k3": 1023, "k4_x_arg": 1023, "k4_y_arg": 1023, "k4_t_arg": 1023, "dx_k4": 1023, "dy_k4": 1023, "0x0000015abae023a0": 1023, "0x15abae03d30": 1023, "exmapl": 1023, "hist_tim": 1023, "vmhn": 1023, "rk4_38rule": 1023, "0x15abc88be50": 1023, "0x15abca4daf0": 1023, "0x15abc88bca0": 1023, "dt_": 1023, "rkf45": 1023, "rkf12": 1023, "rkdp": 1023, "ck": 1023, "heun_eul": 1023, "adjust": [1023, 1024], "hist_x": 1023, "hist_i": 1023, "hist_z": 1023, "hist_dt": 1023, "interestingli": 1023, "greatli": 1023, "enlarg": 1023, "hh_deriv": 1023, "inlud": 1024, "hyperparamet": [1024, 1031], "launch": 1024, "9993626": 1024, "9997406": 1024, "999853": 1024, "999312": 1024, "9993036": 1024, "99934477": 1024, "9998294": 1024, "9997739": 1024, "99900717": 1024, "9997449": 1024, "99976104": 1024, "99953616": 1024, "9995185": 1024, "99917144": 1024, "9990044": 1024, "99914813": 1024, "9997468": 1024, "9999408": 1024, "99917686": 1024, "9999825": 1024, "00034196": 1024, "00046545": 1024, "00027317": 1024, "00045028": 1024, "00076825": 1024, "00026088": 1024, "0007135": 1024, "00020507": 1024, "00073902": 1024, "grads_pr": 1024, "6356058": 1024, "10750175": 1024, "93578255": 1024, "2557603": 1024, "77525663": 1024, "8615701": 1024, "35919654": 1024, "6861898": 1024, "9569112": 1024, "98981357": 1024, "3033744": 1024, "62852013": 1024, "36589646": 1024, "86694443": 1024, "6335902": 1024, "44947362": 1024, "01782513": 1024, "11465573": 1024, "5505476": 1024, "56196713": 1024, "2326113": 1024, "14437485": 1024, "6543677": 1024, "46068823": 1024, "9811108": 1024, "30460846": 1024, "261765": 1024, "71705794": 1024, "6173099": 1024, "grads_post": 1024, "clip_by_norm": 1024, "22753015": 1024, "0384828": 1024, "33498552": 1024, "09155546": 1024, "2775215": 1024, "30841944": 1024, "12858291": 1024, "24563788": 1024, "34254903": 1024, "3543272": 1024, "10860006": 1024, "22499368": 1024, "13098131": 1024, "3103433": 1024, "22680864": 1024, "16089973": 1024, "00638093": 1024, "04104374": 1024, "19708155": 1024, "20116945": 1024, "14066657": 1024, "08730751": 1024, "39571446": 1024, "27859107": 1024, "5933052": 1024, "18420528": 1024, "15829663": 1024, "433625": 1024, "3733046": 1024, "9991351": 1024, "9997021": 1024, "99951804": 1024, "99922043": 1024, "99902606": 1024, "9990364": 1024, "99970084": 1024, "9995283": 1024, "9986646": 1024, "99939054": 1024, "99965245": 1024, "99931115": 1024, "9993875": 1024, "9988611": 1024, "9987776": 1024, "99898726": 1024, "9997404": 1024, "99989974": 1024, "9989798": 1024, "9997813": 1024, "00048263": 1024, "00055276": 1024, "00066889": 1024, "00072887": 1024, "00136155": 1024, "00044508": 1024, "00087179": 1024, "0006387": 1024, "00111233": 1024, "constant0": 1024, "momentum0": 1024, "a_v": 1024, "b_v": 1024, "constant1": 1024, "adam0": 1024, "a_m": 1024, "b_m": 1024, "constant2": 1024, "customizeop": 1024, "other_param": 1024, "sc": 1024, "inversetimedecai": 1024, "polynomialdecai": 1024, "piecewiseconst": 1024, "customizeschedul": 1024, "Being": 1025, "makedir": 1025, "filenam": 1025, "retiev": 1025, "check_miss": 1025, "miss": 1025, "expcoba0": 1025, "expcoba1": 1025, "expcoba2": 1025, "expcoba3": 1025, "in_idx": 1025, "out_idx": 1025, "beacaus": 1025, "disk": 1025, "gotcha": 1025, "w_t": 1026, "g_part": 1026, "f_part": 1026, "dx_t": 1026, "dw_t": 1026, "brefor": 1026, "distinguish": 1026, "1940": 1026, "japanes": 1026, "mathematician": 1026, "1960": 1026, "russian": 1026, "physicist": 1026, "former": 1026, "lim": 1026, "sde_typ": 1026, "stra_sd": 1026, "ito_sd": 1026, "scalar_wien": 1026, "vector_wien": 1026, "demenstr": 1026, "px": 1026, "xi_x": 1026, "xi_i": 1026, "pz": 1026, "xi_z": 1026, "lorenz_g": 1026, "lorenz_f": 1026, "impress": 1026, "sri1w1": 1026, "srk1w1_scalar": 1026, "ye": 1026, "sri2w1": 1026, "srk2w1_scalar": 1026, "klpl": 1026, "klpl_scalar": 1026, "milstein_grad_fre": 1026, "incluld": 1027, "conector": 1027, "conncet": 1027, "sentenc": 1027, "connction": 1027, "syn_id": 1027, "illutr": [1027, 1028], "aobv": 1027, "identifi": [1027, 1033], "nx": 1027, "from_numpy_matrix": 1027, "with_label": 1027, "2n": 1027, "bmatrix": 1027, "all_to_al": 1027, "sparser": 1027, "inself": 1027, "noth": 1027, "x_c": 1027, "y_c": 1027, "textrm": 1027, "proportion": 1027, "propto": 1027, "undirect": 1027, "pre_list": 1027, "post_list": 1027, "futurewarn": 1027, "incompat": 1027, "cast": 1027, "futur": 1027, "csr_matrix": 1027, "sparse_mat": 1027, "netork": 1027, "netowrkx": 1027, "fast_gnp_random_graph": 1027, "adjacency_matrix": 1027, "todens": 1027, "ipykernel_2488": 1027, "2020588093": 1027, "_random_prob_conn": 1027, "conn_j": 1027, "synpas": 1028, "uniform_init": 1028, "974509060382843": 1028, "1543986797332764": 1028, "7815501689910889": 1028, "6559045314788818": 1028, "48931145668029785": 1028, "19386005401611328": 1028, "weight_mat": 1028, "matconn": 1028, "weight_vec": 1028, "weight_vector": 1028, "costum": 1028, "postsynpat": 1028, "n_1": 1028, "n_2": 1028, "n_d": 1028, "prod_": 1028, "mat_visu": 1028, "get_cmap": 1028, "coolwarm": 1028, "matshow": 1028, "mappabl": 1028, "one_init": 1028, "normal_init": 1028, "resembl": 1028, "gaussiandecai": 1028, "gaussian_init": 1028, "dog_init": 1028, "v_j": 1028, "lineardecai": 1028, "n_pre": 1028, "n_post": 1028, "current_w": 1028, "seq_plu": 1028, "seq_minu": 1028, "lin_init": 1028, "set_mod": 1029, "annmodel": 1029, "test_dataset": 1029, "clone_rng": 1029, "data_gener": 1029, "test_data": 1029, "7911": 1029, "9686446785926819": 1029, "657629668712616": 1029, "1449": 1029, "6075307726860046": 1029, "7804630398750305": 1029, "1454": 1029, "5276323556900024": 1029, "8128490447998047": 1029, "2927": 1029, "5302323698997498": 1029, "8131089210510254": 1029, "0979": 1029, "4588756263256073": 1029, "8355662226676941": 1029, "3037": 1029, "4678855538368225": 1029, "8310604095458984": 1029, "1892": 1029, "42316296696662903": 1029, "8461214303970337": 1029, "2911": 1029, "45249971747398376": 1029, "8364487886428833": 1029, "0769": 1029, "3961907625198364": 1029, "8553800582885742": 1029, "2947": 1029, "4217829704284668": 1029, "8458294868469238": 1029, "9839": 1029, "3784363567829132": 1029, "8621509075164795": 1029, "3015": 1029, "41539546847343445": 1029, "8533375859260559": 1029, "9756": 1029, "362664133310318": 1029, "8676861524581909": 1029, "3095": 1029, "3904822766780853": 1029, "8592026829719543": 1029, "0243": 1029, "34826964139938354": 1029, "8724401593208313": 1029, "2876": 1029, "3742746412754059": 1029, "8639591336250305": 1029, "0806": 1029, "3381759822368622": 1029, "8756925463676453": 1029, "2951": 1029, "3876565992832184": 1029, "8559110760688782": 1029, "1019": 1029, "32923951745033264": 1029, "8797928094863892": 1029, "2833": 1029, "3779725432395935": 1029, "8602309226989746": 1029, "snnmodel": 1029, "current2firing_tim": 1029, "thr": 1029, "tmax": 1029, "1e9": 1029, "sparse_data_gener": 1029, "nb_step": 1029, "nb_unit": 1029, "labels_": 1029, "sample_index": 1029, "tau_eff": 1029, "unit_numb": 1029, "firing_tim": 1029, "number_of_batch": 1029, "batch_index": 1029, "all_batch": 1029, "all_tim": 1029, "all_unit": 1029, "bc": 1029, "idx": 1029, "x_batch": 1029, "y_batch": 1029, "l1_loss": 1029, "6148": 1029, "524602890014648": 1029, "3441840410232544": 1029, "947080373764038": 1029, "4961271286010742": 1029, "2106": 1029, "5027152299880981": 1029, "5980067849159241": 1029, "0944": 1029, "371555209159851": 1029, "63353031873703": 1029, "2528": 1029, "294083833694458": 1029, "6476696133613586": 1029, "5207": 1029, "2385631799697876": 1029, "6586705446243286": 1029, "7909": 1029, "2144725322723389": 1029, "6649806499481201": 1029, "7359": 1029, "1915594339370728": 1029, "6712072491645813": 1029, "2446": 1029, "153993010520935": 1029, "6776843070983887": 1029, "4869": 1029, "1312021017074585": 1029, "682542085647583": 1029, "grad_fun": 1029, "running_loss": 1029, "running_acc": 1029, "print_step": 1029, "loss_": 1029, "acc_": 1029, "7523": 1029, "2503": 1029, "5630": 1029, "3020": 1029, "6340": 1029, "7779": 1029, "5825": 1029, "5545": 1029, "8056": 1029, "3013": 1029, "5028": 1029, "8198": 1029, "3458": 1029, "4659": 1029, "8340": 1029, "3190": 1029, "8316": 1029, "2990": 1029, "4297": 1029, "8443": 1029, "3577": 1029, "4244": 1029, "8456": 1029, "3054": 1029, "4053": 1029, "8538": 1029, "3404": 1029, "3913": 1029, "8568": 1029, "2744": 1029, "3943": 1029, "8534": 1029, "4739": 1029, "3863": 1029, "8592": 1029, "4073": 1029, "3709": 1029, "8647": 1029, "3310": 1029, "3791": 1029, "8607": 1029, "3793": 1029, "3644": 1029, "8643": 1029, "3164": 1029, "3562": 1029, "8718": 1029, "4404": 1029, "3585": 1029, "8677": 1029, "4584": 1029, "3533": 1029, "8716": 1029, "4216": 1029, "3460": 1029, "8727": 1029, "4207": 1029, "3445": 1029, "8729": 1029, "3493": 1029, "3375": 1029, "8749": 1029, "3991": 1029, "3317": 1029, "8773": 1029, "3003": 1029, "3356": 1029, "8755": 1029, "notimplementederror": 1030, "13143115": 1030, "7037631": 1030, "50639415": 1030, "49906093": 1030, "39095506": 1030, "5210247": 1030, "6293488": 1030, "7321653": 1030, "2841127": 1030, "3818757": 1030, "19256772": 1030, "6708007": 1030, "36896244": 1030, "6050412": 1030, "53849053": 1030, "03913487": 1030, "78182685": 1030, "7611104": 1030, "00870763": 1030, "06463569": 1030, "2160572": 1030, "5157468": 1030, "09730986": 1030, "16213563": 1030, "state2train": 1030, "traceback": 1030, "hidden_lay": 1030, "recurrentlay": 1030, "win": 1030, "wrec": 1030, "keep_mask": 1030, "deeprnn": 1030, "d3": 1030, "l4": 1030, "d4": 1030, "lout": 1030, "set_environ": [1031, 1033, 1034], "importantli": 1031, "unseen": 1031, "graphic": 1031, "depict": 1031, "overdetermin": 1031, "xx": 1031, "quantiti": 1031, "matur": 1031, "blood": 1031, "plot_mackey_glass_seri": 1031, "x_seri": 1031, "x_tau_seri": 1031, "timestep": 1031, "lw": 1031, "lightgrei": 1031, "zorder": 1031, "viridi": 1031, "margin": 1031, "cbar": 1031, "set_ylabel": [1031, 1033, 1034], "mackey_glass_seri": 1031, "mg_data": 1031, "mackeyglasseq": 1031, "25000": 1031, "t_warm": 1031, "t_forcast": 1031, "t_train": [1031, 1033, 1034], "sample_r": 1031, "warmup": [1031, 1033, 1034], "train_length": 1031, "x_warm": 1031, "expand_dim": [1031, 1033], "sr": 1031, "ys_predict": 1031, "all_radiu": 1031, "esp": 1031, "applii": 1031, "all_input_sc": 1031, "inde": 1031, "underbrac": 1031, "cdotp": 1031, "all_rat": 1031, "inertia": 1031, "littl": 1031, "contant": 1031, "ask": 1031, "jit_model": 1031, "jaeger": 1031, "gmd": 1031, "german": 1031, "t_warmup": [1033, 1034], "t_test": [1033, 1034], "num_warmup": [1033, 1034], "num_train": [1033, 1034], "num_test": [1033, 1034], "lorenz_seri": [1033, 1034], "67715816276679": [1033, 1034], "931379185960404": [1033, 1034], "91404334248268": [1033, 1034], "x_warmup": [1033, 1034], "esn": 1033, "plot_lorenz": [1033, 1034], "ground_truth": [1033, 1034], "set_zlabel": [1033, 1034], "ax2": [1033, 1034], "nm": [1033, 1034], "041717741900418666": 1033, "lasso": 1033, "linearregress": 1033, "scikit": 1033, "linear_model": 1033, "lassoalgorithm": 1033, "max_it": 1033, "1e4": 1033, "coef_": 1033, "vital": 1034, "0007826608198954596": 1034}, "objects": {"": [[1, 0, 0, "-", "brainpy"]], "brainpy": [[6, 1, 1, "", "BPFF"], [7, 1, 1, "", "BPTT"], [8, 1, 1, "", "Channel"], [9, 1, 1, "", "CondNeuGroup"], [10, 1, 1, "", "Container"], [11, 1, 1, "", "DSRunner"], [12, 1, 1, "", "DSTrainer"], [13, 1, 1, "", "DynamicalSystem"], [14, 1, 1, "", "ForceTrainer"], [15, 1, 1, "", "Integrator"], [16, 1, 1, "", "IntegratorRunner"], [17, 1, 1, "", "JointEq"], [18, 1, 1, "", "LoopOverTime"], [19, 1, 1, "", "Network"], [20, 1, 1, "", "NeuGroup"], [21, 1, 1, "", "NoSharedArg"], [22, 1, 1, "", "OfflineTrainer"], [23, 1, 1, "", "OnlineTrainer"], [24, 1, 1, "", "RidgeTrainer"], [25, 1, 1, "", "Sequential"], [26, 1, 1, "", "SynConn"], [27, 1, 1, "", "SynLTP"], [28, 1, 1, "", "SynOut"], [29, 1, 1, "", "SynSTP"], [30, 1, 1, "", "TwoEndConn"], [0, 0, 0, "-", "analysis"], [3, 0, 0, "-", "channels"], [4, 0, 0, "-", "connect"], [5, 0, 0, "-", "encoding"], [115, 4, 1, "", "fdeint"], [967, 0, 0, "-", "initialize"], [968, 0, 0, "-", "inputs"], [969, 0, 0, "-", "integrators"], [970, 0, 0, "-", "layers"], [971, 0, 0, "-", "losses"], [972, 0, 0, "module-9", "math"], [975, 0, 0, "-", "measure"], [976, 0, 0, "-", "neurons"], [911, 4, 1, "", "odeint"], [977, 0, 0, "-", "optim"], [978, 0, 0, "-", "rates"], [979, 0, 0, "-", "running"], [948, 4, 1, "", "sdeint"], [980, 0, 0, "-", "synapses"], [981, 0, 0, "-", "synouts"], [982, 0, 0, "-", "synplast"]], "brainpy.BPFF": [[6, 2, 1, "", "__init__"]], "brainpy.BPTT": [[7, 2, 1, "", "__init__"]], "brainpy.Channel": [[8, 2, 1, "", "__init__"]], "brainpy.CondNeuGroup": [[9, 2, 1, "", "__init__"]], "brainpy.Container": [[10, 2, 1, "", "__init__"]], "brainpy.DSRunner": [[11, 2, 1, "", "__init__"]], "brainpy.DSTrainer": [[12, 2, 1, "", "__init__"]], "brainpy.DynamicalSystem": [[13, 2, 1, "", "__init__"]], "brainpy.ForceTrainer": [[14, 2, 1, "", "__init__"]], "brainpy.Integrator": [[15, 2, 1, "", "__init__"]], "brainpy.IntegratorRunner": [[16, 2, 1, "", "__init__"]], "brainpy.JointEq": [[17, 2, 1, "", "__init__"]], "brainpy.LoopOverTime": [[18, 2, 1, "", "__init__"]], "brainpy.Network": [[19, 2, 1, "", "__init__"]], "brainpy.NeuGroup": [[20, 2, 1, "", "__init__"]], "brainpy.NoSharedArg": [[21, 2, 1, "", "__init__"]], "brainpy.OfflineTrainer": [[22, 2, 1, "", "__init__"]], "brainpy.OnlineTrainer": [[23, 2, 1, "", "__init__"]], "brainpy.RidgeTrainer": [[24, 2, 1, "", "__init__"]], "brainpy.Sequential": [[25, 2, 1, "", "__init__"]], "brainpy.SynConn": [[26, 2, 1, "", "__init__"]], "brainpy.SynLTP": [[27, 2, 1, "", "__init__"]], "brainpy.SynOut": [[28, 2, 1, "", "__init__"]], "brainpy.SynSTP": [[29, 2, 1, "", "__init__"]], "brainpy.TwoEndConn": [[30, 2, 1, "", "__init__"]], "brainpy.analysis": [[31, 1, 1, "", "Bifurcation1D"], [32, 1, 1, "", "Bifurcation2D"], [33, 1, 1, "", "FastSlow1D"], [34, 1, 1, "", "FastSlow2D"], [35, 1, 1, "", "PhasePlane1D"], [36, 1, 1, "", "PhasePlane2D"], [37, 1, 1, "", "SlowPointFinder"]], "brainpy.analysis.Bifurcation1D": [[31, 2, 1, "", "__init__"]], "brainpy.analysis.Bifurcation2D": [[32, 2, 1, "", "__init__"]], "brainpy.analysis.FastSlow1D": [[33, 2, 1, "", "__init__"]], "brainpy.analysis.FastSlow2D": [[34, 2, 1, "", "__init__"]], "brainpy.analysis.PhasePlane1D": [[35, 2, 1, "", "__init__"]], "brainpy.analysis.PhasePlane2D": [[36, 2, 1, "", "__init__"]], "brainpy.analysis.SlowPointFinder": [[37, 2, 1, "", "__init__"]], "brainpy.channels": [[38, 1, 1, "", "Calcium"], [39, 1, 1, "", "CalciumChannel"], [40, 1, 1, "", "CalciumDetailed"], [41, 1, 1, "", "CalciumDyna"], [42, 1, 1, "", "CalciumFirstOrder"], [43, 1, 1, "", "CalciumFixed"], [44, 1, 1, "", "IAHP_De1994"], [45, 1, 1, "", "ICaHT_HM1992"], [46, 1, 1, "", "ICaL_IS2008"], [47, 1, 1, "", "ICaN_IS2008"], [48, 1, 1, "", "ICaT_HM1992"], [49, 1, 1, "", "ICaT_HP1992"], [50, 1, 1, "", "IKA1_HM1992"], [51, 1, 1, "", "IKA2_HM1992"], [52, 1, 1, "", "IKDR_Ba2002"], [53, 1, 1, "", "IKK2A_HM1992"], [54, 1, 1, "", "IKK2B_HM1992"], [55, 1, 1, "", "IKL"], [56, 1, 1, "", "IKNI_Ya1989"], [57, 1, 1, "", "IK_HH1952"], [58, 1, 1, "", "IK_TM1991"], [59, 1, 1, "", "IL"], [60, 1, 1, "", "INa_Ba2002"], [61, 1, 1, "", "INa_HH1952"], [62, 1, 1, "", "INa_TM1991"], [63, 1, 1, "", "IhChannel"], [64, 1, 1, "", "Ih_De1996"], [65, 1, 1, "", "Ih_HM1992"], [66, 1, 1, "", "Ion"], [67, 1, 1, "", "IonChannel"], [68, 1, 1, "", "LeakyChannel"], [69, 1, 1, "", "PotassiumChannel"], [70, 1, 1, "", "SodiumChannel"]], "brainpy.channels.Calcium": [[38, 2, 1, "", "__init__"]], "brainpy.channels.CalciumChannel": [[39, 2, 1, "", "__init__"]], "brainpy.channels.CalciumDetailed": [[40, 2, 1, "", "__init__"]], "brainpy.channels.CalciumDyna": [[41, 2, 1, "", "__init__"]], "brainpy.channels.CalciumFirstOrder": [[42, 2, 1, "", "__init__"]], "brainpy.channels.CalciumFixed": [[43, 2, 1, "", "__init__"]], "brainpy.channels.IAHP_De1994": [[44, 2, 1, "", "__init__"]], "brainpy.channels.ICaHT_HM1992": [[45, 2, 1, "", "__init__"]], "brainpy.channels.ICaL_IS2008": [[46, 2, 1, "", "__init__"]], "brainpy.channels.ICaN_IS2008": [[47, 2, 1, "", "__init__"]], "brainpy.channels.ICaT_HM1992": [[48, 2, 1, "", "__init__"]], "brainpy.channels.ICaT_HP1992": [[49, 2, 1, "", "__init__"]], "brainpy.channels.IKA1_HM1992": [[50, 2, 1, "", "__init__"]], "brainpy.channels.IKA2_HM1992": [[51, 2, 1, "", "__init__"]], "brainpy.channels.IKDR_Ba2002": [[52, 2, 1, "", "__init__"]], "brainpy.channels.IKK2A_HM1992": [[53, 2, 1, "", "__init__"]], "brainpy.channels.IKK2B_HM1992": [[54, 2, 1, "", "__init__"]], "brainpy.channels.IKL": [[55, 2, 1, "", "__init__"]], "brainpy.channels.IKNI_Ya1989": [[56, 2, 1, "", "__init__"]], "brainpy.channels.IK_HH1952": [[57, 2, 1, "", "__init__"]], "brainpy.channels.IK_TM1991": [[58, 2, 1, "", "__init__"]], "brainpy.channels.IL": [[59, 2, 1, "", "__init__"]], "brainpy.channels.INa_Ba2002": [[60, 2, 1, "", "__init__"]], "brainpy.channels.INa_HH1952": [[61, 2, 1, "", "__init__"]], "brainpy.channels.INa_TM1991": [[62, 2, 1, "", "__init__"]], "brainpy.channels.IhChannel": [[63, 2, 1, "", "__init__"]], "brainpy.channels.Ih_De1996": [[64, 2, 1, "", "__init__"]], "brainpy.channels.Ih_HM1992": [[65, 2, 1, "", "__init__"]], "brainpy.channels.Ion": [[66, 2, 1, "", "__init__"]], "brainpy.channels.IonChannel": [[67, 2, 1, "", "__init__"]], "brainpy.channels.LeakyChannel": [[68, 2, 1, "", "__init__"]], "brainpy.channels.PotassiumChannel": [[69, 2, 1, "", "__init__"]], "brainpy.channels.SodiumChannel": [[70, 2, 1, "", "__init__"]], "brainpy.connect": [[72, 3, 1, "", "CONN_MAT"], [73, 1, 1, "", "CSRConn"], [74, 1, 1, "", "Connector"], [75, 1, 1, "", "FixedPostNum"], [76, 1, 1, "", "FixedPreNum"], [77, 1, 1, "", "FixedProb"], [78, 1, 1, "", "FixedTotalNum"], [79, 1, 1, "", "GaussianProb"], [80, 1, 1, "", "GridEight"], [81, 1, 1, "", "GridFour"], [82, 1, 1, "", "GridN"], [83, 1, 1, "", "IJConn"], [84, 1, 1, "", "MatConn"], [86, 1, 1, "", "OneEndConnector"], [87, 3, 1, "", "POST2PRE"], [88, 3, 1, "", "POST2SYN"], [89, 3, 1, "", "POST_IDS"], [90, 3, 1, "", "PRE2POST"], [91, 3, 1, "", "PRE2SYN"], [92, 3, 1, "", "PRE_IDS"], [93, 1, 1, "", "PowerLaw"], [94, 1, 1, "", "ProbDist"], [95, 1, 1, "", "ScaleFreeBA"], [96, 1, 1, "", "ScaleFreeBADual"], [97, 1, 1, "", "SmallWorld"], [98, 1, 1, "", "SparseMatConn"], [99, 1, 1, "", "TwoEndConnector"], [71, 3, 1, "", "all2all"], [100, 4, 1, "", "coo2csc"], [101, 4, 1, "", "coo2csr"], [102, 4, 1, "", "coo2mat"], [103, 4, 1, "", "csr2coo"], [104, 4, 1, "", "csr2csc"], [105, 4, 1, "", "csr2mat"], [106, 3, 1, "", "grid_eight"], [107, 3, 1, "", "grid_four"], [108, 4, 1, "", "mat2coo"], [109, 4, 1, "", "mat2csc"], [110, 4, 1, "", "mat2csr"], [85, 3, 1, "", "one2one"]], "brainpy.connect.CSRConn": [[73, 2, 1, "", "__init__"]], "brainpy.connect.Connector": [[74, 2, 1, "", "__init__"]], "brainpy.connect.FixedPostNum": [[75, 2, 1, "", "__init__"]], "brainpy.connect.FixedPreNum": [[76, 2, 1, "", "__init__"]], "brainpy.connect.FixedProb": [[77, 2, 1, "", "__init__"]], "brainpy.connect.FixedTotalNum": [[78, 2, 1, "", "__init__"]], "brainpy.connect.GaussianProb": [[79, 2, 1, "", "__init__"]], "brainpy.connect.GridEight": [[80, 2, 1, "", "__init__"]], "brainpy.connect.GridFour": [[81, 2, 1, "", "__init__"]], "brainpy.connect.GridN": [[82, 2, 1, "", "__init__"]], "brainpy.connect.IJConn": [[83, 2, 1, "", "__init__"]], "brainpy.connect.MatConn": [[84, 2, 1, "", "__init__"]], "brainpy.connect.OneEndConnector": [[86, 2, 1, "", "__init__"]], "brainpy.connect.PowerLaw": [[93, 2, 1, "", "__init__"]], "brainpy.connect.ProbDist": [[94, 2, 1, "", "__init__"]], "brainpy.connect.ScaleFreeBA": [[95, 2, 1, "", "__init__"]], "brainpy.connect.ScaleFreeBADual": [[96, 2, 1, "", "__init__"]], "brainpy.connect.SmallWorld": [[97, 2, 1, "", "__init__"]], "brainpy.connect.SparseMatConn": [[98, 2, 1, "", "__init__"]], "brainpy.connect.TwoEndConnector": [[99, 2, 1, "", "__init__"]], "brainpy.encoding": [[111, 1, 1, "", "Encoder"], [112, 1, 1, "", "LatencyEncoder"], [113, 1, 1, "", "PoissonEncoder"], [114, 1, 1, "", "WeightedPhaseEncoder"]], "brainpy.encoding.Encoder": [[111, 2, 1, "", "__init__"]], "brainpy.encoding.LatencyEncoder": [[112, 2, 1, "", "__init__"]], "brainpy.encoding.PoissonEncoder": [[113, 2, 1, "", "__init__"]], "brainpy.encoding.WeightedPhaseEncoder": [[114, 2, 1, "", "__init__"]], "brainpy.initialize": [[116, 1, 1, "", "Constant"], [117, 1, 1, "", "DOGDecay"], [118, 1, 1, "", "DeltaOrthogonal"], [119, 1, 1, "", "GaussianDecay"], [120, 1, 1, "", "Identity"], [121, 1, 1, "", "Initializer"], [122, 1, 1, "", "InterLayerInitializer"], [123, 1, 1, "", "IntraLayerInitializer"], [124, 1, 1, "", "KaimingNormal"], [125, 1, 1, "", "KaimingUniform"], [126, 1, 1, "", "LecunNormal"], [127, 1, 1, "", "LecunUniform"], [128, 1, 1, "", "Normal"], [129, 1, 1, "", "OneInit"], [130, 1, 1, "", "Orthogonal"], [131, 1, 1, "", "Uniform"], [132, 1, 1, "", "VarianceScaling"], [133, 1, 1, "", "XavierNormal"], [134, 1, 1, "", "XavierUniform"], [135, 1, 1, "", "ZeroInit"]], "brainpy.initialize.Constant": [[116, 2, 1, "", "__init__"]], "brainpy.initialize.DOGDecay": [[117, 2, 1, "", "__init__"]], "brainpy.initialize.DeltaOrthogonal": [[118, 2, 1, "", "__init__"]], "brainpy.initialize.GaussianDecay": [[119, 2, 1, "", "__init__"]], "brainpy.initialize.Identity": [[120, 2, 1, "", "__init__"]], "brainpy.initialize.Initializer": [[121, 2, 1, "", "__init__"]], "brainpy.initialize.InterLayerInitializer": [[122, 2, 1, "", "__init__"]], "brainpy.initialize.IntraLayerInitializer": [[123, 2, 1, "", "__init__"]], "brainpy.initialize.KaimingNormal": [[124, 2, 1, "", "__init__"]], "brainpy.initialize.KaimingUniform": [[125, 2, 1, "", "__init__"]], "brainpy.initialize.LecunNormal": [[126, 2, 1, "", "__init__"]], "brainpy.initialize.LecunUniform": [[127, 2, 1, "", "__init__"]], "brainpy.initialize.Normal": [[128, 2, 1, "", "__init__"]], "brainpy.initialize.OneInit": [[129, 2, 1, "", "__init__"]], "brainpy.initialize.Orthogonal": [[130, 2, 1, "", "__init__"]], "brainpy.initialize.Uniform": [[131, 2, 1, "", "__init__"]], "brainpy.initialize.VarianceScaling": [[132, 2, 1, "", "__init__"]], "brainpy.initialize.XavierNormal": [[133, 2, 1, "", "__init__"]], "brainpy.initialize.XavierUniform": [[134, 2, 1, "", "__init__"]], "brainpy.initialize.ZeroInit": [[135, 2, 1, "", "__init__"]], "brainpy.inputs": [[136, 4, 1, "", "constant_input"], [137, 4, 1, "", "ou_process"], [138, 4, 1, "", "ramp_input"], [139, 4, 1, "", "section_input"], [140, 4, 1, "", "sinusoidal_input"], [141, 4, 1, "", "spike_input"], [142, 4, 1, "", "square_input"], [143, 4, 1, "", "wiener_process"]], "brainpy.integrators": [[969, 0, 0, "-", "fde"], [969, 0, 0, "-", "ode"], [969, 0, 0, "-", "sde"]], "brainpy.integrators.fde": [[144, 1, 1, "", "CaputoEuler"], [145, 1, 1, "", "CaputoL1Schema"], [146, 1, 1, "", "FDEIntegrator"], [147, 1, 1, "", "GLShortMemory"], [148, 4, 1, "", "get_default_fdeint"], [149, 4, 1, "", "get_supported_methods"], [150, 4, 1, "", "register_fde_integrator"], [151, 4, 1, "", "set_default_fdeint"]], "brainpy.integrators.fde.CaputoEuler": [[144, 2, 1, "", "__init__"]], "brainpy.integrators.fde.CaputoL1Schema": [[145, 2, 1, "", "__init__"]], "brainpy.integrators.fde.FDEIntegrator": [[146, 2, 1, "", "__init__"]], "brainpy.integrators.fde.GLShortMemory": [[147, 2, 1, "", "__init__"]], "brainpy.integrators.ode": [[152, 1, 1, "", "AdaptiveRKIntegrator"], [153, 1, 1, "", "BogackiShampine"], [154, 1, 1, "", "CashKarp"], [155, 1, 1, "", "DormandPrince"], [156, 1, 1, "", "Euler"], [157, 1, 1, "", "ExplicitRKIntegrator"], [158, 1, 1, "", "ExponentialEuler"], [159, 1, 1, "", "Heun2"], [160, 1, 1, "", "Heun3"], [161, 1, 1, "", "HeunEuler"], [162, 1, 1, "", "MidPoint"], [163, 1, 1, "", "ODEIntegrator"], [164, 1, 1, "", "RK2"], [165, 1, 1, "", "RK3"], [166, 1, 1, "", "RK4"], [167, 1, 1, "", "RK4Rule38"], [168, 1, 1, "", "RKF12"], [169, 1, 1, "", "RKF45"], [170, 1, 1, "", "Ralston2"], [171, 1, 1, "", "Ralston3"], [172, 1, 1, "", "Ralston4"], [173, 1, 1, "", "SSPRK3"], [174, 4, 1, "", "get_default_odeint"], [175, 4, 1, "", "get_supported_methods"], [176, 4, 1, "", "register_ode_integrator"], [177, 4, 1, "", "set_default_odeint"]], "brainpy.integrators.ode.AdaptiveRKIntegrator": [[152, 2, 1, "", "__init__"]], "brainpy.integrators.ode.BogackiShampine": [[153, 2, 1, "", "__init__"]], "brainpy.integrators.ode.CashKarp": [[154, 2, 1, "", "__init__"]], "brainpy.integrators.ode.DormandPrince": [[155, 2, 1, "", "__init__"]], "brainpy.integrators.ode.Euler": [[156, 2, 1, "", "__init__"]], "brainpy.integrators.ode.ExplicitRKIntegrator": [[157, 2, 1, "", "__init__"]], "brainpy.integrators.ode.ExponentialEuler": [[158, 2, 1, "", "__init__"]], "brainpy.integrators.ode.Heun2": [[159, 2, 1, "", "__init__"]], "brainpy.integrators.ode.Heun3": [[160, 2, 1, "", "__init__"]], "brainpy.integrators.ode.HeunEuler": [[161, 2, 1, "", "__init__"]], "brainpy.integrators.ode.MidPoint": [[162, 2, 1, "", "__init__"]], "brainpy.integrators.ode.ODEIntegrator": [[163, 2, 1, "", "__init__"]], "brainpy.integrators.ode.RK2": [[164, 2, 1, "", "__init__"]], "brainpy.integrators.ode.RK3": [[165, 2, 1, "", "__init__"]], "brainpy.integrators.ode.RK4": [[166, 2, 1, "", "__init__"]], "brainpy.integrators.ode.RK4Rule38": [[167, 2, 1, "", "__init__"]], "brainpy.integrators.ode.RKF12": [[168, 2, 1, "", "__init__"]], "brainpy.integrators.ode.RKF45": [[169, 2, 1, "", "__init__"]], "brainpy.integrators.ode.Ralston2": [[170, 2, 1, "", "__init__"]], "brainpy.integrators.ode.Ralston3": [[171, 2, 1, "", "__init__"]], "brainpy.integrators.ode.Ralston4": [[172, 2, 1, "", "__init__"]], "brainpy.integrators.ode.SSPRK3": [[173, 2, 1, "", "__init__"]], "brainpy.integrators.sde": [[178, 1, 1, "", "Euler"], [179, 1, 1, "", "ExponentialEuler"], [180, 1, 1, "", "Heun"], [181, 1, 1, "", "KlPl"], [182, 1, 1, "", "Milstein"], [183, 1, 1, "", "MilsteinGradFree"], [184, 1, 1, "", "SDEIntegrator"], [185, 1, 1, "", "SRK1W1"], [186, 1, 1, "", "SRK2W1"], [187, 4, 1, "", "get_default_sdeint"], [188, 4, 1, "", "get_supported_methods"], [189, 4, 1, "", "register_sde_integrator"], [190, 4, 1, "", "set_default_sdeint"]], "brainpy.integrators.sde.Euler": [[178, 2, 1, "", "__init__"]], "brainpy.integrators.sde.ExponentialEuler": [[179, 2, 1, "", "__init__"]], "brainpy.integrators.sde.Heun": [[180, 2, 1, "", "__init__"]], "brainpy.integrators.sde.KlPl": [[181, 2, 1, "", "__init__"]], "brainpy.integrators.sde.Milstein": [[182, 2, 1, "", "__init__"]], "brainpy.integrators.sde.MilsteinGradFree": [[183, 2, 1, "", "__init__"]], "brainpy.integrators.sde.SDEIntegrator": [[184, 2, 1, "", "__init__"]], "brainpy.integrators.sde.SRK1W1": [[185, 2, 1, "", "__init__"]], "brainpy.integrators.sde.SRK2W1": [[186, 2, 1, "", "__init__"]], "brainpy.layers": [[191, 1, 1, "", "Activation"], [192, 1, 1, "", "AdaptiveAvgPool1d"], [193, 1, 1, "", "AdaptiveAvgPool2d"], [194, 1, 1, "", "AdaptiveAvgPool3d"], [195, 1, 1, "", "AdaptiveMaxPool1d"], [196, 1, 1, "", "AdaptiveMaxPool2d"], [197, 1, 1, "", "AdaptiveMaxPool3d"], [198, 1, 1, "", "AvgPool"], [199, 1, 1, "", "AvgPool1d"], [200, 1, 1, "", "AvgPool2d"], [201, 1, 1, "", "AvgPool3d"], [202, 1, 1, "", "BatchNorm1d"], [203, 1, 1, "", "BatchNorm2d"], [204, 1, 1, "", "BatchNorm3d"], [205, 1, 1, "", "Conv1d"], [206, 1, 1, "", "Conv1dLSTMCell"], [207, 1, 1, "", "Conv2d"], [208, 1, 1, "", "Conv2dLSTMCell"], [209, 1, 1, "", "Conv3d"], [210, 1, 1, "", "Conv3dLSTMCell"], [211, 1, 1, "", "ConvTranspose1d"], [212, 1, 1, "", "ConvTranspose2d"], [213, 1, 1, "", "ConvTranspose3d"], [214, 1, 1, "", "Dense"], [215, 1, 1, "", "Dropout"], [216, 1, 1, "", "Flatten"], [217, 1, 1, "", "FunAsLayer"], [218, 1, 1, "", "GRU"], [219, 1, 1, "", "GRUCell"], [220, 1, 1, "", "GroupNorm"], [221, 1, 1, "", "Identity"], [222, 1, 1, "", "InstanceNorm"], [223, 1, 1, "", "LSTM"], [224, 1, 1, "", "LSTMCell"], [225, 1, 1, "", "Layer"], [226, 1, 1, "", "LayerNorm"], [227, 5, 1, "", "Linear"], [228, 1, 1, "", "MaxPool"], [229, 1, 1, "", "MaxPool1d"], [230, 1, 1, "", "MaxPool2d"], [231, 1, 1, "", "MaxPool3d"], [232, 1, 1, "", "MinPool"], [233, 1, 1, "", "NVAR"], [234, 1, 1, "", "RNNCell"], [235, 1, 1, "", "Reservoir"], [236, 1, 1, "", "VanillaRNN"]], "brainpy.layers.Activation": [[191, 2, 1, "", "__init__"]], "brainpy.layers.AdaptiveAvgPool1d": [[192, 2, 1, "", "__init__"]], "brainpy.layers.AdaptiveAvgPool2d": [[193, 2, 1, "", "__init__"]], "brainpy.layers.AdaptiveAvgPool3d": [[194, 2, 1, "", "__init__"]], "brainpy.layers.AdaptiveMaxPool1d": [[195, 2, 1, "", "__init__"]], "brainpy.layers.AdaptiveMaxPool2d": [[196, 2, 1, "", "__init__"]], "brainpy.layers.AdaptiveMaxPool3d": [[197, 2, 1, "", "__init__"]], "brainpy.layers.AvgPool": [[198, 2, 1, "", "__init__"]], "brainpy.layers.AvgPool1d": [[199, 2, 1, "", "__init__"]], "brainpy.layers.AvgPool2d": [[200, 2, 1, "", "__init__"]], "brainpy.layers.AvgPool3d": [[201, 2, 1, "", "__init__"]], "brainpy.layers.BatchNorm1d": [[202, 2, 1, "", "__init__"]], "brainpy.layers.BatchNorm2d": [[203, 2, 1, "", "__init__"]], "brainpy.layers.BatchNorm3d": [[204, 2, 1, "", "__init__"]], "brainpy.layers.Conv1d": [[205, 2, 1, "", "__init__"]], "brainpy.layers.Conv1dLSTMCell": [[206, 2, 1, "", "__init__"]], "brainpy.layers.Conv2d": [[207, 2, 1, "", "__init__"]], "brainpy.layers.Conv2dLSTMCell": [[208, 2, 1, "", "__init__"]], "brainpy.layers.Conv3d": [[209, 2, 1, "", "__init__"]], "brainpy.layers.Conv3dLSTMCell": [[210, 2, 1, "", "__init__"]], "brainpy.layers.ConvTranspose1d": [[211, 2, 1, "", "__init__"]], "brainpy.layers.ConvTranspose2d": [[212, 2, 1, "", "__init__"]], "brainpy.layers.ConvTranspose3d": [[213, 2, 1, "", "__init__"]], "brainpy.layers.Dense": [[214, 2, 1, "", "__init__"]], "brainpy.layers.Dropout": [[215, 2, 1, "", "__init__"]], "brainpy.layers.Flatten": [[216, 2, 1, "", "__init__"]], "brainpy.layers.FunAsLayer": [[217, 2, 1, "", "__init__"]], "brainpy.layers.GRU": [[218, 2, 1, "", "__init__"]], "brainpy.layers.GRUCell": [[219, 2, 1, "", "__init__"]], "brainpy.layers.GroupNorm": [[220, 2, 1, "", "__init__"]], "brainpy.layers.Identity": [[221, 2, 1, "", "__init__"]], "brainpy.layers.InstanceNorm": [[222, 2, 1, "", "__init__"]], "brainpy.layers.LSTM": [[223, 2, 1, "", "__init__"]], "brainpy.layers.LSTMCell": [[224, 2, 1, "", "__init__"]], "brainpy.layers.Layer": [[225, 2, 1, "", "__init__"]], "brainpy.layers.LayerNorm": [[226, 2, 1, "", "__init__"]], "brainpy.layers.MaxPool": [[228, 2, 1, "", "__init__"]], "brainpy.layers.MaxPool1d": [[229, 2, 1, "", "__init__"]], "brainpy.layers.MaxPool2d": [[230, 2, 1, "", "__init__"]], "brainpy.layers.MaxPool3d": [[231, 2, 1, "", "__init__"]], "brainpy.layers.MinPool": [[232, 2, 1, "", "__init__"]], "brainpy.layers.NVAR": [[233, 2, 1, "", "__init__"]], "brainpy.layers.RNNCell": [[234, 2, 1, "", "__init__"]], "brainpy.layers.Reservoir": [[235, 2, 1, "", "__init__"]], "brainpy.layers.VanillaRNN": [[236, 2, 1, "", "__init__"]], "brainpy.losses": [[237, 4, 1, "", "binary_logistic_loss"], [238, 4, 1, "", "cross_entropy_loss"], [239, 4, 1, "", "cross_entropy_sigmoid"], [240, 4, 1, "", "cross_entropy_sparse"], [241, 4, 1, "", "ctc_loss"], [242, 4, 1, "", "ctc_loss_with_forward_probs"], [243, 4, 1, "", "huber_loss"], [244, 4, 1, "", "l1_loos"], [245, 4, 1, "", "l2_loss"], [246, 4, 1, "", "l2_norm"], [247, 4, 1, "", "log_cosh"], [248, 4, 1, "", "log_cosh_loss"], [249, 4, 1, "", "mean_absolute"], [250, 4, 1, "", "mean_absolute_error"], [251, 4, 1, "", "mean_square"], [252, 4, 1, "", "mean_squared_error"], [253, 4, 1, "", "mean_squared_log_error"], [254, 4, 1, "", "multiclass_logistic_loss"], [255, 4, 1, "", "sigmoid_binary_cross_entropy"], [256, 4, 1, "", "smooth_labels"], [257, 4, 1, "", "softmax_cross_entropy"]], "brainpy.math": [[258, 1, 1, "", "BatchingMode"], [259, 1, 1, "", "BrainPyObject"], [260, 3, 1, "", "CONCAT_UPDATE"], [261, 1, 1, "", "DelayVariable"], [262, 1, 1, "", "FunAsObject"], [263, 1, 1, "", "LengthDelay"], [264, 1, 1, "", "Mode"], [265, 1, 1, "", "NeuLenDelay"], [266, 1, 1, "", "NeuTimeDelay"], [267, 1, 1, "", "NonBatchingMode"], [268, 1, 1, "", "ObjectTransform"], [269, 1, 1, "", "Parameter"], [270, 1, 1, "", "Partial"], [271, 3, 1, "", "ROTATE_UPDATE"], [272, 5, 1, "", "Tensor"], [273, 1, 1, "", "TimeDelay"], [274, 1, 1, "", "TrainVar"], [275, 1, 1, "", "TrainingMode"], [276, 1, 1, "", "Variable"], [277, 1, 1, "", "XLACustomOp"], [278, 4, 1, "", "abs"], [279, 4, 1, "", "absolute"], [280, 4, 1, "", "acos"], [281, 4, 1, "", "acosh"], [282, 4, 1, "", "add"], [283, 4, 1, "", "add_docstring"], [284, 4, 1, "", "add_newdoc"], [285, 4, 1, "", "add_newdoc_ufunc"], [286, 4, 1, "", "addcdiv"], [287, 4, 1, "", "addcmul"], [288, 4, 1, "", "all"], [289, 4, 1, "", "allclose"], [290, 4, 1, "", "alltrue"], [291, 4, 1, "", "amax"], [292, 4, 1, "", "amin"], [293, 4, 1, "", "angle"], [294, 4, 1, "", "any"], [295, 4, 1, "", "append"], [296, 4, 1, "", "apply_along_axis"], [297, 4, 1, "", "apply_over_axes"], [298, 4, 1, "", "arange"], [299, 4, 1, "", "arccos"], [300, 4, 1, "", "arccosh"], [301, 4, 1, "", "arcsin"], [302, 4, 1, "", "arcsinh"], [303, 4, 1, "", "arctan"], [304, 4, 1, "", "arctan2"], [305, 4, 1, "", "arctanh"], [306, 4, 1, "", "argmax"], [307, 4, 1, "", "argmin"], [308, 4, 1, "", "argsort"], [309, 4, 1, "", "argwhere"], [310, 4, 1, "", "around"], [311, 4, 1, "", "array"], [312, 4, 1, "", "array2string"], [313, 4, 1, "", "array_equal"], [314, 4, 1, "", "array_equiv"], [315, 4, 1, "", "array_repr"], [316, 4, 1, "", "array_split"], [317, 4, 1, "", "array_str"], [318, 4, 1, "", "as_device_array"], [319, 4, 1, "", "as_jax"], [320, 4, 1, "", "as_ndarray"], [321, 4, 1, "", "as_numpy"], [322, 4, 1, "", "as_variable"], [323, 4, 1, "", "asanyarray"], [324, 4, 1, "", "asarray"], [325, 4, 1, "", "ascontiguousarray"], [326, 4, 1, "", "asfarray"], [327, 4, 1, "", "asin"], [328, 4, 1, "", "asinh"], [329, 4, 1, "", "asmatrix"], [330, 4, 1, "", "asscalar"], [331, 4, 1, "", "atan"], [332, 4, 1, "", "atan2"], [333, 4, 1, "", "atanh"], [334, 4, 1, "", "atleast_1d"], [335, 4, 1, "", "atleast_2d"], [336, 4, 1, "", "atleast_3d"], [337, 4, 1, "", "average"], [338, 4, 1, "", "bartlett"], [339, 1, 1, "", "batching_environment"], [340, 3, 1, "", "batching_mode"], [341, 4, 1, "", "bincount"], [342, 4, 1, "", "bitwise_and"], [343, 4, 1, "", "bitwise_not"], [344, 4, 1, "", "bitwise_or"], [345, 4, 1, "", "bitwise_xor"], [346, 4, 1, "", "blackman"], [347, 4, 1, "", "block"], [348, 4, 1, "", "broadcast_arrays"], [349, 4, 1, "", "broadcast_shapes"], [350, 4, 1, "", "broadcast_to"], [351, 4, 1, "", "can_cast"], [352, 4, 1, "", "cast"], [353, 4, 1, "", "cat"], [354, 4, 1, "", "cbrt"], [355, 4, 1, "", "ceil"], [356, 4, 1, "", "celu"], [357, 4, 1, "", "choose"], [358, 4, 1, "", "clear_buffer_memory"], [359, 4, 1, "", "clip"], [360, 4, 1, "", "clip_by_value"], [361, 4, 1, "", "column_stack"], [362, 4, 1, "", "common_type"], [363, 4, 1, "", "compress"], [364, 4, 1, "", "concat"], [365, 4, 1, "", "concatenate"], [366, 4, 1, "", "cond"], [367, 4, 1, "", "conj"], [368, 4, 1, "", "conjugate"], [369, 4, 1, "", "convolve"], [370, 4, 1, "", "copy"], [371, 4, 1, "", "copysign"], [372, 4, 1, "", "copyto"], [373, 4, 1, "", "corrcoef"], [374, 4, 1, "", "correlate"], [375, 4, 1, "", "cos"], [376, 4, 1, "", "cosh"], [377, 4, 1, "", "count_nonzero"], [378, 4, 1, "", "cov"], [379, 4, 1, "", "cross"], [380, 4, 1, "", "csr_matvec"], [381, 4, 1, "", "cumprod"], [382, 4, 1, "", "cumproduct"], [383, 4, 1, "", "cumsum"], [384, 4, 1, "", "deg2rad"], [385, 4, 1, "", "degrees"], [386, 4, 1, "", "delete"], [387, 4, 1, "", "dftype"], [388, 4, 1, "", "diag"], [389, 4, 1, "", "diag_indices"], [390, 4, 1, "", "diag_indices_from"], [391, 4, 1, "", "diagflat"], [392, 4, 1, "", "diagonal"], [393, 4, 1, "", "diff"], [394, 4, 1, "", "digitize"], [395, 4, 1, "", "disable_gpu_memory_preallocation"], [396, 4, 1, "", "disable_x64"], [397, 4, 1, "", "disp"], [398, 4, 1, "", "ditype"], [399, 4, 1, "", "divide"], [400, 4, 1, "", "divmod"], [401, 4, 1, "", "dot"], [402, 4, 1, "", "dsplit"], [403, 4, 1, "", "dstack"], [404, 1, 1, "", "dtype"], [405, 1, 1, "", "dyn_dict"], [406, 1, 1, "", "dyn_seq"], [407, 3, 1, "", "e"], [408, 4, 1, "", "ediff1d"], [409, 4, 1, "", "einsum"], [410, 4, 1, "", "einsum_path"], [411, 4, 1, "", "elu"], [412, 4, 1, "", "empty"], [413, 4, 1, "", "empty_like"], [414, 4, 1, "", "enable_gpu_memory_preallocation"], [415, 4, 1, "", "enable_x64"], [416, 1, 1, "", "environment"], [417, 4, 1, "", "equal"], [418, 4, 1, "", "event_csr_matvec"], [419, 4, 1, "", "exp"], [420, 4, 1, "", "exp2"], [421, 4, 1, "", "expand_dims"], [422, 4, 1, "", "expm1"], [423, 4, 1, "", "extract"], [424, 4, 1, "", "eye"], [425, 4, 1, "", "fabs"], [972, 0, 0, "-", "fft"], [444, 4, 1, "", "fill_diagonal"], [445, 1, 1, "", "finfo"], [446, 4, 1, "", "fix"], [447, 4, 1, "", "flatnonzero"], [448, 4, 1, "", "flatten"], [449, 4, 1, "", "flip"], [450, 4, 1, "", "fliplr"], [451, 4, 1, "", "flipud"], [452, 4, 1, "", "float_power"], [453, 4, 1, "", "floor"], [454, 4, 1, "", "floor_divide"], [455, 4, 1, "", "fmax"], [456, 4, 1, "", "fmin"], [457, 4, 1, "", "fmod"], [458, 4, 1, "", "for_loop"], [459, 4, 1, "", "frexp"], [460, 4, 1, "", "frombuffer"], [461, 4, 1, "", "fromfile"], [462, 4, 1, "", "fromfunction"], [463, 4, 1, "", "fromiter"], [464, 4, 1, "", "fromstring"], [465, 4, 1, "", "full"], [466, 4, 1, "", "full_like"], [467, 4, 1, "", "function"], [468, 4, 1, "", "gcd"], [469, 4, 1, "", "gelu"], [470, 4, 1, "", "genfromtxt"], [471, 4, 1, "", "geomspace"], [472, 4, 1, "", "get_bool"], [473, 4, 1, "", "get_complex"], [474, 4, 1, "", "get_dt"], [475, 4, 1, "", "get_float"], [476, 4, 1, "", "get_int"], [477, 4, 1, "", "get_mode"], [478, 4, 1, "", "get_platform"], [479, 4, 1, "", "get_printoptions"], [480, 4, 1, "", "glu"], [481, 4, 1, "", "grad"], [482, 4, 1, "", "gradient"], [483, 4, 1, "", "greater"], [484, 4, 1, "", "greater_equal"], [485, 4, 1, "", "hamming"], [486, 4, 1, "", "hanning"], [487, 4, 1, "", "hard_sigmoid"], [488, 4, 1, "", "hard_silu"], [489, 4, 1, "", "hard_swish"], [490, 4, 1, "", "hard_tanh"], [491, 4, 1, "", "heaviside"], [492, 4, 1, "", "hessian"], [493, 4, 1, "", "histogram"], [494, 4, 1, "", "histogram2d"], [495, 4, 1, "", "histogram_bin_edges"], [496, 4, 1, "", "histogramdd"], [497, 4, 1, "", "hsplit"], [498, 4, 1, "", "hstack"], [499, 4, 1, "", "hypot"], [500, 4, 1, "", "i0"], [501, 4, 1, "", "identity"], [502, 4, 1, "", "ifelse"], [503, 1, 1, "", "iinfo"], [504, 4, 1, "", "imag"], [505, 4, 1, "", "in1d"], [506, 4, 1, "", "indices"], [507, 3, 1, "", "inf"], [508, 4, 1, "", "info"], [509, 4, 1, "", "inner"], [510, 4, 1, "", "insert"], [511, 4, 1, "", "interp"], [512, 4, 1, "", "intersect1d"], [513, 4, 1, "", "invert"], [514, 4, 1, "", "isclose"], [515, 4, 1, "", "iscomplex"], [516, 4, 1, "", "iscomplexobj"], [517, 4, 1, "", "isfinite"], [518, 4, 1, "", "isin"], [519, 4, 1, "", "isinf"], [520, 4, 1, "", "isnan"], [521, 4, 1, "", "isneginf"], [522, 4, 1, "", "isposinf"], [523, 4, 1, "", "isreal"], [524, 4, 1, "", "isrealobj"], [525, 4, 1, "", "isscalar"], [526, 4, 1, "", "issubclass_"], [527, 4, 1, "", "issubdtype"], [528, 4, 1, "", "issubsctype"], [529, 4, 1, "", "iterable"], [530, 4, 1, "", "ix_"], [531, 4, 1, "", "jacfwd"], [532, 4, 1, "", "jacobian"], [533, 4, 1, "", "jacrev"], [534, 4, 1, "", "jit"], [535, 4, 1, "", "kaiser"], [536, 4, 1, "", "kron"], [537, 4, 1, "", "lcm"], [538, 4, 1, "", "ldexp"], [539, 4, 1, "", "leaky_relu"], [540, 4, 1, "", "left_shift"], [541, 4, 1, "", "less"], [542, 4, 1, "", "less_equal"], [543, 4, 1, "", "lexsort"], [972, 0, 0, "-", "linalg"], [564, 4, 1, "", "linspace"], [565, 4, 1, "", "load"], [566, 4, 1, "", "loadtxt"], [567, 4, 1, "", "log"], [568, 4, 1, "", "log10"], [569, 4, 1, "", "log1p"], [570, 4, 1, "", "log2"], [571, 4, 1, "", "log_sigmoid"], [572, 4, 1, "", "log_softmax"], [573, 3, 1, "", "logaddexp"], [574, 3, 1, "", "logaddexp2"], [575, 4, 1, "", "logical_and"], [576, 4, 1, "", "logical_not"], [577, 4, 1, "", "logical_or"], [578, 4, 1, "", "logical_xor"], [579, 4, 1, "", "logspace"], [580, 4, 1, "", "make_cond"], [581, 4, 1, "", "make_loop"], [582, 4, 1, "", "make_while"], [583, 4, 1, "", "mask_indices"], [584, 4, 1, "", "mat"], [585, 4, 1, "", "matmul"], [586, 4, 1, "", "matrix"], [587, 4, 1, "", "max"], [588, 4, 1, "", "maximum"], [589, 4, 1, "", "mean"], [590, 4, 1, "", "median"], [591, 4, 1, "", "meshgrid"], [592, 4, 1, "", "min"], [593, 4, 1, "", "minimum"], [594, 4, 1, "", "mod"], [595, 4, 1, "", "modf"], [596, 4, 1, "", "moveaxis"], [597, 4, 1, "", "msort"], [598, 4, 1, "", "multiply"], [599, 4, 1, "", "nan_to_num"], [600, 4, 1, "", "nanargmax"], [601, 4, 1, "", "nanargmin"], [602, 4, 1, "", "nancumprod"], [603, 4, 1, "", "nancumsum"], [604, 4, 1, "", "nanmax"], [605, 4, 1, "", "nanmean"], [606, 4, 1, "", "nanmedian"], [607, 4, 1, "", "nanmin"], [608, 4, 1, "", "nanpercentile"], [609, 4, 1, "", "nanprod"], [610, 4, 1, "", "nanquantile"], [611, 4, 1, "", "nanstd"], [612, 4, 1, "", "nansum"], [613, 4, 1, "", "nanvar"], [614, 4, 1, "", "ndim"], [615, 4, 1, "", "negative"], [616, 4, 1, "", "nextafter"], [617, 3, 1, "", "nonbatching_mode"], [618, 4, 1, "", "nonzero"], [619, 4, 1, "", "normalize"], [620, 4, 1, "", "not_equal"], [621, 4, 1, "", "one_hot"], [622, 4, 1, "", "ones"], [623, 4, 1, "", "ones_like"], [624, 4, 1, "", "outer"], [625, 4, 1, "", "packbits"], [626, 4, 1, "", "pad"], [627, 4, 1, "", "percentile"], [628, 3, 1, "", "pi"], [629, 4, 1, "", "piecewise"], [630, 4, 1, "", "place"], [631, 4, 1, "", "poly"], [632, 4, 1, "", "polyadd"], [633, 4, 1, "", "polyder"], [634, 4, 1, "", "polydiv"], [635, 4, 1, "", "polyfit"], [636, 4, 1, "", "polyint"], [637, 4, 1, "", "polymul"], [638, 4, 1, "", "polysub"], [639, 4, 1, "", "polyval"], [640, 4, 1, "", "positive"], [641, 4, 1, "", "power"], [642, 4, 1, "", "pre2post_coo_event_sum"], [643, 4, 1, "", "pre2post_event_prod"], [644, 4, 1, "", "pre2post_event_sum"], [645, 4, 1, "", "pre2post_max"], [646, 4, 1, "", "pre2post_mean"], [647, 4, 1, "", "pre2post_min"], [648, 4, 1, "", "pre2post_prod"], [649, 4, 1, "", "pre2post_sum"], [650, 4, 1, "", "pre2syn"], [651, 4, 1, "", "printoptions"], [652, 4, 1, "", "prod"], [653, 4, 1, "", "product"], [654, 4, 1, "", "promote_types"], [655, 4, 1, "", "ptp"], [656, 4, 1, "", "put"], [657, 4, 1, "", "putmask"], [658, 4, 1, "", "quantile"], [659, 4, 1, "", "rad2deg"], [660, 4, 1, "", "radians"], [973, 0, 0, "-", "random"], [724, 4, 1, "", "ravel"], [725, 4, 1, "", "ravel_multi_index"], [726, 4, 1, "", "real"], [727, 4, 1, "", "reciprocal"], [728, 4, 1, "", "reduce_all"], [729, 4, 1, "", "reduce_any"], [730, 4, 1, "", "reduce_euclidean_norm"], [731, 4, 1, "", "reduce_logsumexp"], [732, 4, 1, "", "reduce_max"], [733, 4, 1, "", "reduce_mean"], [734, 4, 1, "", "reduce_min"], [735, 4, 1, "", "reduce_prod"], [736, 4, 1, "", "reduce_std"], [737, 4, 1, "", "reduce_sum"], [738, 4, 1, "", "reduce_variance"], [739, 4, 1, "", "relu"], [740, 4, 1, "", "relu6"], [741, 4, 1, "", "remainder"], [742, 4, 1, "", "repeat"], [743, 4, 1, "", "reshape"], [744, 4, 1, "", "resize"], [745, 4, 1, "", "result_type"], [746, 4, 1, "", "right_shift"], [747, 4, 1, "", "rint"], [748, 4, 1, "", "roll"], [749, 4, 1, "", "rollaxis"], [750, 4, 1, "", "roots"], [751, 4, 1, "", "rot90"], [752, 4, 1, "", "round"], [753, 4, 1, "", "round_"], [754, 4, 1, "", "row_stack"], [755, 4, 1, "", "safe_eval"], [756, 4, 1, "", "save"], [757, 4, 1, "", "savetxt"], [758, 4, 1, "", "savez"], [759, 4, 1, "", "savez_compressed"], [760, 4, 1, "", "searchsorted"], [761, 4, 1, "", "segment_max"], [762, 4, 1, "", "segment_mean"], [763, 4, 1, "", "segment_min"], [764, 4, 1, "", "segment_prod"], [765, 4, 1, "", "segment_sum"], [766, 4, 1, "", "select"], [767, 4, 1, "", "selu"], [768, 4, 1, "", "set_bool"], [769, 4, 1, "", "set_complex"], [770, 4, 1, "", "set_dt"], [771, 4, 1, "", "set_environment"], [772, 4, 1, "", "set_float"], [773, 4, 1, "", "set_host_device_count"], [774, 4, 1, "", "set_int"], [775, 4, 1, "", "set_mode"], [776, 4, 1, "", "set_platform"], [777, 4, 1, "", "set_printoptions"], [778, 4, 1, "", "setdiff1d"], [779, 4, 1, "", "setxor1d"], [780, 4, 1, "", "shape"], [781, 4, 1, "", "show_config"], [782, 4, 1, "", "sigmoid"], [783, 4, 1, "", "sign"], [784, 4, 1, "", "signbit"], [785, 4, 1, "", "silu"], [786, 4, 1, "", "sin"], [787, 4, 1, "", "sinc"], [788, 4, 1, "", "sinh"], [789, 4, 1, "", "size"], [790, 4, 1, "", "soft_sign"], [791, 4, 1, "", "softmax"], [792, 4, 1, "", "softplus"], [793, 4, 1, "", "sometrue"], [794, 4, 1, "", "sort"], [795, 4, 1, "", "sort_complex"], [796, 4, 1, "", "sparse_matmul"], [797, 4, 1, "", "split"], [798, 4, 1, "", "sqrt"], [799, 4, 1, "", "square"], [800, 4, 1, "", "squeeze"], [801, 4, 1, "", "stack"], [802, 4, 1, "", "std"], [803, 4, 1, "", "subtract"], [804, 4, 1, "", "sum"], [974, 0, 0, "-", "surrogate"], [825, 4, 1, "", "swapaxes"], [826, 4, 1, "", "swish"], [827, 4, 1, "", "syn2post"], [828, 4, 1, "", "syn2post_max"], [829, 4, 1, "", "syn2post_mean"], [830, 4, 1, "", "syn2post_min"], [831, 4, 1, "", "syn2post_prod"], [832, 4, 1, "", "syn2post_softmax"], [833, 4, 1, "", "syn2post_sum"], [834, 4, 1, "", "take"], [835, 4, 1, "", "take_along_axis"], [836, 4, 1, "", "tan"], [837, 4, 1, "", "tanh"], [838, 4, 1, "", "tensordot"], [839, 4, 1, "", "tile"], [840, 4, 1, "", "to_dynsys"], [841, 4, 1, "", "to_object"], [842, 4, 1, "", "trace"], [843, 1, 1, "", "training_environment"], [844, 3, 1, "", "training_mode"], [845, 4, 1, "", "transpose"], [846, 4, 1, "", "trapz"], [847, 4, 1, "", "tri"], [848, 4, 1, "", "tril"], [849, 4, 1, "", "tril_indices"], [850, 4, 1, "", "tril_indices_from"], [851, 4, 1, "", "trim_zeros"], [852, 4, 1, "", "triu"], [853, 4, 1, "", "triu_indices"], [854, 4, 1, "", "triu_indices_from"], [855, 4, 1, "", "true_divide"], [856, 4, 1, "", "trunc"], [857, 4, 1, "", "typename"], [858, 4, 1, "", "union1d"], [859, 4, 1, "", "unique"], [860, 4, 1, "", "unpackbits"], [861, 4, 1, "", "unravel_index"], [862, 4, 1, "", "unsorted_segment_max"], [863, 4, 1, "", "unsorted_segment_mean"], [864, 4, 1, "", "unsorted_segment_min"], [865, 4, 1, "", "unsorted_segment_prod"], [866, 4, 1, "", "unsorted_segment_sqrt_n"], [867, 4, 1, "", "unsorted_segment_sum"], [868, 4, 1, "", "unsqueeze"], [869, 4, 1, "", "unwrap"], [870, 4, 1, "", "vander"], [871, 4, 1, "", "var"], [872, 4, 1, "", "vdot"], [873, 4, 1, "", "vector_grad"], [874, 4, 1, "", "vsplit"], [875, 4, 1, "", "vstack"], [876, 4, 1, "", "where"], [877, 4, 1, "", "while_loop"], [878, 4, 1, "", "zeros"], [879, 4, 1, "", "zeros_like"]], "brainpy.math.BatchingMode": [[258, 2, 1, "", "__init__"]], "brainpy.math.BrainPyObject": [[259, 2, 1, "", "__init__"]], "brainpy.math.DelayVariable": [[261, 2, 1, "", "__init__"]], "brainpy.math.FunAsObject": [[262, 2, 1, "", "__init__"]], "brainpy.math.LengthDelay": [[263, 2, 1, "", "__init__"]], "brainpy.math.Mode": [[264, 2, 1, "", "__init__"]], "brainpy.math.NeuLenDelay": [[265, 2, 1, "", "__init__"]], "brainpy.math.NeuTimeDelay": [[266, 2, 1, "", "__init__"]], "brainpy.math.NonBatchingMode": [[267, 2, 1, "", "__init__"]], "brainpy.math.ObjectTransform": [[268, 2, 1, "", "__init__"]], "brainpy.math.Parameter": [[269, 2, 1, "", "__init__"]], "brainpy.math.Partial": [[270, 2, 1, "", "__init__"]], "brainpy.math.TimeDelay": [[273, 2, 1, "", "__init__"]], "brainpy.math.TrainVar": [[274, 2, 1, "", "__init__"]], "brainpy.math.TrainingMode": [[275, 2, 1, "", "__init__"]], "brainpy.math.Variable": [[276, 2, 1, "", "__init__"]], "brainpy.math.XLACustomOp": [[277, 2, 1, "", "__init__"]], "brainpy.math.batching_environment": [[339, 2, 1, "", "__init__"]], "brainpy.math.dtype": [[404, 2, 1, "", "__init__"]], "brainpy.math.dyn_dict": [[405, 2, 1, "", "__init__"]], "brainpy.math.dyn_seq": [[406, 2, 1, "", "__init__"]], "brainpy.math.environment": [[416, 2, 1, "", "__init__"]], "brainpy.math.fft": [[426, 4, 1, "", "fft"], [427, 4, 1, "", "fft2"], [428, 4, 1, "", "fftfreq"], [429, 4, 1, "", "fftn"], [430, 4, 1, "", "fftshift"], [431, 4, 1, "", "hfft"], [432, 4, 1, "", "ifft"], [433, 4, 1, "", "ifft2"], [434, 4, 1, "", "ifftn"], [435, 4, 1, "", "ifftshift"], [436, 4, 1, "", "ihfft"], [437, 4, 1, "", "irfft"], [438, 4, 1, "", "irfft2"], [439, 4, 1, "", "irfftn"], [440, 4, 1, "", "rfft"], [441, 4, 1, "", "rfft2"], [442, 4, 1, "", "rfftfreq"], [443, 4, 1, "", "rfftn"]], "brainpy.math.finfo": [[445, 2, 1, "", "__init__"], [445, 5, 1, "", "bits"], [445, 5, 1, "", "eps"], [445, 5, 1, "", "epsneg"], [445, 5, 1, "", "iexp"], [445, 5, 1, "", "machar"], [445, 5, 1, "", "machep"], [445, 5, 1, "", "max"], [445, 5, 1, "", "maxexp"], [445, 5, 1, "", "min"], [445, 5, 1, "", "minexp"], [445, 5, 1, "", "negep"], [445, 5, 1, "", "nexp"], [445, 5, 1, "", "nmant"], [445, 5, 1, "", "precision"], [445, 5, 1, "", "resolution"], [445, 5, 1, "", "smallest_normal"], [445, 5, 1, "", "smallest_subnormal"], [445, 5, 1, "", "tiny"]], "brainpy.math.iinfo": [[503, 2, 1, "", "__init__"], [503, 5, 1, "", "bits"], [503, 5, 1, "", "max"], [503, 5, 1, "", "min"]], "brainpy.math.linalg": [[544, 4, 1, "", "cholesky"], [545, 4, 1, "", "cond"], [546, 3, 1, "", "det"], [547, 4, 1, "", "eig"], [548, 4, 1, "", "eigh"], [549, 4, 1, "", "eigvals"], [550, 4, 1, "", "eigvalsh"], [551, 4, 1, "", "inv"], [552, 4, 1, "", "lstsq"], [553, 4, 1, "", "matrix_power"], [554, 4, 1, "", "matrix_rank"], [555, 4, 1, "", "multi_dot"], [556, 4, 1, "", "norm"], [557, 3, 1, "", "pinv"], [558, 4, 1, "", "qr"], [559, 4, 1, "", "slogdet"], [560, 4, 1, "", "solve"], [561, 4, 1, "", "svd"], [562, 4, 1, "", "tensorinv"], [563, 4, 1, "", "tensorsolve"]], "brainpy.math.random": [[661, 3, 1, "", "DEFAULT"], [662, 5, 1, "", "Generator"], [663, 1, 1, "", "RandomState"], [664, 4, 1, "", "bernoulli"], [665, 4, 1, "", "beta"], [666, 4, 1, "", "binomial"], [667, 4, 1, "", "categorical"], [668, 4, 1, "", "chisquare"], [669, 4, 1, "", "choice"], [670, 4, 1, "", "default_rng"], [671, 4, 1, "", "dirichlet"], [672, 4, 1, "", "exponential"], [673, 4, 1, "", "f"], [674, 4, 1, "", "gamma"], [675, 4, 1, "", "geometric"], [676, 4, 1, "", "gumbel"], [677, 4, 1, "", "hypergeometric"], [678, 4, 1, "", "laplace"], [679, 4, 1, "", "loggamma"], [680, 4, 1, "", "logistic"], [681, 4, 1, "", "lognormal"], [682, 4, 1, "", "logseries"], [683, 4, 1, "", "maxwell"], [684, 4, 1, "", "multinomial"], [685, 4, 1, "", "multivariate_normal"], [686, 4, 1, "", "negative_binomial"], [687, 4, 1, "", "noncentral_chisquare"], [688, 4, 1, "", "noncentral_f"], [689, 4, 1, "", "normal"], [690, 4, 1, "", "orthogonal"], [691, 4, 1, "", "pareto"], [692, 4, 1, "", "permutation"], [693, 4, 1, "", "poisson"], [694, 4, 1, "", "power"], [695, 4, 1, "", "rand"], [696, 4, 1, "", "rand_like"], [697, 4, 1, "", "randint"], [698, 4, 1, "", "randint_like"], [699, 4, 1, "", "randn"], [700, 4, 1, "", "randn_like"], [701, 4, 1, "", "random"], [702, 4, 1, "", "random_integers"], [703, 4, 1, "", "random_sample"], [704, 4, 1, "", "ranf"], [705, 4, 1, "", "rayleigh"], [706, 4, 1, "", "sample"], [707, 4, 1, "", "seed"], [708, 4, 1, "", "shuffle"], [709, 4, 1, "", "split_key"], [710, 4, 1, "", "standard_cauchy"], [711, 4, 1, "", "standard_exponential"], [712, 4, 1, "", "standard_gamma"], [713, 4, 1, "", "standard_normal"], [714, 4, 1, "", "standard_t"], [715, 4, 1, "", "t"], [716, 4, 1, "", "triangular"], [717, 4, 1, "", "truncated_normal"], [718, 4, 1, "", "uniform"], [719, 4, 1, "", "vonmises"], [720, 4, 1, "", "wald"], [721, 4, 1, "", "weibull"], [722, 4, 1, "", "weibull_min"], [723, 4, 1, "", "zipf"]], "brainpy.math.random.RandomState": [[663, 2, 1, "", "__init__"]], "brainpy.math.surrogate": [[805, 3, 1, "", "arctan"], [806, 3, 1, "", "erf"], [807, 3, 1, "", "gaussian_grad"], [808, 3, 1, "", "inv_square_grad"], [809, 3, 1, "", "inv_square_grad2"], [810, 3, 1, "", "leaky_relu"], [811, 3, 1, "", "log_tailed_relu"], [812, 3, 1, "", "multi_gaussian_grad"], [813, 3, 1, "", "nonzero_sign_log"], [814, 3, 1, "", "piecewise_exp"], [815, 3, 1, "", "piecewise_leaky_relu"], [816, 3, 1, "", "piecewise_quadratic"], [817, 3, 1, "", "q_pseudo_spike"], [818, 3, 1, "", "relu_grad"], [819, 3, 1, "", "relu_grad2"], [820, 3, 1, "", "s2nn"], [821, 3, 1, "", "sigmoid"], [822, 3, 1, "", "slayer_grad"], [823, 3, 1, "", "soft_sign"], [824, 3, 1, "", "squarewave_fourier_series"]], "brainpy.math.training_environment": [[843, 2, 1, "", "__init__"]], "brainpy.measure": [[880, 4, 1, "", "cross_correlation"], [881, 4, 1, "", "firing_rate"], [882, 4, 1, "", "functional_connectivity"], [883, 4, 1, "", "matrix_correlation"], [884, 4, 1, "", "raster_plot"], [885, 4, 1, "", "unitary_LFP"], [886, 4, 1, "", "voltage_fluctuation"], [887, 4, 1, "", "weighted_correlation"]], "brainpy.neurons": [[888, 1, 1, "", "ALIFBellec2020"], [889, 1, 1, "", "AdExIF"], [890, 1, 1, "", "AdQuaIF"], [891, 1, 1, "", "ExpIF"], [892, 1, 1, "", "FHN"], [893, 1, 1, "", "FractionalFHR"], [894, 1, 1, "", "FractionalIzhikevich"], [895, 1, 1, "", "FractionalNeuron"], [896, 1, 1, "", "GIF"], [897, 1, 1, "", "HH"], [898, 1, 1, "", "HindmarshRose"], [899, 1, 1, "", "InputGroup"], [900, 1, 1, "", "Izhikevich"], [901, 1, 1, "", "LIF"], [902, 1, 1, "", "LeakyIntegrator"], [903, 1, 1, "", "MorrisLecar"], [904, 1, 1, "", "OUProcess"], [905, 1, 1, "", "OutputGroup"], [906, 1, 1, "", "PinskyRinzelModel"], [907, 1, 1, "", "PoissonGroup"], [908, 1, 1, "", "QuaIF"], [909, 1, 1, "", "SpikeTimeGroup"], [910, 1, 1, "", "WangBuzsakiModel"]], "brainpy.neurons.ALIFBellec2020": [[888, 2, 1, "", "__init__"]], "brainpy.neurons.AdExIF": [[889, 2, 1, "", "__init__"]], "brainpy.neurons.AdQuaIF": [[890, 2, 1, "", "__init__"]], "brainpy.neurons.ExpIF": [[891, 2, 1, "", "__init__"]], "brainpy.neurons.FHN": [[892, 2, 1, "", "__init__"]], "brainpy.neurons.FractionalFHR": [[893, 2, 1, "", "__init__"]], "brainpy.neurons.FractionalIzhikevich": [[894, 2, 1, "", "__init__"]], "brainpy.neurons.FractionalNeuron": [[895, 2, 1, "", "__init__"]], "brainpy.neurons.GIF": [[896, 2, 1, "", "__init__"]], "brainpy.neurons.HH": [[897, 2, 1, "", "__init__"]], "brainpy.neurons.HindmarshRose": [[898, 2, 1, "", "__init__"]], "brainpy.neurons.InputGroup": [[899, 2, 1, "", "__init__"]], "brainpy.neurons.Izhikevich": [[900, 2, 1, "", "__init__"]], "brainpy.neurons.LIF": [[901, 2, 1, "", "__init__"]], "brainpy.neurons.LeakyIntegrator": [[902, 2, 1, "", "__init__"]], "brainpy.neurons.MorrisLecar": [[903, 2, 1, "", "__init__"]], "brainpy.neurons.OUProcess": [[904, 2, 1, "", "__init__"]], "brainpy.neurons.OutputGroup": [[905, 2, 1, "", "__init__"]], "brainpy.neurons.PinskyRinzelModel": [[906, 2, 1, "", "__init__"]], "brainpy.neurons.PoissonGroup": [[907, 2, 1, "", "__init__"]], "brainpy.neurons.QuaIF": [[908, 2, 1, "", "__init__"]], "brainpy.neurons.SpikeTimeGroup": [[909, 2, 1, "", "__init__"]], "brainpy.neurons.WangBuzsakiModel": [[910, 2, 1, "", "__init__"]], "brainpy.optim": [[912, 1, 1, "", "Adadelta"], [913, 1, 1, "", "Adagrad"], [914, 1, 1, "", "Adam"], [915, 1, 1, "", "AdamW"], [916, 1, 1, "", "Adan"], [917, 1, 1, "", "Constant"], [918, 1, 1, "", "CosineAnnealingLR"], [919, 1, 1, "", "CosineAnnealingWarmRestarts"], [920, 1, 1, "", "ExponentialDecay"], [921, 1, 1, "", "ExponentialLR"], [922, 1, 1, "", "InverseTimeDecay"], [923, 1, 1, "", "LARS"], [924, 1, 1, "", "Momentum"], [925, 1, 1, "", "MomentumNesterov"], [926, 1, 1, "", "MultiStepLR"], [927, 1, 1, "", "Optimizer"], [928, 1, 1, "", "PiecewiseConstant"], [929, 1, 1, "", "PolynomialDecay"], [930, 1, 1, "", "RMSProp"], [931, 1, 1, "", "SGD"], [932, 1, 1, "", "Scheduler"], [933, 1, 1, "", "StepLR"], [934, 4, 1, "", "make_schedule"]], "brainpy.optim.Adadelta": [[912, 2, 1, "", "__init__"]], "brainpy.optim.Adagrad": [[913, 2, 1, "", "__init__"]], "brainpy.optim.Adam": [[914, 2, 1, "", "__init__"]], "brainpy.optim.AdamW": [[915, 2, 1, "", "__init__"]], "brainpy.optim.Adan": [[916, 2, 1, "", "__init__"]], "brainpy.optim.Constant": [[917, 2, 1, "", "__init__"]], "brainpy.optim.CosineAnnealingLR": [[918, 2, 1, "", "__init__"]], "brainpy.optim.CosineAnnealingWarmRestarts": [[919, 2, 1, "", "__init__"]], "brainpy.optim.ExponentialDecay": [[920, 2, 1, "", "__init__"]], "brainpy.optim.ExponentialLR": [[921, 2, 1, "", "__init__"]], "brainpy.optim.InverseTimeDecay": [[922, 2, 1, "", "__init__"]], "brainpy.optim.LARS": [[923, 2, 1, "", "__init__"]], "brainpy.optim.Momentum": [[924, 2, 1, "", "__init__"]], "brainpy.optim.MomentumNesterov": [[925, 2, 1, "", "__init__"]], "brainpy.optim.MultiStepLR": [[926, 2, 1, "", "__init__"]], "brainpy.optim.Optimizer": [[927, 2, 1, "", "__init__"]], "brainpy.optim.PiecewiseConstant": [[928, 2, 1, "", "__init__"]], "brainpy.optim.PolynomialDecay": [[929, 2, 1, "", "__init__"]], "brainpy.optim.RMSProp": [[930, 2, 1, "", "__init__"]], "brainpy.optim.SGD": [[931, 2, 1, "", "__init__"]], "brainpy.optim.Scheduler": [[932, 2, 1, "", "__init__"]], "brainpy.optim.StepLR": [[933, 2, 1, "", "__init__"]], "brainpy.rates": [[935, 1, 1, "", "FHN"], [936, 1, 1, "", "FeedbackFHN"], [937, 1, 1, "", "QIF"], [938, 1, 1, "", "RateModel"], [939, 1, 1, "", "StuartLandauOscillator"], [940, 1, 1, "", "ThresholdLinearModel"], [941, 1, 1, "", "WilsonCowanModel"]], "brainpy.rates.FHN": [[935, 2, 1, "", "__init__"]], "brainpy.rates.FeedbackFHN": [[936, 2, 1, "", "__init__"]], "brainpy.rates.QIF": [[937, 2, 1, "", "__init__"]], "brainpy.rates.RateModel": [[938, 2, 1, "", "__init__"]], "brainpy.rates.StuartLandauOscillator": [[939, 2, 1, "", "__init__"]], "brainpy.rates.ThresholdLinearModel": [[940, 2, 1, "", "__init__"]], "brainpy.rates.WilsonCowanModel": [[941, 2, 1, "", "__init__"]], "brainpy.running": [[942, 4, 1, "", "cpu_ordered_parallel"], [943, 4, 1, "", "cpu_unordered_parallel"], [944, 4, 1, "", "jax_parallelize_map"], [945, 4, 1, "", "jax_vectorize_map"], [946, 4, 1, "", "process_pool"], [947, 4, 1, "", "process_pool_lock"]], "brainpy.synapses": [[949, 1, 1, "", "AMPA"], [950, 1, 1, "", "AdditiveCoupling"], [951, 1, 1, "", "Alpha"], [952, 1, 1, "", "BioNMDA"], [953, 1, 1, "", "DelayCoupling"], [954, 1, 1, "", "Delta"], [955, 1, 1, "", "DiffusiveCoupling"], [956, 1, 1, "", "DualExponential"], [957, 1, 1, "", "Exponential"], [958, 1, 1, "", "GABAa"], [959, 1, 1, "", "GapJunction"], [960, 1, 1, "", "NMDA"], [961, 1, 1, "", "PoissonInput"]], "brainpy.synapses.AMPA": [[949, 2, 1, "", "__init__"]], "brainpy.synapses.AdditiveCoupling": [[950, 2, 1, "", "__init__"]], "brainpy.synapses.Alpha": [[951, 2, 1, "", "__init__"]], "brainpy.synapses.BioNMDA": [[952, 2, 1, "", "__init__"]], "brainpy.synapses.DelayCoupling": [[953, 2, 1, "", "__init__"]], "brainpy.synapses.Delta": [[954, 2, 1, "", "__init__"]], "brainpy.synapses.DiffusiveCoupling": [[955, 2, 1, "", "__init__"]], "brainpy.synapses.DualExponential": [[956, 2, 1, "", "__init__"]], "brainpy.synapses.Exponential": [[957, 2, 1, "", "__init__"]], "brainpy.synapses.GABAa": [[958, 2, 1, "", "__init__"]], "brainpy.synapses.GapJunction": [[959, 2, 1, "", "__init__"]], "brainpy.synapses.NMDA": [[960, 2, 1, "", "__init__"]], "brainpy.synapses.PoissonInput": [[961, 2, 1, "", "__init__"]], "brainpy.synouts": [[962, 1, 1, "", "COBA"], [963, 1, 1, "", "CUBA"], [964, 1, 1, "", "MgBlock"]], "brainpy.synouts.COBA": [[962, 2, 1, "", "__init__"]], "brainpy.synouts.CUBA": [[963, 2, 1, "", "__init__"]], "brainpy.synouts.MgBlock": [[964, 2, 1, "", "__init__"]], "brainpy.synplast": [[965, 1, 1, "", "STD"], [966, 1, 1, "", "STP"]], "brainpy.synplast.STD": [[965, 2, 1, "", "__init__"]], "brainpy.synplast.STP": [[966, 2, 1, "", "__init__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"brainpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 991, 992, 993, 995, 996, 997, 998, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1020, 1021, 1022, 1024, 1027], "analysi": [0, 31, 32, 33, 34, 35, 36, 37, 987, 994, 999, 1001, 1002, 1006], "modul": [0, 1, 2, 3, 4, 5, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "low": [0, 994, 1002], "dimension": [0, 987, 994, 1000, 1002], "analyz": [0, 987, 994, 1000, 1002], "high": [0, 987, 1000], "numer": [1, 1019, 1020, 1023, 1026], "differenti": [1, 997, 1019, 1020, 1022, 1023, 1026], "integr": [1, 2, 15, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 969, 998, 1007, 1023, 1026], "build": [1, 989, 1003, 1004, 1005, 1009, 1030], "dynam": [1, 972, 983, 986, 987, 989, 990, 991, 1006, 1028], "system": [1, 2, 983, 987, 994, 995, 1002, 1006, 1019, 1026], "simul": [1, 2, 989, 1006, 1010, 1016, 1017, 1018], "train": [1, 984, 990, 1029, 1030, 1031, 1032, 1033, 1034], "helper": 1, "releas": 2, "note": 2, "2": [2, 983, 988, 996, 998, 1000, 1004, 1005, 1006, 1008, 1012, 1015, 1019, 1021, 1023, 1027, 1028, 1031], "x": 2, "version": 2, "1": [2, 983, 984, 988, 996, 998, 1000, 1004, 1005, 1006, 1008, 1012, 1015, 1019, 1021, 1023, 1027, 1028, 1031], "2022": 2, "09": 2, "bug": 2, "fix": [2, 446], "new": 2, "featur": 2, "0": 2, "08": 2, "12": 2, "backward": 2, "incompat": 2, "chang": [2, 1010], "deprec": 2, "what": [2, 983, 1000, 1006], "": 2, "05": 2, "17": 2, "highlight": 2, "11": 2, "15": 2, "10": 2, "8": [2, 1021], "04": 2, "26": 2, "7": [2, 1021], "22": 2, "5": [2, 1019, 1021], "18": 2, "4": [2, 1005, 1006, 1015, 1019, 1021, 1027], "3": [2, 988, 996, 998, 1005, 1006, 1008, 1015, 1019, 1021, 1023, 1027, 1028], "03": 2, "27": 2, "23": 2, "14": 2, "02": 2, "01": 2, "31": 2, "2021": 2, "document": [2, 986], "13": 2, "math": [2, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 972, 973, 974, 983, 985, 996, 997, 998, 1008, 1011, 1012, 1013, 1015], "base": [2, 4, 969, 989, 1003, 1012, 1027, 1028], "comput": [2, 972, 983, 1006, 1008, 1030], "api": [2, 986], "profil": 2, "set": [2, 972, 1002, 1030], "core": [2, 986], "packag": 2, "instal": [2, 988], "model": [2, 3, 976, 980, 983, 987, 989, 990, 991, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1016, 1023, 1029, 1030, 1032, 1033, 1034], "exampl": [2, 984, 991, 996, 1000, 1005, 1010, 1019, 1023, 1026, 1030], "channel": [3, 8, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 1003], "basic": [3, 967, 970], "class": [3, 4, 967, 970, 996, 997, 1004, 1027, 1028], "voltag": 3, "depend": [3, 988], "sodium": 3, "potassium": 3, "calcium": [3, 38], "hyperpolar": 3, "activ": [3, 191, 972], "cation": 3, "leakag": 3, "connect": [4, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 970, 1008, 1027], "tool": 4, "custom": [4, 1004, 1006, 1007, 1008, 1024, 1025, 1027, 1028, 1029, 1030, 1033], "random": [4, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 967, 972, 973, 1014, 1027, 1028], "regular": [4, 967, 971, 1027, 1028], "encod": [5, 111, 112, 113, 114], "bpff": 6, "bptt": 7, "condneugroup": 9, "contain": [10, 995], "dsrunner": [11, 983, 1018], "dstrainer": 12, "dynamicalsystem": [13, 983, 1006], "forcetrain": 14, "integratorrunn": 16, "jointeq": [17, 1022], "loopovertim": 18, "network": [19, 984, 989, 990, 996, 1000, 1004, 1030, 1031], "neugroup": [20, 1007], "nosharedarg": 21, "offlinetrain": 22, "onlinetrain": 23, "ridgetrain": 24, "sequenti": 25, "synconn": 26, "synltp": 27, "synout": [28, 962, 963, 964, 981], "synstp": 29, "twoendconn": [30, 1005, 1008], "bifurcation1d": 31, "bifurcation2d": 32, "fastslow1d": 33, "fastslow2d": 34, "phaseplane1d": 35, "phaseplane2d": 36, "slowpointfind": 37, "calciumchannel": 39, "calciumdetail": 40, "calciumdyna": 41, "calciumfirstord": 42, "calciumfix": 43, "iahp_de1994": 44, "icaht_hm1992": 45, "ical_is2008": 46, "ican_is2008": 47, "icat_hm1992": 48, "icat_hp1992": 49, "ika1_hm1992": 50, "ika2_hm1992": 51, "ikdr_ba2002": 52, "ikk2a_hm1992": 53, "ikk2b_hm1992": 54, "ikl": 55, "ikni_ya1989": 56, "ik_hh1952": 57, "ik_tm1991": 58, "il": 59, "ina_ba2002": 60, "ina_hh1952": 61, "ina_tm1991": 62, "ihchannel": 63, "ih_de1996": 64, "ih_hm1992": 65, "ion": [66, 1003], "ionchannel": 67, "leakychannel": 68, "potassiumchannel": 69, "sodiumchannel": 70, "all2al": [71, 1027], "conn_mat": [72, 1008, 1027], "csrconn": 73, "connector": [74, 1027], "fixedpostnum": [75, 1027], "fixedprenum": [76, 1027], "fixedprob": [77, 1027], "fixedtotalnum": 78, "gaussianprob": [79, 1027], "grideight": [80, 1027], "gridfour": [81, 1027], "gridn": [82, 1027], "ijconn": [83, 1027], "matconn": [84, 1027], "one2on": [85, 1027], "oneendconnector": [86, 1027], "post2pr": [87, 1027], "post2syn": [88, 1027], "post_id": [89, 1027], "pre2post": [90, 1008, 1027], "pre2syn": [91, 650, 1008, 1027], "pre_id": [92, 1027], "powerlaw": [93, 1027], "probdist": 94, "scalefreeba": [95, 1027], "scalefreebadu": [96, 1027], "smallworld": [97, 1027], "sparsematconn": [98, 1027], "twoendconnector": [99, 1027], "coo2csc": 100, "coo2csr": 101, "coo2mat": 102, "csr2coo": 103, "csr2csc": 104, "csr2mat": 105, "grid_eight": 106, "grid_four": 107, "mat2coo": 108, "mat2csc": 109, "mat2csr": 110, "latencyencod": 112, "poissonencod": 113, "weightedphaseencod": 114, "fdeint": 115, "initi": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 967, 1010, 1018, 1019, 1028, 1030], "constant": [116, 917, 1019], "dogdecai": 117, "deltaorthogon": 118, "gaussiandecai": 119, "ident": [120, 221, 501], "interlayeriniti": [122, 1028], "intralayeriniti": [123, 1028], "kaimingnorm": 124, "kaiminguniform": 125, "lecunnorm": 126, "lecununiform": 127, "normal": [128, 619, 689, 969, 970], "oneinit": 129, "orthogon": [130, 690], "uniform": [131, 718], "variancesc": 132, "xaviernorm": 133, "xavieruniform": 134, "zeroinit": 135, "input": [136, 137, 138, 139, 140, 141, 142, 143, 968, 976, 1018, 1021, 1031], "constant_input": [136, 1021], "ou_process": [137, 1021], "ramp_input": [138, 1021], "section_input": [139, 1021], "sinusoidal_input": [140, 1021], "spike_input": [141, 1021], "square_input": [142, 1021], "wiener_process": [143, 1021], "fde": [144, 145, 146, 147, 148, 149, 150, 151, 969, 1019, 1020], "caputoeul": [144, 1020], "caputol1schema": [145, 1020], "fdeintegr": 146, "glshortmemori": [147, 1020], "get_default_fdeint": 148, "get_supported_method": [149, 175, 188], "register_fde_integr": 150, "set_default_fdeint": 151, "od": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 969, 1019, 1023], "adaptiverkintegr": 152, "bogackishampin": 153, "cashkarp": 154, "dormandprinc": 155, "euler": [156, 178, 1023], "explicitrkintegr": 157, "exponentialeul": [158, 179], "heun2": 159, "heun3": 160, "heuneul": 161, "midpoint": 162, "odeintegr": 163, "rk2": 164, "rk3": 165, "rk4": 166, "rk4rule38": 167, "rkf12": 168, "rkf45": 169, "ralston2": 170, "ralston3": 171, "ralston4": 172, "ssprk3": 173, "get_default_odeint": 174, "register_ode_integr": 176, "set_default_odeint": 177, "sde": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 969, 1019, 1026], "heun": 180, "klpl": 181, "milstein": 182, "milsteingradfre": 183, "sdeintegr": 184, "srk1w1": 185, "srk2w1": 186, "get_default_sdeint": 187, "register_sde_integr": 189, "set_default_sdeint": 190, "layer": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 970], "paramet": [191, 216, 269, 999, 1010, 1015, 1017, 1030], "adaptiveavgpool1d": 192, "adaptiveavgpool2d": 193, "adaptiveavgpool3d": 194, "adaptivemaxpool1d": 195, "adaptivemaxpool2d": 196, "adaptivemaxpool3d": 197, "avgpool": 198, "avgpool1d": 199, "avgpool2d": 200, "avgpool3d": 201, "batchnorm1d": 202, "batchnorm2d": 203, "batchnorm3d": 204, "conv1d": 205, "conv1dlstmcel": 206, "conv2d": 207, "conv2dlstmcel": 208, "conv3d": 209, "conv3dlstmcel": 210, "convtranspose1d": 211, "convtranspose2d": 212, "convtranspose3d": 213, "dens": [214, 970, 1008], "dropout": [215, 970], "flatten": [216, 448], "funaslay": 217, "gru": 218, "grucel": 219, "groupnorm": 220, "instancenorm": 222, "lstm": 223, "lstmcell": 224, "layernorm": 226, "linear": [227, 972], "maxpool": 228, "maxpool1d": 229, "maxpool2d": 230, "maxpool3d": 231, "minpool": 232, "nvar": [233, 970], "rnncell": 234, "reservoir": [235, 970, 990, 1030, 1031, 1033, 1034], "vanillarnn": 236, "loss": [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 971], "binary_logistic_loss": 237, "cross_entropy_loss": 238, "cross_entropy_sigmoid": 239, "cross_entropy_spars": 240, "ctc_loss": 241, "ctc_loss_with_forward_prob": 242, "huber_loss": 243, "l1_loo": 244, "l2_loss": 245, "l2_norm": 246, "log_cosh": 247, "log_cosh_loss": 248, "mean_absolut": 249, "mean_absolute_error": 250, "mean_squar": 251, "mean_squared_error": 252, "mean_squared_log_error": 253, "multiclass_logistic_loss": 254, "sigmoid_binary_cross_entropi": 255, "smooth_label": 256, "softmax_cross_entropi": 257, "batchingmod": 258, "brainpyobject": [259, 984, 995, 996, 997], "concat_upd": 260, "delayvari": 261, "funasobject": 262, "lengthdelai": 263, "mode": [264, 972, 983, 1030], "neulendelai": 265, "neutimedelai": 266, "nonbatchingmod": 267, "objecttransform": 268, "partial": 270, "rotate_upd": 271, "tensor": 272, "timedelai": 273, "trainvar": [274, 1015], "trainingmod": 275, "variabl": [276, 972, 984, 1008, 1011, 1012, 1015, 1019, 1025], "xlacustomop": 277, "ab": 278, "absolut": [279, 995], "aco": 280, "acosh": 281, "add": 282, "add_docstr": 283, "add_newdoc": 284, "add_newdoc_ufunc": 285, "addcdiv": 286, "addcmul": 287, "all": 288, "allclos": 289, "alltru": 290, "amax": 291, "amin": 292, "angl": 293, "ani": 294, "append": 295, "apply_along_axi": 296, "apply_over_ax": 297, "arang": 298, "arcco": 299, "arccosh": 300, "arcsin": 301, "arcsinh": 302, "arctan": [303, 805], "arctan2": 304, "arctanh": 305, "argmax": 306, "argmin": 307, "argsort": 308, "argwher": 309, "around": 310, "arrai": [311, 972], "array2str": 312, "array_equ": 313, "array_equiv": 314, "array_repr": 315, "array_split": 316, "array_str": 317, "as_device_arrai": 318, "as_jax": 319, "as_ndarrai": 320, "as_numpi": 321, "as_vari": 322, "asanyarrai": 323, "asarrai": 324, "ascontiguousarrai": 325, "asfarrai": 326, "asin": 327, "asinh": 328, "asmatrix": 329, "asscalar": 330, "atan": 331, "atan2": 332, "atanh": 333, "atleast_1d": 334, "atleast_2d": 335, "atleast_3d": 336, "averag": 337, "bartlett": 338, "batching_environ": 339, "batching_mod": 340, "bincount": 341, "bitwise_and": 342, "bitwise_not": 343, "bitwise_or": 344, "bitwise_xor": 345, "blackman": 346, "block": 347, "broadcast_arrai": 348, "broadcast_shap": 349, "broadcast_to": 350, "can_cast": 351, "cast": 352, "cat": 353, "cbrt": 354, "ceil": 355, "celu": 356, "choos": 357, "clear_buffer_memori": 358, "clip": 359, "clip_by_valu": 360, "column_stack": 361, "common_typ": 362, "compress": 363, "concat": 364, "concaten": 365, "cond": [366, 545], "conj": 367, "conjug": 368, "convolv": 369, "copi": 370, "copysign": 371, "copyto": 372, "corrcoef": 373, "correl": 374, "co": 375, "cosh": 376, "count_nonzero": 377, "cov": 378, "cross": 379, "csr_matvec": 380, "cumprod": 381, "cumproduct": 382, "cumsum": 383, "deg2rad": 384, "degre": 385, "delet": 386, "dftype": 387, "diag": 388, "diag_indic": 389, "diag_indices_from": 390, "diagflat": 391, "diagon": 392, "diff": 393, "digit": 394, "disable_gpu_memory_prealloc": 395, "disable_x64": 396, "disp": 397, "dityp": 398, "divid": 399, "divmod": 400, "dot": 401, "dsplit": 402, "dstack": 403, "dtype": 404, "dyn_dict": 405, "dyn_seq": 406, "e": [407, 989, 1004], "ediff1d": 408, "einsum": 409, "einsum_path": 410, "elu": 411, "empti": 412, "empty_lik": 413, "enable_gpu_memory_prealloc": 414, "enable_x64": 415, "environ": [416, 972], "equal": 417, "event_csr_matvec": 418, "exp": 419, "exp2": 420, "expand_dim": 421, "expm1": 422, "extract": 423, "ey": 424, "fab": 425, "fft": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 972], "fft2": 427, "fftfreq": 428, "fftn": 429, "fftshift": 430, "hfft": 431, "ifft": 432, "ifft2": 433, "ifftn": 434, "ifftshift": 435, "ihfft": 436, "irfft": 437, "irfft2": 438, "irfftn": 439, "rfft": 440, "rfft2": 441, "rfftfreq": 442, "rfftn": 443, "fill_diagon": 444, "finfo": 445, "flatnonzero": 447, "flip": 449, "fliplr": 450, "flipud": 451, "float_pow": 452, "floor": 453, "floor_divid": 454, "fmax": 455, "fmin": 456, "fmod": 457, "for_loop": [458, 983, 1012], "frexp": 459, "frombuff": 460, "fromfil": 461, "fromfunct": 462, "fromit": 463, "fromstr": 464, "full": 465, "full_lik": 466, "function": [467, 969, 970, 972, 983, 984, 995, 996, 997, 998, 1004, 1014, 1019, 1021, 1023, 1026], "gcd": 468, "gelu": 469, "genfromtxt": 470, "geomspac": 471, "get_bool": 472, "get_complex": 473, "get_dt": 474, "get_float": 475, "get_int": 476, "get_mod": 477, "get_platform": 478, "get_printopt": 479, "glu": 480, "grad": [481, 997], "gradient": [482, 972, 997, 1024], "greater": 483, "greater_equ": 484, "ham": 485, "han": 486, "hard_sigmoid": 487, "hard_silu": 488, "hard_swish": 489, "hard_tanh": 490, "heavisid": 491, "hessian": 492, "histogram": 493, "histogram2d": 494, "histogram_bin_edg": 495, "histogramdd": 496, "hsplit": 497, "hstack": 498, "hypot": 499, "i0": 500, "ifels": [502, 1012], "iinfo": 503, "imag": 504, "in1d": 505, "indic": [506, 986], "inf": 507, "info": 508, "inner": 509, "insert": 510, "interp": 511, "intersect1d": 512, "invert": 513, "isclos": 514, "iscomplex": 515, "iscomplexobj": 516, "isfinit": 517, "isin": 518, "isinf": 519, "isnan": 520, "isneginf": 521, "isposinf": 522, "isreal": 523, "isrealobj": 524, "isscalar": 525, "issubclass_": 526, "issubdtyp": 527, "issubsctyp": 528, "iter": [529, 1018], "ix_": 530, "jacfwd": 531, "jacobian": [532, 997], "jacrev": 533, "jit": [534, 996, 1012, 1014], "kaiser": 535, "kron": 536, "lcm": 537, "ldexp": 538, "leaky_relu": [539, 810], "left_shift": 540, "less": 541, "less_equ": 542, "lexsort": 543, "linalg": [544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 972], "choleski": 544, "det": 546, "eig": 547, "eigh": 548, "eigval": 549, "eigvalsh": 550, "inv": 551, "lstsq": 552, "matrix_pow": 553, "matrix_rank": 554, "multi_dot": 555, "norm": 556, "pinv": 557, "qr": 558, "slogdet": 559, "solv": 560, "svd": 561, "tensorinv": 562, "tensorsolv": 563, "linspac": 564, "load": [565, 995, 1025], "loadtxt": 566, "log": 567, "log10": 568, "log1p": 569, "log2": 570, "log_sigmoid": 571, "log_softmax": 572, "logaddexp": 573, "logaddexp2": 574, "logical_and": 575, "logical_not": 576, "logical_or": 577, "logical_xor": 578, "logspac": 579, "make_cond": 580, "make_loop": 581, "make_whil": 582, "mask_indic": 583, "mat": 584, "matmul": 585, "matrix": [586, 1019, 1028], "max": 587, "maximum": 588, "mean": 589, "median": 590, "meshgrid": 591, "min": 592, "minimum": 593, "mod": 594, "modf": 595, "moveaxi": 596, "msort": 597, "multipli": 598, "nan_to_num": 599, "nanargmax": 600, "nanargmin": 601, "nancumprod": 602, "nancumsum": 603, "nanmax": 604, "nanmean": 605, "nanmedian": 606, "nanmin": 607, "nanpercentil": 608, "nanprod": 609, "nanquantil": 610, "nanstd": 611, "nansum": 612, "nanvar": 613, "ndim": 614, "neg": 615, "nextaft": 616, "nonbatching_mod": 617, "nonzero": 618, "not_equ": 620, "one_hot": 621, "ones": 622, "ones_lik": 623, "outer": 624, "packbit": 625, "pad": 626, "percentil": 627, "pi": 628, "piecewis": 629, "place": [630, 1011, 1015], "poli": 631, "polyadd": 632, "polyd": 633, "polydiv": 634, "polyfit": 635, "polyint": 636, "polymul": 637, "polysub": 638, "polyv": 639, "posit": 640, "power": [641, 694], "pre2post_coo_event_sum": 642, "pre2post_event_prod": 643, "pre2post_event_sum": 644, "pre2post_max": 645, "pre2post_mean": 646, "pre2post_min": 647, "pre2post_prod": 648, "pre2post_sum": 649, "printopt": 651, "prod": 652, "product": 653, "promote_typ": 654, "ptp": 655, "put": 656, "putmask": 657, "quantil": 658, "rad2deg": 659, "radian": 660, "default": 661, "gener": [662, 969, 972, 1006, 1014, 1021, 1031], "randomst": [663, 996, 1014, 1015], "bernoulli": 664, "beta": 665, "binomi": 666, "categor": 667, "chisquar": 668, "choic": 669, "default_rng": 670, "dirichlet": 671, "exponenti": [672, 957, 969, 1005, 1008, 1023], "f": 673, "gamma": 674, "geometr": 675, "gumbel": 676, "hypergeometr": 677, "laplac": 678, "loggamma": 679, "logist": 680, "lognorm": 681, "logseri": 682, "maxwel": 683, "multinomi": 684, "multivariate_norm": 685, "negative_binomi": 686, "noncentral_chisquar": 687, "noncentral_f": 688, "pareto": 691, "permut": 692, "poisson": 693, "rand": 695, "rand_lik": 696, "randint": 697, "randint_lik": 698, "randn": 699, "randn_lik": 700, "random_integ": 702, "random_sampl": 703, "ranf": 704, "rayleigh": 705, "sampl": 706, "seed": 707, "shuffl": 708, "split_kei": 709, "standard_cauchi": 710, "standard_exponenti": 711, "standard_gamma": 712, "standard_norm": 713, "standard_t": 714, "t": 715, "triangular": 716, "truncated_norm": 717, "vonmis": 719, "wald": 720, "weibul": 721, "weibull_min": 722, "zipf": 723, "ravel": 724, "ravel_multi_index": 725, "real": 726, "reciproc": 727, "reduce_al": 728, "reduce_ani": 729, "reduce_euclidean_norm": 730, "reduce_logsumexp": 731, "reduce_max": 732, "reduce_mean": 733, "reduce_min": 734, "reduce_prod": 735, "reduce_std": 736, "reduce_sum": 737, "reduce_vari": 738, "relu": 739, "relu6": 740, "remaind": 741, "repeat": 742, "reshap": 743, "resiz": 744, "result_typ": 745, "right_shift": 746, "rint": 747, "roll": 748, "rollaxi": 749, "root": 750, "rot90": 751, "round": 752, "round_": 753, "row_stack": 754, "safe_ev": 755, "save": [756, 995, 1025], "savetxt": 757, "savez": 758, "savez_compress": 759, "searchsort": 760, "segment_max": 761, "segment_mean": 762, "segment_min": 763, "segment_prod": 764, "segment_sum": 765, "select": [766, 1012], "selu": 767, "set_bool": 768, "set_complex": 769, "set_dt": 770, "set_environ": 771, "set_float": 772, "set_host_device_count": 773, "set_int": 774, "set_mod": 775, "set_platform": 776, "set_printopt": 777, "setdiff1d": 778, "setxor1d": 779, "shape": 780, "show_config": 781, "sigmoid": [782, 821], "sign": 783, "signbit": 784, "silu": 785, "sin": 786, "sinc": 787, "sinh": 788, "size": 789, "soft_sign": [790, 823], "softmax": 791, "softplu": 792, "sometru": 793, "sort": 794, "sort_complex": 795, "sparse_matmul": 796, "split": 797, "sqrt": 798, "squar": 799, "squeez": 800, "stack": 801, "std": [802, 965], "subtract": 803, "sum": 804, "surrog": [805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 972, 974], "erf": 806, "gaussian_grad": 807, "inv_square_grad": 808, "inv_square_grad2": 809, "log_tailed_relu": 811, "multi_gaussian_grad": 812, "nonzero_sign_log": 813, "piecewise_exp": 814, "piecewise_leaky_relu": 815, "piecewise_quadrat": 816, "q_pseudo_spik": 817, "relu_grad": 818, "relu_grad2": 819, "s2nn": 820, "slayer_grad": 822, "squarewave_fourier_seri": 824, "swapax": 825, "swish": 826, "syn2post": [827, 1008], "syn2post_max": 828, "syn2post_mean": 829, "syn2post_min": 830, "syn2post_prod": 831, "syn2post_softmax": 832, "syn2post_sum": 833, "take": 834, "take_along_axi": 835, "tan": 836, "tanh": 837, "tensordot": 838, "tile": 839, "to_dynsi": 840, "to_object": 841, "trace": 842, "training_environ": 843, "training_mod": 844, "transpos": 845, "trapz": 846, "tri": 847, "tril": 848, "tril_indic": 849, "tril_indices_from": 850, "trim_zero": 851, "triu": 852, "triu_indic": 853, "triu_indices_from": 854, "true_divid": 855, "trunc": 856, "typenam": 857, "union1d": 858, "uniqu": [859, 995], "unpackbit": 860, "unravel_index": 861, "unsorted_segment_max": 862, "unsorted_segment_mean": 863, "unsorted_segment_min": 864, "unsorted_segment_prod": 865, "unsorted_segment_sqrt_n": 866, "unsorted_segment_sum": 867, "unsqueez": 868, "unwrap": 869, "vander": 870, "var": [871, 1002], "vdot": 872, "vector_grad": [873, 997], "vsplit": 874, "vstack": 875, "where": [876, 1012], "while_loop": [877, 1012], "zero": 878, "zeros_lik": 879, "measur": [880, 881, 882, 883, 884, 885, 886, 887, 975], "cross_correl": 880, "firing_r": 881, "functional_connect": 882, "matrix_correl": 883, "raster_plot": 884, "unitary_lfp": 885, "voltage_fluctu": 886, "weighted_correl": 887, "neuron": [888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 976, 993, 1003, 1007, 1010], "alifbellec2020": 888, "adexif": 889, "adquaif": 890, "expif": 891, "fhn": [892, 935], "fractionalfhr": 893, "fractionalizhikevich": 894, "fractionalneuron": 895, "gif": 896, "hh": 897, "hindmarshros": 898, "inputgroup": 899, "izhikevich": 900, "lif": 901, "leakyintegr": 902, "morrislecar": 903, "ouprocess": 904, "outputgroup": 905, "pinskyrinzelmodel": 906, "poissongroup": 907, "quaif": 908, "spiketimegroup": 909, "wangbuzsakimodel": 910, "odeint": 911, "optim": [912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 977, 1024], "adadelta": 912, "adagrad": 913, "adam": 914, "adamw": 915, "adan": 916, "cosineannealinglr": 918, "cosineannealingwarmrestart": 919, "exponentialdecai": 920, "exponentiallr": 921, "inversetimedecai": 922, "lar": 923, "momentum": 924, "momentumnesterov": 925, "multisteplr": 926, "piecewiseconst": 928, "polynomialdecai": 929, "rmsprop": 930, "sgd": 931, "schedul": [932, 977, 1024], "steplr": 933, "make_schedul": 934, "rate": [935, 936, 937, 938, 939, 940, 941, 978, 989, 1031], "feedbackfhn": 936, "qif": 937, "ratemodel": 938, "stuartlandauoscil": 939, "thresholdlinearmodel": 940, "refer": [940, 989, 994, 999, 1000, 1002, 1031], "wilsoncowanmodel": 941, "run": [942, 943, 944, 945, 946, 947, 979, 983, 989, 1007, 1018], "cpu_ordered_parallel": 942, "cpu_unordered_parallel": 943, "jax_parallelize_map": 944, "jax_vectorize_map": 945, "process_pool": 946, "process_pool_lock": 947, "sdeint": 948, "synaps": [949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 980, 1005, 1008, 1010], "ampa": [949, 1008], "additivecoupl": 950, "alpha": 951, "bionmda": 952, "delaycoupl": 953, "delta": 954, "diffusivecoupl": 955, "dualexponenti": 956, "gabaa": 958, "gapjunct": 959, "nmda": [960, 1005], "poissoninput": 961, "coba": 962, "cuba": 963, "mgblock": 964, "synplast": [965, 966, 982], "stp": 966, "decai": [967, 1028], "explicit": [969, 1018, 1023], "rung": [969, 1023], "kutta": [969, 1023], "adapt": [969, 1023], "srk": 969, "method": [969, 996, 1015, 1020, 1023, 1026], "scalar": [969, 1028], "wiener": 969, "process": 969, "caputo": [969, 1020], "fraction": [969, 976, 1019, 1020], "deriv": 969, "riemann": 969, "liouvil": 969, "ann": [970, 1029], "convolut": 970, "pool": 970, "artifici": [970, 990, 1030], "recurr": [970, 990], "comparison": 971, "basi": 972, "object": [972, 984, 996, 997, 1014], "orient": [972, 984], "transform": [972, 984, 998], "brain": [972, 986, 987, 989, 990, 991], "dedic": 972, "oper": [972, 1006, 1008], "delai": [972, 1008, 1019], "interoper": [972, 998], "numpi": [972, 988], "syntax": [972, 1012], "pytorch": 972, "tensorflow": 972, "number": [972, 1014], "algebra": 972, "discret": 972, "fourier": 972, "biolog": [976, 980], "order": [976, 1019], "reduc": 976, "nois": 976, "abstract": 980, "coupl": 980, "gap": 980, "junction": 980, "learn": 980, "rule": 980, "concept": [983, 984, 986], "i": [983, 989, 993, 1004, 1006, 1008], "how": [983, 992, 993, 994, 1000, 1023, 1026], "defin": [983, 1004, 1023, 1026], "updat": [983, 995, 1004, 1011, 1015], "composit": 983, "illustr": 984, "its": 984, "foundat": [985, 1013], "quickstart": 986, "tutori": 986, "advanc": 986, "toolbox": 986, "frequent": 986, "ask": 986, "question": 986, "tabl": 986, "bifurc": [987, 999, 1002], "1d": [987, 994], "phase": [987, 999, 1002], "plane": [987, 999, 1002], "2d": [987, 994], "slow": [987, 1000, 1002], "point": [987, 1000], "further": [987, 1020], "read": [987, 1020], "pip": 988, "from": [988, 993, 1028], "sourc": 988, "jax": [988, 993, 998, 1017], "linux": 988, "maco": 988, "window": 988, "wsl": 988, "brainpylib": [988, 991], "other": [988, 993, 998], "an": [989, 990, 1003, 1027], "balanc": [989, 1004], "decis": [989, 999, 1000], "make": [989, 999, 1000, 1031], "fire": [989, 1007], "neural": [989, 990, 996, 1000, 1030], "mass": 989, "whole": 989, "spike": [990, 1030], "ecosystem": 991, "dataset": [991, 1031], "largescal": 991, "cite": 992, "differ": [993, 998, 1017, 1033], "framework": [993, 998], "v": 993, "brian2": 993, "nest": 993, "numba": 993, "doe": 994, "work": [994, 998], "terminologi": 994, "mechan": [994, 996], "collector": 995, "The": [995, 1008], "name": [995, 1006, 1030], "collect": 995, "path": 995, "rel": 995, "element": 995, "subset": 995, "replac": 995, "__add": 995, "__": 995, "arraycollector": 995, "compil": [996, 1012, 1014], "static": [996, 1018, 1028], "argument": 996, "automat": 997, "preliminari": 997, "argnum": 997, "grad_var": 997, "return_valu": 997, "has_aux": 997, "pure": 997, "auxiliari": 997, "data": [997, 998, 1031], "vector": [997, 1028], "matric": 997, "ar": [998, 1000], "exchang": 998, "among": 998, "also": 998, "can": 998, "program": [998, 1006], "implement": 999, "find": 1000, "continu": 1000, "attractor": 1000, "A": [1002, 1006, 1024], "simpl": 1002, "case": 1002, "understand": 1002, "resolut": 1002, "par": 1002, "fast": 1002, "conduct": 1003, "excit": 1004, "inhibit": 1004, "two": [1004, 1019, 1023, 1027], "wai": 1004, "instanti": [1004, 1007], "directli": 1004, "synapt": [1005, 1008, 1027, 1028], "dyn": [1005, 1006, 1007, 1008], "short": 1005, "term": 1005, "plastic": 1005, "long": 1005, "your": [1006, 1007, 1008, 1027, 1028, 1029, 1030, 1033], "advantag": 1006, "us": [1006, 1010, 1014, 1022, 1027, 1030], "systemat": 1006, "conveni": 1006, "effici": [1006, 1008], "support": [1006, 1026], "compos": 1006, "hodgkin": [1007, 1023], "huxlei": [1007, 1023], "leaki": 1007, "silicon": 1008, "achiev": 1008, "difficult": 1008, "special": 1008, "spars": 1008, "built": [1010, 1027, 1028, 1030], "dure": 1010, "In": [1011, 1015, 1028], "control": 1012, "flow": 1012, "non": [1012, 1019], "statement": 1012, "repetit": 1012, "python": 1012, "loop": 1012, "bm": 1014, "outsid": 1014, "insid": 1014, "subtyp": 1015, "index": [1015, 1018], "slice": 1015, "augment": 1015, "assign": 1015, "valu": 1015, "parallel": 1017, "explor": 1017, "across": 1017, "cpu": 1017, "processor": 1017, "vmap": 1017, "multipl": 1017, "devic": 1017, "monitor": 1018, "list": 1018, "string": 1018, "specif": 1018, "target": 1018, "solver": [1019, 1020, 1023, 1026], "equat": [1019, 1020, 1022, 1023, 1026], "first": 1019, "dde": 1019, "one": 1019, "histori": 1019, "second": 1019, "6": [1019, 1021], "lem": 1019, "popul": 1019, "cycl": 1019, "time": 1019, "chen": 1019, "enzym": 1019, "kinet": 1019, "acknowledg": 1019, "gr\u00fcnwald": 1020, "letnikov": 1020, "construct": 1021, "more": 1021, "complex": 1021, "properti": [1021, 1027], "joint": 1022, "why": 1022, "ordinari": 1023, "fitzhugh": 1023, "nagumo": 1023, "provid": [1023, 1027], "rk": 1023, "descent": 1024, "creat": [1024, 1028], "self": 1024, "stochast": 1026, "noisi": 1026, "lorenz": 1026, "overview": 1027, "bp": [1027, 1028, 1029], "conn": 1027, "subclass": 1027, "__init__": 1027, "__call__": 1027, "build_conn": 1027, "requir": 1027, "encapsul": 1027, "exist": 1027, "networkx": 1027, "pass": 1027, "weight": 1028, "store": 1028, "convers": 1028, "init": 1028, "superclass": 1028, "back": 1029, "propag": 1029, "algorithm": [1029, 1033, 1034], "snn": 1029, "node": 1030, "introduct": 1031, "echo": 1031, "state": 1031, "ridg": 1031, "regress": 1031, "task": 1031, "predict": 1031, "mackei": 1031, "glass": 1031, "timeseri": 1031, "prepar": 1031, "esn": 1031, "test": 1031, "harder": 1031, "dive": 1031, "spectral": 1031, "radiu": 1031, "scale": 1031, "leak": 1031, "offlin": 1033, "switch": 1033, "onlin": 1034}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"brainpy.analysis module": [[0, "module-brainpy.analysis"]], "Low-dimensional Analyzers": [[0, "low-dimensional-analyzers"], [1002, "low-dimensional-analyzers"]], "High-dimensional Analyzers": [[0, "high-dimensional-analyzers"], [1000, "high-dimensional-analyzers"]], "brainpy module": [[1, "module-brainpy"]], "Numerical Differential Integration": [[1, "numerical-differential-integration"]], "Building Dynamical System": [[1, "building-dynamical-system"]], "Simulating Dynamical System": [[1, "simulating-dynamical-system"]], "Training Dynamical System": [[1, "training-dynamical-system"]], "Dynamical System Helpers": [[1, "dynamical-system-helpers"]], "Release notes (brainpy)": [[2, "release-notes-brainpy"]], "brainpy 2.2.x": [[2, "brainpy-2-2-x"]], "Version 2.2.1 (2022.09.09)": [[2, "version-2-2-1-2022-09-09"]], "Bug fixes": [[2, "bug-fixes"]], "New features": [[2, "new-features"], [2, "id1"]], "Version 2.2.0 (2022.08.12)": [[2, "version-2-2-0-2022-08-12"]], "Backwards Incompatible changes": [[2, "backwards-incompatible-changes"]], "Deprecations": [[2, "deprecations"]], "What\u2019s Changed": [[2, "what-s-changed"], [2, "whats-changed"], [2, "id54"], [2, "id67"], [2, "id85"], [2, "id105"], [2, "id120"], [2, "id151"], [2, "id192"], [2, "id199"]], "brainpy 2.1.x": [[2, "brainpy-2-1-x"]], "Version 2.1.12 (2022.05.17)": [[2, "version-2-1-12-2022-05-17"]], "Highlights": [[2, "highlights"], [2, "id224"]], "Version 2.1.11 (2022.05.15)": [[2, "version-2-1-11-2022-05-15"]], "Version 2.1.10 (2022.05.05)": [[2, "version-2-1-10-2022-05-05"]], "Version 2.1.8 (2022.04.26)": [[2, "version-2-1-8-2022-04-26"]], "Version 2.1.7 (2022.04.22)": [[2, "version-2-1-7-2022-04-22"]], "Version 2.1.5 (2022.04.18)": [[2, "version-2-1-5-2022-04-18"]], "Version 2.1.4 (2022.04.04)": [[2, "version-2-1-4-2022-04-04"]], "Version 2.1.3 (2022.03.27)": [[2, "version-2-1-3-2022-03-27"]], "Version 2.1.2 (2022.03.23)": [[2, "version-2-1-2-2022-03-23"]], "Version 2.1.1 (2022.03.18)": [[2, "version-2-1-1-2022-03-18"]], "New Features": [[2, "id223"], [2, "id225"], [2, "id234"]], "Version 2.1.0 (2022.03.14)": [[2, "version-2-1-0-2022-03-14"]], "Incompatible changes": [[2, "incompatible-changes"], [2, "id233"]], "Version 2.0.2 (2022.02.11)": [[2, "version-2-0-2-2022-02-11"]], "Version 2.0.1 (2022.01.31)": [[2, "version-2-0-1-2022-01-31"]], "Version 2.0.0.1 (2022.01.05)": [[2, "version-2-0-0-1-2022-01-05"]], "Version 2.0.0 (2021.12.31)": [[2, "version-2-0-0-2021-12-31"]], "Highlight": [[2, "highlight"]], "Documentation": [[2, "documentation"]], "brainpy 1.1.x": [[2, "brainpy-1-1-x"]], "Version 1.1.7 (2021.12.13)": [[2, "version-1-1-7-2021-12-13"]], "Version 1.1.5 (2021.11.17)": [[2, "version-1-1-5-2021-11-17"]], "Version 1.1.4": [[2, "version-1-1-4"]], "Version 1.1.3": [[2, "version-1-1-3"]], "Version 1.1.2": [[2, "version-1-1-2"]], "Version 1.1.1": [[2, "version-1-1-1"]], "Version 1.1.0 (2021.11.08)": [[2, "version-1-1-0-2021-11-08"]], "math module": [[2, "math-module"]], "base module": [[2, "base-module"]], "integrators module": [[2, "integrators-module"]], "simulation module": [[2, "simulation-module"]], "brainpy 1.0.x": [[2, "brainpy-1-0-x"]], "Version 1.0.3 (2021.08.18)": [[2, "version-1-0-3-2021-08-18"]], "Version 1.0.2": [[2, "version-1-0-2"]], "Version 1.0.1": [[2, "version-1-0-1"]], "Version 1.0.0": [[2, "version-1-0-0"]], "brainpy 0.x": [[2, "brainpy-0-x"]], "Version 0.3.5": [[2, "version-0-3-5"]], "Version 0.3.1": [[2, "version-0-3-1"]], "Version 0.3.0": [[2, "version-0-3-0"]], "Computation API": [[2, "computation-api"]], "Profile setting": [[2, "profile-setting"]], "Core systems": [[2, "core-systems"]], "Package installation": [[2, "package-installation"]], "Version 0.2.4": [[2, "version-0-2-4"]], "API changes": [[2, "api-changes"], [2, "id235"], [2, "id236"], [2, "id237"], [2, "id238"]], "Version 0.2.3": [[2, "version-0-2-3"]], "Models and examples": [[2, "models-and-examples"], [2, "id239"]], "Version 0.2.2": [[2, "version-0-2-2"]], "Version 0.2.1": [[2, "version-0-2-1"]], "Version 0.2.0": [[2, "version-0-2-0"]], "brainpy.channels module": [[3, "module-brainpy.channels"]], "Basic Channel Classes": [[3, "basic-channel-classes"]], "Voltage-dependent Sodium Channel Models": [[3, "voltage-dependent-sodium-channel-models"]], "Voltage-dependent Potassium Channel Models": [[3, "voltage-dependent-potassium-channel-models"]], "Voltage-dependent Calcium Channel Models": [[3, "voltage-dependent-calcium-channel-models"]], "Calcium-dependent Potassium Channel Models": [[3, "calcium-dependent-potassium-channel-models"]], "Hyperpolarization-activated Cation Channel Models": [[3, "hyperpolarization-activated-cation-channel-models"]], "Leakage Channel Models": [[3, "leakage-channel-models"]], "brainpy.connect module": [[4, "module-brainpy.connect"]], "Base Connection Classes and Tools": [[4, "base-connection-classes-and-tools"]], "Custom Connections": [[4, "custom-connections"]], "Random Connections": [[4, "random-connections"]], "Regular Connections": [[4, "regular-connections"]], "brainpy.encoding module": [[5, "module-brainpy.encoding"]], "brainpy.BPFF": [[6, "brainpy-bpff"]], "brainpy.BPTT": [[7, "brainpy-bptt"]], "brainpy.Channel": [[8, "brainpy-channel"]], "brainpy.CondNeuGroup": [[9, "brainpy-condneugroup"]], "brainpy.Container": [[10, "brainpy-container"]], "brainpy.DSRunner": [[11, "brainpy-dsrunner"]], "brainpy.DSTrainer": [[12, "brainpy-dstrainer"]], "brainpy.DynamicalSystem": [[13, "brainpy-dynamicalsystem"]], "brainpy.ForceTrainer": [[14, "brainpy-forcetrainer"]], "brainpy.Integrator": [[15, "brainpy-integrator"]], "brainpy.IntegratorRunner": [[16, "brainpy-integratorrunner"]], "brainpy.JointEq": [[17, "brainpy-jointeq"], [1022, "brainpy-jointeq"]], "brainpy.LoopOverTime": [[18, "brainpy-loopovertime"]], "brainpy.Network": [[19, "brainpy-network"]], "brainpy.NeuGroup": [[20, "brainpy-neugroup"]], "brainpy.NoSharedArg": [[21, "brainpy-nosharedarg"]], "brainpy.OfflineTrainer": [[22, "brainpy-offlinetrainer"]], "brainpy.OnlineTrainer": [[23, "brainpy-onlinetrainer"]], "brainpy.RidgeTrainer": [[24, "brainpy-ridgetrainer"]], "brainpy.Sequential": [[25, "brainpy-sequential"]], "brainpy.SynConn": [[26, "brainpy-synconn"]], "brainpy.SynLTP": [[27, "brainpy-synltp"]], "brainpy.SynOut": [[28, "brainpy-synout"]], "brainpy.SynSTP": [[29, "brainpy-synstp"]], "brainpy.TwoEndConn": [[30, "brainpy-twoendconn"]], "brainpy.analysis.Bifurcation1D": [[31, "brainpy-analysis-bifurcation1d"]], "brainpy.analysis.Bifurcation2D": [[32, "brainpy-analysis-bifurcation2d"]], "brainpy.analysis.FastSlow1D": [[33, "brainpy-analysis-fastslow1d"]], "brainpy.analysis.FastSlow2D": [[34, "brainpy-analysis-fastslow2d"]], "brainpy.analysis.PhasePlane1D": [[35, "brainpy-analysis-phaseplane1d"]], "brainpy.analysis.PhasePlane2D": [[36, "brainpy-analysis-phaseplane2d"]], "brainpy.analysis.SlowPointFinder": [[37, "brainpy-analysis-slowpointfinder"]], "brainpy.channels.Calcium": [[38, "brainpy-channels-calcium"]], "brainpy.channels.CalciumChannel": [[39, "brainpy-channels-calciumchannel"]], "brainpy.channels.CalciumDetailed": [[40, "brainpy-channels-calciumdetailed"]], "brainpy.channels.CalciumDyna": [[41, "brainpy-channels-calciumdyna"]], "brainpy.channels.CalciumFirstOrder": [[42, "brainpy-channels-calciumfirstorder"]], "brainpy.channels.CalciumFixed": [[43, "brainpy-channels-calciumfixed"]], "brainpy.channels.IAHP_De1994": [[44, "brainpy-channels-iahp-de1994"]], "brainpy.channels.ICaHT_HM1992": [[45, "brainpy-channels-icaht-hm1992"]], "brainpy.channels.ICaL_IS2008": [[46, "brainpy-channels-ical-is2008"]], "brainpy.channels.ICaN_IS2008": [[47, "brainpy-channels-ican-is2008"]], "brainpy.channels.ICaT_HM1992": [[48, "brainpy-channels-icat-hm1992"]], "brainpy.channels.ICaT_HP1992": [[49, "brainpy-channels-icat-hp1992"]], "brainpy.channels.IKA1_HM1992": [[50, "brainpy-channels-ika1-hm1992"]], "brainpy.channels.IKA2_HM1992": [[51, "brainpy-channels-ika2-hm1992"]], "brainpy.channels.IKDR_Ba2002": [[52, "brainpy-channels-ikdr-ba2002"]], "brainpy.channels.IKK2A_HM1992": [[53, "brainpy-channels-ikk2a-hm1992"]], "brainpy.channels.IKK2B_HM1992": [[54, "brainpy-channels-ikk2b-hm1992"]], "brainpy.channels.IKL": [[55, "brainpy-channels-ikl"]], "brainpy.channels.IKNI_Ya1989": [[56, "brainpy-channels-ikni-ya1989"]], "brainpy.channels.IK_HH1952": [[57, "brainpy-channels-ik-hh1952"]], "brainpy.channels.IK_TM1991": [[58, "brainpy-channels-ik-tm1991"]], "brainpy.channels.IL": [[59, "brainpy-channels-il"]], "brainpy.channels.INa_Ba2002": [[60, "brainpy-channels-ina-ba2002"]], "brainpy.channels.INa_HH1952": [[61, "brainpy-channels-ina-hh1952"]], "brainpy.channels.INa_TM1991": [[62, "brainpy-channels-ina-tm1991"]], "brainpy.channels.IhChannel": [[63, "brainpy-channels-ihchannel"]], "brainpy.channels.Ih_De1996": [[64, "brainpy-channels-ih-de1996"]], "brainpy.channels.Ih_HM1992": [[65, "brainpy-channels-ih-hm1992"]], "brainpy.channels.Ion": [[66, "brainpy-channels-ion"]], "brainpy.channels.IonChannel": [[67, "brainpy-channels-ionchannel"]], "brainpy.channels.LeakyChannel": [[68, "brainpy-channels-leakychannel"]], "brainpy.channels.PotassiumChannel": [[69, "brainpy-channels-potassiumchannel"]], "brainpy.channels.SodiumChannel": [[70, "brainpy-channels-sodiumchannel"]], "brainpy.connect.all2all": [[71, "brainpy-connect-all2all"]], "brainpy.connect.CONN_MAT": [[72, "brainpy-connect-conn-mat"]], "brainpy.connect.CSRConn": [[73, "brainpy-connect-csrconn"]], "brainpy.connect.Connector": [[74, "brainpy-connect-connector"]], "brainpy.connect.FixedPostNum": [[75, "brainpy-connect-fixedpostnum"], [1027, "brainpy-connect-fixedpostnum"]], "brainpy.connect.FixedPreNum": [[76, "brainpy-connect-fixedprenum"], [1027, "brainpy-connect-fixedprenum"]], "brainpy.connect.FixedProb": [[77, "brainpy-connect-fixedprob"], [1027, "brainpy-connect-fixedprob"]], "brainpy.connect.FixedTotalNum": [[78, "brainpy-connect-fixedtotalnum"]], "brainpy.connect.GaussianProb": [[79, "brainpy-connect-gaussianprob"], [1027, "brainpy-connect-gaussianprob"]], "brainpy.connect.GridEight": [[80, "brainpy-connect-grideight"], [1027, "brainpy-connect-grideight"]], "brainpy.connect.GridFour": [[81, "brainpy-connect-gridfour"], [1027, "brainpy-connect-gridfour"]], "brainpy.connect.GridN": [[82, "brainpy-connect-gridn"], [1027, "brainpy-connect-gridn"]], "brainpy.connect.IJConn": [[83, "brainpy-connect-ijconn"]], "brainpy.connect.MatConn": [[84, "brainpy-connect-matconn"]], "brainpy.connect.one2one": [[85, "brainpy-connect-one2one"]], "brainpy.connect.OneEndConnector": [[86, "brainpy-connect-oneendconnector"]], "brainpy.connect.POST2PRE": [[87, "brainpy-connect-post2pre"]], "brainpy.connect.POST2SYN": [[88, "brainpy-connect-post2syn"]], "brainpy.connect.POST_IDS": [[89, "brainpy-connect-post-ids"]], "brainpy.connect.PRE2POST": [[90, "brainpy-connect-pre2post"]], "brainpy.connect.PRE2SYN": [[91, "brainpy-connect-pre2syn"]], "brainpy.connect.PRE_IDS": [[92, "brainpy-connect-pre-ids"]], "brainpy.connect.PowerLaw": [[93, "brainpy-connect-powerlaw"], [1027, "brainpy-connect-powerlaw"]], "brainpy.connect.ProbDist": [[94, "brainpy-connect-probdist"]], "brainpy.connect.ScaleFreeBA": [[95, "brainpy-connect-scalefreeba"], [1027, "brainpy-connect-scalefreeba"]], "brainpy.connect.ScaleFreeBADual": [[96, "brainpy-connect-scalefreebadual"], [1027, "brainpy-connect-scalefreebadual"]], "brainpy.connect.SmallWorld": [[97, "brainpy-connect-smallworld"], [1027, "brainpy-connect-smallworld"]], "brainpy.connect.SparseMatConn": [[98, "brainpy-connect-sparsematconn"]], "brainpy.connect.TwoEndConnector": [[99, "brainpy-connect-twoendconnector"]], "brainpy.connect.coo2csc": [[100, "brainpy-connect-coo2csc"]], "brainpy.connect.coo2csr": [[101, "brainpy-connect-coo2csr"]], "brainpy.connect.coo2mat": [[102, "brainpy-connect-coo2mat"]], "brainpy.connect.csr2coo": [[103, "brainpy-connect-csr2coo"]], "brainpy.connect.csr2csc": [[104, "brainpy-connect-csr2csc"]], "brainpy.connect.csr2mat": [[105, "brainpy-connect-csr2mat"]], "brainpy.connect.grid_eight": [[106, "brainpy-connect-grid-eight"]], "brainpy.connect.grid_four": [[107, "brainpy-connect-grid-four"]], "brainpy.connect.mat2coo": [[108, "brainpy-connect-mat2coo"]], "brainpy.connect.mat2csc": [[109, "brainpy-connect-mat2csc"]], "brainpy.connect.mat2csr": [[110, "brainpy-connect-mat2csr"]], "brainpy.encoding.Encoder": [[111, "brainpy-encoding-encoder"]], "brainpy.encoding.LatencyEncoder": [[112, "brainpy-encoding-latencyencoder"]], "brainpy.encoding.PoissonEncoder": [[113, "brainpy-encoding-poissonencoder"]], "brainpy.encoding.WeightedPhaseEncoder": [[114, "brainpy-encoding-weightedphaseencoder"]], "brainpy.fdeint": [[115, "brainpy-fdeint"]], "brainpy.initialize.Constant": [[116, "brainpy-initialize-constant"]], "brainpy.initialize.DOGDecay": [[117, "brainpy-initialize-dogdecay"]], "brainpy.initialize.DeltaOrthogonal": [[118, "brainpy-initialize-deltaorthogonal"]], "brainpy.initialize.GaussianDecay": [[119, "brainpy-initialize-gaussiandecay"]], "brainpy.initialize.Identity": [[120, "brainpy-initialize-identity"]], "brainpy.initialize.Initializer": [[121, "brainpy-initialize-initializer"]], "brainpy.initialize.InterLayerInitializer": [[122, "brainpy-initialize-interlayerinitializer"]], "brainpy.initialize.IntraLayerInitializer": [[123, "brainpy-initialize-intralayerinitializer"]], "brainpy.initialize.KaimingNormal": [[124, "brainpy-initialize-kaimingnormal"]], "brainpy.initialize.KaimingUniform": [[125, "brainpy-initialize-kaiminguniform"]], "brainpy.initialize.LecunNormal": [[126, "brainpy-initialize-lecunnormal"]], "brainpy.initialize.LecunUniform": [[127, "brainpy-initialize-lecununiform"]], "brainpy.initialize.Normal": [[128, "brainpy-initialize-normal"]], "brainpy.initialize.OneInit": [[129, "brainpy-initialize-oneinit"]], "brainpy.initialize.Orthogonal": [[130, "brainpy-initialize-orthogonal"]], "brainpy.initialize.Uniform": [[131, "brainpy-initialize-uniform"]], "brainpy.initialize.VarianceScaling": [[132, "brainpy-initialize-variancescaling"]], "brainpy.initialize.XavierNormal": [[133, "brainpy-initialize-xaviernormal"]], "brainpy.initialize.XavierUniform": [[134, "brainpy-initialize-xavieruniform"]], "brainpy.initialize.ZeroInit": [[135, "brainpy-initialize-zeroinit"]], "brainpy.inputs.constant_input": [[136, "brainpy-inputs-constant-input"]], "brainpy.inputs.ou_process": [[137, "brainpy-inputs-ou-process"]], "brainpy.inputs.ramp_input": [[138, "brainpy-inputs-ramp-input"]], "brainpy.inputs.section_input": [[139, "brainpy-inputs-section-input"]], "brainpy.inputs.sinusoidal_input": [[140, "brainpy-inputs-sinusoidal-input"]], "brainpy.inputs.spike_input": [[141, "brainpy-inputs-spike-input"]], "brainpy.inputs.square_input": [[142, "brainpy-inputs-square-input"]], "brainpy.inputs.wiener_process": [[143, "brainpy-inputs-wiener-process"]], "brainpy.integrators.fde.CaputoEuler": [[144, "brainpy-integrators-fde-caputoeuler"]], "brainpy.integrators.fde.CaputoL1Schema": [[145, "brainpy-integrators-fde-caputol1schema"]], "brainpy.integrators.fde.FDEIntegrator": [[146, "brainpy-integrators-fde-fdeintegrator"]], "brainpy.integrators.fde.GLShortMemory": [[147, "brainpy-integrators-fde-glshortmemory"]], "brainpy.integrators.fde.get_default_fdeint": [[148, "brainpy-integrators-fde-get-default-fdeint"]], "brainpy.integrators.fde.get_supported_methods": [[149, "brainpy-integrators-fde-get-supported-methods"]], "brainpy.integrators.fde.register_fde_integrator": [[150, "brainpy-integrators-fde-register-fde-integrator"]], "brainpy.integrators.fde.set_default_fdeint": [[151, "brainpy-integrators-fde-set-default-fdeint"]], "brainpy.integrators.ode.AdaptiveRKIntegrator": [[152, "brainpy-integrators-ode-adaptiverkintegrator"]], "brainpy.integrators.ode.BogackiShampine": [[153, "brainpy-integrators-ode-bogackishampine"]], "brainpy.integrators.ode.CashKarp": [[154, "brainpy-integrators-ode-cashkarp"]], "brainpy.integrators.ode.DormandPrince": [[155, "brainpy-integrators-ode-dormandprince"]], "brainpy.integrators.ode.Euler": [[156, "brainpy-integrators-ode-euler"]], "brainpy.integrators.ode.ExplicitRKIntegrator": [[157, "brainpy-integrators-ode-explicitrkintegrator"]], "brainpy.integrators.ode.ExponentialEuler": [[158, "brainpy-integrators-ode-exponentialeuler"]], "brainpy.integrators.ode.Heun2": [[159, "brainpy-integrators-ode-heun2"]], "brainpy.integrators.ode.Heun3": [[160, "brainpy-integrators-ode-heun3"]], "brainpy.integrators.ode.HeunEuler": [[161, "brainpy-integrators-ode-heuneuler"]], "brainpy.integrators.ode.MidPoint": [[162, "brainpy-integrators-ode-midpoint"]], "brainpy.integrators.ode.ODEIntegrator": [[163, "brainpy-integrators-ode-odeintegrator"]], "brainpy.integrators.ode.RK2": [[164, "brainpy-integrators-ode-rk2"]], "brainpy.integrators.ode.RK3": [[165, "brainpy-integrators-ode-rk3"]], "brainpy.integrators.ode.RK4": [[166, "brainpy-integrators-ode-rk4"]], "brainpy.integrators.ode.RK4Rule38": [[167, "brainpy-integrators-ode-rk4rule38"]], "brainpy.integrators.ode.RKF12": [[168, "brainpy-integrators-ode-rkf12"]], "brainpy.integrators.ode.RKF45": [[169, "brainpy-integrators-ode-rkf45"]], "brainpy.integrators.ode.Ralston2": [[170, "brainpy-integrators-ode-ralston2"]], "brainpy.integrators.ode.Ralston3": [[171, "brainpy-integrators-ode-ralston3"]], "brainpy.integrators.ode.Ralston4": [[172, "brainpy-integrators-ode-ralston4"]], "brainpy.integrators.ode.SSPRK3": [[173, "brainpy-integrators-ode-ssprk3"]], "brainpy.integrators.ode.get_default_odeint": [[174, "brainpy-integrators-ode-get-default-odeint"]], "brainpy.integrators.ode.get_supported_methods": [[175, "brainpy-integrators-ode-get-supported-methods"]], "brainpy.integrators.ode.register_ode_integrator": [[176, "brainpy-integrators-ode-register-ode-integrator"]], "brainpy.integrators.ode.set_default_odeint": [[177, "brainpy-integrators-ode-set-default-odeint"]], "brainpy.integrators.sde.Euler": [[178, "brainpy-integrators-sde-euler"]], "brainpy.integrators.sde.ExponentialEuler": [[179, "brainpy-integrators-sde-exponentialeuler"]], "brainpy.integrators.sde.Heun": [[180, "brainpy-integrators-sde-heun"]], "brainpy.integrators.sde.KlPl": [[181, "brainpy-integrators-sde-klpl"]], "brainpy.integrators.sde.Milstein": [[182, "brainpy-integrators-sde-milstein"]], "brainpy.integrators.sde.MilsteinGradFree": [[183, "brainpy-integrators-sde-milsteingradfree"]], "brainpy.integrators.sde.SDEIntegrator": [[184, "brainpy-integrators-sde-sdeintegrator"]], "brainpy.integrators.sde.SRK1W1": [[185, "brainpy-integrators-sde-srk1w1"]], "brainpy.integrators.sde.SRK2W1": [[186, "brainpy-integrators-sde-srk2w1"]], "brainpy.integrators.sde.get_default_sdeint": [[187, "brainpy-integrators-sde-get-default-sdeint"]], "brainpy.integrators.sde.get_supported_methods": [[188, "brainpy-integrators-sde-get-supported-methods"]], "brainpy.integrators.sde.register_sde_integrator": [[189, "brainpy-integrators-sde-register-sde-integrator"]], "brainpy.integrators.sde.set_default_sdeint": [[190, "brainpy-integrators-sde-set-default-sdeint"]], "brainpy.layers.Activation": [[191, "brainpy-layers-activation"]], "Parameters:": [[191, "parameters"], [216, "parameters"]], "brainpy.layers.AdaptiveAvgPool1d": [[192, "brainpy-layers-adaptiveavgpool1d"]], "brainpy.layers.AdaptiveAvgPool2d": [[193, "brainpy-layers-adaptiveavgpool2d"]], "brainpy.layers.AdaptiveAvgPool3d": [[194, "brainpy-layers-adaptiveavgpool3d"]], "brainpy.layers.AdaptiveMaxPool1d": [[195, "brainpy-layers-adaptivemaxpool1d"]], "brainpy.layers.AdaptiveMaxPool2d": [[196, "brainpy-layers-adaptivemaxpool2d"]], "brainpy.layers.AdaptiveMaxPool3d": [[197, "brainpy-layers-adaptivemaxpool3d"]], "brainpy.layers.AvgPool": [[198, "brainpy-layers-avgpool"]], "brainpy.layers.AvgPool1d": [[199, "brainpy-layers-avgpool1d"]], "brainpy.layers.AvgPool2d": [[200, "brainpy-layers-avgpool2d"]], "brainpy.layers.AvgPool3d": [[201, "brainpy-layers-avgpool3d"]], "brainpy.layers.BatchNorm1d": [[202, "brainpy-layers-batchnorm1d"]], "brainpy.layers.BatchNorm2d": [[203, "brainpy-layers-batchnorm2d"]], "brainpy.layers.BatchNorm3d": [[204, "brainpy-layers-batchnorm3d"]], "brainpy.layers.Conv1d": [[205, "brainpy-layers-conv1d"]], "brainpy.layers.Conv1dLSTMCell": [[206, "brainpy-layers-conv1dlstmcell"]], "brainpy.layers.Conv2d": [[207, "brainpy-layers-conv2d"]], "brainpy.layers.Conv2dLSTMCell": [[208, "brainpy-layers-conv2dlstmcell"]], "brainpy.layers.Conv3d": [[209, "brainpy-layers-conv3d"]], "brainpy.layers.Conv3dLSTMCell": [[210, "brainpy-layers-conv3dlstmcell"]], "brainpy.layers.ConvTranspose1d": [[211, "brainpy-layers-convtranspose1d"]], "brainpy.layers.ConvTranspose2d": [[212, "brainpy-layers-convtranspose2d"]], "brainpy.layers.ConvTranspose3d": [[213, "brainpy-layers-convtranspose3d"]], "brainpy.layers.Dense": [[214, "brainpy-layers-dense"]], "brainpy.layers.Dropout": [[215, "brainpy-layers-dropout"]], "brainpy.layers.Flatten": [[216, "brainpy-layers-flatten"]], "brainpy.layers.FunAsLayer": [[217, "brainpy-layers-funaslayer"]], "brainpy.layers.GRU": [[218, "brainpy-layers-gru"]], "brainpy.layers.GRUCell": [[219, "brainpy-layers-grucell"]], "brainpy.layers.GroupNorm": [[220, "brainpy-layers-groupnorm"]], "brainpy.layers.Identity": [[221, "brainpy-layers-identity"]], "brainpy.layers.InstanceNorm": [[222, "brainpy-layers-instancenorm"]], "brainpy.layers.LSTM": [[223, "brainpy-layers-lstm"]], "brainpy.layers.LSTMCell": [[224, "brainpy-layers-lstmcell"]], "brainpy.layers.Layer": [[225, "brainpy-layers-layer"]], "brainpy.layers.LayerNorm": [[226, "brainpy-layers-layernorm"]], "brainpy.layers.Linear": [[227, "brainpy-layers-linear"]], "brainpy.layers.MaxPool": [[228, "brainpy-layers-maxpool"]], "brainpy.layers.MaxPool1d": [[229, "brainpy-layers-maxpool1d"]], "brainpy.layers.MaxPool2d": [[230, "brainpy-layers-maxpool2d"]], "brainpy.layers.MaxPool3d": [[231, "brainpy-layers-maxpool3d"]], "brainpy.layers.MinPool": [[232, "brainpy-layers-minpool"]], "brainpy.layers.NVAR": [[233, "brainpy-layers-nvar"]], "brainpy.layers.RNNCell": [[234, "brainpy-layers-rnncell"]], "brainpy.layers.Reservoir": [[235, "brainpy-layers-reservoir"]], "brainpy.layers.VanillaRNN": [[236, "brainpy-layers-vanillarnn"]], "brainpy.losses.binary_logistic_loss": [[237, "brainpy-losses-binary-logistic-loss"]], "brainpy.losses.cross_entropy_loss": [[238, "brainpy-losses-cross-entropy-loss"]], "brainpy.losses.cross_entropy_sigmoid": [[239, "brainpy-losses-cross-entropy-sigmoid"]], "brainpy.losses.cross_entropy_sparse": [[240, "brainpy-losses-cross-entropy-sparse"]], "brainpy.losses.ctc_loss": [[241, "brainpy-losses-ctc-loss"]], "brainpy.losses.ctc_loss_with_forward_probs": [[242, "brainpy-losses-ctc-loss-with-forward-probs"]], "brainpy.losses.huber_loss": [[243, "brainpy-losses-huber-loss"]], "brainpy.losses.l1_loos": [[244, "brainpy-losses-l1-loos"]], "brainpy.losses.l2_loss": [[245, "brainpy-losses-l2-loss"]], "brainpy.losses.l2_norm": [[246, "brainpy-losses-l2-norm"]], "brainpy.losses.log_cosh": [[247, "brainpy-losses-log-cosh"]], "brainpy.losses.log_cosh_loss": [[248, "brainpy-losses-log-cosh-loss"]], "brainpy.losses.mean_absolute": [[249, "brainpy-losses-mean-absolute"]], "brainpy.losses.mean_absolute_error": [[250, "brainpy-losses-mean-absolute-error"]], "brainpy.losses.mean_square": [[251, "brainpy-losses-mean-square"]], "brainpy.losses.mean_squared_error": [[252, "brainpy-losses-mean-squared-error"]], "brainpy.losses.mean_squared_log_error": [[253, "brainpy-losses-mean-squared-log-error"]], "brainpy.losses.multiclass_logistic_loss": [[254, "brainpy-losses-multiclass-logistic-loss"]], "brainpy.losses.sigmoid_binary_cross_entropy": [[255, "brainpy-losses-sigmoid-binary-cross-entropy"]], "brainpy.losses.smooth_labels": [[256, "brainpy-losses-smooth-labels"]], "brainpy.losses.softmax_cross_entropy": [[257, "brainpy-losses-softmax-cross-entropy"]], "brainpy.math.BatchingMode": [[258, "brainpy-math-batchingmode"]], "brainpy.math.BrainPyObject": [[259, "brainpy-math-brainpyobject"]], "brainpy.math.CONCAT_UPDATE": [[260, "brainpy-math-concat-update"]], "brainpy.math.DelayVariable": [[261, "brainpy-math-delayvariable"]], "brainpy.math.FunAsObject": [[262, "brainpy-math-funasobject"]], "brainpy.math.LengthDelay": [[263, "brainpy-math-lengthdelay"]], "brainpy.math.Mode": [[264, "brainpy-math-mode"]], "brainpy.math.NeuLenDelay": [[265, "brainpy-math-neulendelay"]], "brainpy.math.NeuTimeDelay": [[266, "brainpy-math-neutimedelay"]], "brainpy.math.NonBatchingMode": [[267, "brainpy-math-nonbatchingmode"]], "brainpy.math.ObjectTransform": [[268, "brainpy-math-objecttransform"]], "brainpy.math.Parameter": [[269, "brainpy-math-parameter"]], "brainpy.math.Partial": [[270, "brainpy-math-partial"]], "brainpy.math.ROTATE_UPDATE": [[271, "brainpy-math-rotate-update"]], "brainpy.math.Tensor": [[272, "brainpy-math-tensor"]], "brainpy.math.TimeDelay": [[273, "brainpy-math-timedelay"]], "brainpy.math.TrainVar": [[274, "brainpy-math-trainvar"]], "brainpy.math.TrainingMode": [[275, "brainpy-math-trainingmode"]], "brainpy.math.Variable": [[276, "brainpy-math-variable"], [1011, "brainpy-math-variable"], [1015, "brainpy-math-variable"], [1015, "id1"]], "brainpy.math.XLACustomOp": [[277, "brainpy-math-xlacustomop"]], "brainpy.math.abs": [[278, "brainpy-math-abs"]], "brainpy.math.absolute": [[279, "brainpy-math-absolute"]], "brainpy.math.acos": [[280, "brainpy-math-acos"]], "brainpy.math.acosh": [[281, "brainpy-math-acosh"]], "brainpy.math.add": [[282, "brainpy-math-add"]], "brainpy.math.add_docstring": [[283, "brainpy-math-add-docstring"]], "brainpy.math.add_newdoc": [[284, "brainpy-math-add-newdoc"]], "brainpy.math.add_newdoc_ufunc": [[285, "brainpy-math-add-newdoc-ufunc"]], "brainpy.math.addcdiv": [[286, "brainpy-math-addcdiv"]], "brainpy.math.addcmul": [[287, "brainpy-math-addcmul"]], "brainpy.math.all": [[288, "brainpy-math-all"]], "brainpy.math.allclose": [[289, "brainpy-math-allclose"]], "brainpy.math.alltrue": [[290, "brainpy-math-alltrue"]], "brainpy.math.amax": [[291, "brainpy-math-amax"]], "brainpy.math.amin": [[292, "brainpy-math-amin"]], "brainpy.math.angle": [[293, "brainpy-math-angle"]], "brainpy.math.any": [[294, "brainpy-math-any"]], "brainpy.math.append": [[295, "brainpy-math-append"]], "brainpy.math.apply_along_axis": [[296, "brainpy-math-apply-along-axis"]], "brainpy.math.apply_over_axes": [[297, "brainpy-math-apply-over-axes"]], "brainpy.math.arange": [[298, "brainpy-math-arange"]], "brainpy.math.arccos": [[299, "brainpy-math-arccos"]], "brainpy.math.arccosh": [[300, "brainpy-math-arccosh"]], "brainpy.math.arcsin": [[301, "brainpy-math-arcsin"]], "brainpy.math.arcsinh": [[302, "brainpy-math-arcsinh"]], "brainpy.math.arctan": [[303, "brainpy-math-arctan"]], "brainpy.math.arctan2": [[304, "brainpy-math-arctan2"]], "brainpy.math.arctanh": [[305, "brainpy-math-arctanh"]], "brainpy.math.argmax": [[306, "brainpy-math-argmax"]], "brainpy.math.argmin": [[307, "brainpy-math-argmin"]], "brainpy.math.argsort": [[308, "brainpy-math-argsort"]], "brainpy.math.argwhere": [[309, "brainpy-math-argwhere"]], "brainpy.math.around": [[310, "brainpy-math-around"]], "brainpy.math.array": [[311, "brainpy-math-array"]], "brainpy.math.array2string": [[312, "brainpy-math-array2string"]], "brainpy.math.array_equal": [[313, "brainpy-math-array-equal"]], "brainpy.math.array_equiv": [[314, "brainpy-math-array-equiv"]], "brainpy.math.array_repr": [[315, "brainpy-math-array-repr"]], "brainpy.math.array_split": [[316, "brainpy-math-array-split"]], "brainpy.math.array_str": [[317, "brainpy-math-array-str"]], "brainpy.math.as_device_array": [[318, "brainpy-math-as-device-array"]], "brainpy.math.as_jax": [[319, "brainpy-math-as-jax"]], "brainpy.math.as_ndarray": [[320, "brainpy-math-as-ndarray"]], "brainpy.math.as_numpy": [[321, "brainpy-math-as-numpy"]], "brainpy.math.as_variable": [[322, "brainpy-math-as-variable"]], "brainpy.math.asanyarray": [[323, "brainpy-math-asanyarray"]], "brainpy.math.asarray": [[324, "brainpy-math-asarray"]], "brainpy.math.ascontiguousarray": [[325, "brainpy-math-ascontiguousarray"]], "brainpy.math.asfarray": [[326, "brainpy-math-asfarray"]], "brainpy.math.asin": [[327, "brainpy-math-asin"]], "brainpy.math.asinh": [[328, "brainpy-math-asinh"]], "brainpy.math.asmatrix": [[329, "brainpy-math-asmatrix"]], "brainpy.math.asscalar": [[330, "brainpy-math-asscalar"]], "brainpy.math.atan": [[331, "brainpy-math-atan"]], "brainpy.math.atan2": [[332, "brainpy-math-atan2"]], "brainpy.math.atanh": [[333, "brainpy-math-atanh"]], "brainpy.math.atleast_1d": [[334, "brainpy-math-atleast-1d"]], "brainpy.math.atleast_2d": [[335, "brainpy-math-atleast-2d"]], "brainpy.math.atleast_3d": [[336, "brainpy-math-atleast-3d"]], "brainpy.math.average": [[337, "brainpy-math-average"]], "brainpy.math.bartlett": [[338, "brainpy-math-bartlett"]], "brainpy.math.batching_environment": [[339, "brainpy-math-batching-environment"]], "brainpy.math.batching_mode": [[340, "brainpy-math-batching-mode"]], "brainpy.math.bincount": [[341, "brainpy-math-bincount"]], "brainpy.math.bitwise_and": [[342, "brainpy-math-bitwise-and"]], "brainpy.math.bitwise_not": [[343, "brainpy-math-bitwise-not"]], "brainpy.math.bitwise_or": [[344, "brainpy-math-bitwise-or"]], "brainpy.math.bitwise_xor": [[345, "brainpy-math-bitwise-xor"]], "brainpy.math.blackman": [[346, "brainpy-math-blackman"]], "brainpy.math.block": [[347, "brainpy-math-block"]], "brainpy.math.broadcast_arrays": [[348, "brainpy-math-broadcast-arrays"]], "brainpy.math.broadcast_shapes": [[349, "brainpy-math-broadcast-shapes"]], "brainpy.math.broadcast_to": [[350, "brainpy-math-broadcast-to"]], "brainpy.math.can_cast": [[351, "brainpy-math-can-cast"]], "brainpy.math.cast": [[352, "brainpy-math-cast"]], "brainpy.math.cat": [[353, "brainpy-math-cat"]], "brainpy.math.cbrt": [[354, "brainpy-math-cbrt"]], "brainpy.math.ceil": [[355, "brainpy-math-ceil"]], "brainpy.math.celu": [[356, "brainpy-math-celu"]], "brainpy.math.choose": [[357, "brainpy-math-choose"]], "brainpy.math.clear_buffer_memory": [[358, "brainpy-math-clear-buffer-memory"]], "brainpy.math.clip": [[359, "brainpy-math-clip"]], "brainpy.math.clip_by_value": [[360, "brainpy-math-clip-by-value"]], "brainpy.math.column_stack": [[361, "brainpy-math-column-stack"]], "brainpy.math.common_type": [[362, "brainpy-math-common-type"]], "brainpy.math.compress": [[363, "brainpy-math-compress"]], "brainpy.math.concat": [[364, "brainpy-math-concat"]], "brainpy.math.concatenate": [[365, "brainpy-math-concatenate"]], "brainpy.math.cond": [[366, "brainpy-math-cond"]], "brainpy.math.conj": [[367, "brainpy-math-conj"]], "brainpy.math.conjugate": [[368, "brainpy-math-conjugate"]], "brainpy.math.convolve": [[369, "brainpy-math-convolve"]], "brainpy.math.copy": [[370, "brainpy-math-copy"]], "brainpy.math.copysign": [[371, "brainpy-math-copysign"]], "brainpy.math.copyto": [[372, "brainpy-math-copyto"]], "brainpy.math.corrcoef": [[373, "brainpy-math-corrcoef"]], "brainpy.math.correlate": [[374, "brainpy-math-correlate"]], "brainpy.math.cos": [[375, "brainpy-math-cos"]], "brainpy.math.cosh": [[376, "brainpy-math-cosh"]], "brainpy.math.count_nonzero": [[377, "brainpy-math-count-nonzero"]], "brainpy.math.cov": [[378, "brainpy-math-cov"]], "brainpy.math.cross": [[379, "brainpy-math-cross"]], "brainpy.math.csr_matvec": [[380, "brainpy-math-csr-matvec"]], "brainpy.math.cumprod": [[381, "brainpy-math-cumprod"]], "brainpy.math.cumproduct": [[382, "brainpy-math-cumproduct"]], "brainpy.math.cumsum": [[383, "brainpy-math-cumsum"]], "brainpy.math.deg2rad": [[384, "brainpy-math-deg2rad"]], "brainpy.math.degrees": [[385, "brainpy-math-degrees"]], "brainpy.math.delete": [[386, "brainpy-math-delete"]], "brainpy.math.dftype": [[387, "brainpy-math-dftype"]], "brainpy.math.diag": [[388, "brainpy-math-diag"]], "brainpy.math.diag_indices": [[389, "brainpy-math-diag-indices"]], "brainpy.math.diag_indices_from": [[390, "brainpy-math-diag-indices-from"]], "brainpy.math.diagflat": [[391, "brainpy-math-diagflat"]], "brainpy.math.diagonal": [[392, "brainpy-math-diagonal"]], "brainpy.math.diff": [[393, "brainpy-math-diff"]], "brainpy.math.digitize": [[394, "brainpy-math-digitize"]], "brainpy.math.disable_gpu_memory_preallocation": [[395, "brainpy-math-disable-gpu-memory-preallocation"]], "brainpy.math.disable_x64": [[396, "brainpy-math-disable-x64"]], "brainpy.math.disp": [[397, "brainpy-math-disp"]], "brainpy.math.ditype": [[398, "brainpy-math-ditype"]], "brainpy.math.divide": [[399, "brainpy-math-divide"]], "brainpy.math.divmod": [[400, "brainpy-math-divmod"]], "brainpy.math.dot": [[401, "brainpy-math-dot"]], "brainpy.math.dsplit": [[402, "brainpy-math-dsplit"]], "brainpy.math.dstack": [[403, "brainpy-math-dstack"]], "brainpy.math.dtype": [[404, "brainpy-math-dtype"]], "brainpy.math.dyn_dict": [[405, "brainpy-math-dyn-dict"]], "brainpy.math.dyn_seq": [[406, "brainpy-math-dyn-seq"]], "brainpy.math.e": [[407, "brainpy-math-e"]], "brainpy.math.ediff1d": [[408, "brainpy-math-ediff1d"]], "brainpy.math.einsum": [[409, "brainpy-math-einsum"]], "brainpy.math.einsum_path": [[410, "brainpy-math-einsum-path"]], "brainpy.math.elu": [[411, "brainpy-math-elu"]], "brainpy.math.empty": [[412, "brainpy-math-empty"]], "brainpy.math.empty_like": [[413, "brainpy-math-empty-like"]], "brainpy.math.enable_gpu_memory_preallocation": [[414, "brainpy-math-enable-gpu-memory-preallocation"]], "brainpy.math.enable_x64": [[415, "brainpy-math-enable-x64"]], "brainpy.math.environment": [[416, "brainpy-math-environment"]], "brainpy.math.equal": [[417, "brainpy-math-equal"]], "brainpy.math.event_csr_matvec": [[418, "brainpy-math-event-csr-matvec"]], "brainpy.math.exp": [[419, "brainpy-math-exp"]], "brainpy.math.exp2": [[420, "brainpy-math-exp2"]], "brainpy.math.expand_dims": [[421, "brainpy-math-expand-dims"]], "brainpy.math.expm1": [[422, "brainpy-math-expm1"]], "brainpy.math.extract": [[423, "brainpy-math-extract"]], "brainpy.math.eye": [[424, "brainpy-math-eye"]], "brainpy.math.fabs": [[425, "brainpy-math-fabs"]], "brainpy.math.fft.fft": [[426, "brainpy-math-fft-fft"]], "brainpy.math.fft.fft2": [[427, "brainpy-math-fft-fft2"]], "brainpy.math.fft.fftfreq": [[428, "brainpy-math-fft-fftfreq"]], "brainpy.math.fft.fftn": [[429, "brainpy-math-fft-fftn"]], "brainpy.math.fft.fftshift": [[430, "brainpy-math-fft-fftshift"]], "brainpy.math.fft.hfft": [[431, "brainpy-math-fft-hfft"]], "brainpy.math.fft.ifft": [[432, "brainpy-math-fft-ifft"]], "brainpy.math.fft.ifft2": [[433, "brainpy-math-fft-ifft2"]], "brainpy.math.fft.ifftn": [[434, "brainpy-math-fft-ifftn"]], "brainpy.math.fft.ifftshift": [[435, "brainpy-math-fft-ifftshift"]], "brainpy.math.fft.ihfft": [[436, "brainpy-math-fft-ihfft"]], "brainpy.math.fft.irfft": [[437, "brainpy-math-fft-irfft"]], "brainpy.math.fft.irfft2": [[438, "brainpy-math-fft-irfft2"]], "brainpy.math.fft.irfftn": [[439, "brainpy-math-fft-irfftn"]], "brainpy.math.fft.rfft": [[440, "brainpy-math-fft-rfft"]], "brainpy.math.fft.rfft2": [[441, "brainpy-math-fft-rfft2"]], "brainpy.math.fft.rfftfreq": [[442, "brainpy-math-fft-rfftfreq"]], "brainpy.math.fft.rfftn": [[443, "brainpy-math-fft-rfftn"]], "brainpy.math.fill_diagonal": [[444, "brainpy-math-fill-diagonal"]], "brainpy.math.finfo": [[445, "brainpy-math-finfo"]], "brainpy.math.fix": [[446, "brainpy-math-fix"]], "brainpy.math.flatnonzero": [[447, "brainpy-math-flatnonzero"]], "brainpy.math.flatten": [[448, "brainpy-math-flatten"]], "brainpy.math.flip": [[449, "brainpy-math-flip"]], "brainpy.math.fliplr": [[450, "brainpy-math-fliplr"]], "brainpy.math.flipud": [[451, "brainpy-math-flipud"]], "brainpy.math.float_power": [[452, "brainpy-math-float-power"]], "brainpy.math.floor": [[453, "brainpy-math-floor"]], "brainpy.math.floor_divide": [[454, "brainpy-math-floor-divide"]], "brainpy.math.fmax": [[455, "brainpy-math-fmax"]], "brainpy.math.fmin": [[456, "brainpy-math-fmin"]], "brainpy.math.fmod": [[457, "brainpy-math-fmod"]], "brainpy.math.for_loop": [[458, "brainpy-math-for-loop"]], "brainpy.math.frexp": [[459, "brainpy-math-frexp"]], "brainpy.math.frombuffer": [[460, "brainpy-math-frombuffer"]], "brainpy.math.fromfile": [[461, "brainpy-math-fromfile"]], "brainpy.math.fromfunction": [[462, "brainpy-math-fromfunction"]], "brainpy.math.fromiter": [[463, "brainpy-math-fromiter"]], "brainpy.math.fromstring": [[464, "brainpy-math-fromstring"]], "brainpy.math.full": [[465, "brainpy-math-full"]], "brainpy.math.full_like": [[466, "brainpy-math-full-like"]], "brainpy.math.function": [[467, "brainpy-math-function"]], "brainpy.math.gcd": [[468, "brainpy-math-gcd"]], "brainpy.math.gelu": [[469, "brainpy-math-gelu"]], "brainpy.math.genfromtxt": [[470, "brainpy-math-genfromtxt"]], "brainpy.math.geomspace": [[471, "brainpy-math-geomspace"]], "brainpy.math.get_bool": [[472, "brainpy-math-get-bool"]], "brainpy.math.get_complex": [[473, "brainpy-math-get-complex"]], "brainpy.math.get_dt": [[474, "brainpy-math-get-dt"]], "brainpy.math.get_float": [[475, "brainpy-math-get-float"]], "brainpy.math.get_int": [[476, "brainpy-math-get-int"]], "brainpy.math.get_mode": [[477, "brainpy-math-get-mode"]], "brainpy.math.get_platform": [[478, "brainpy-math-get-platform"]], "brainpy.math.get_printoptions": [[479, "brainpy-math-get-printoptions"]], "brainpy.math.glu": [[480, "brainpy-math-glu"]], "brainpy.math.grad": [[481, "brainpy-math-grad"]], "brainpy.math.gradient": [[482, "brainpy-math-gradient"]], "brainpy.math.greater": [[483, "brainpy-math-greater"]], "brainpy.math.greater_equal": [[484, "brainpy-math-greater-equal"]], "brainpy.math.hamming": [[485, "brainpy-math-hamming"]], "brainpy.math.hanning": [[486, "brainpy-math-hanning"]], "brainpy.math.hard_sigmoid": [[487, "brainpy-math-hard-sigmoid"]], "brainpy.math.hard_silu": [[488, "brainpy-math-hard-silu"]], "brainpy.math.hard_swish": [[489, "brainpy-math-hard-swish"]], "brainpy.math.hard_tanh": [[490, "brainpy-math-hard-tanh"]], "brainpy.math.heaviside": [[491, "brainpy-math-heaviside"]], "brainpy.math.hessian": [[492, "brainpy-math-hessian"]], "brainpy.math.histogram": [[493, "brainpy-math-histogram"]], "brainpy.math.histogram2d": [[494, "brainpy-math-histogram2d"]], "brainpy.math.histogram_bin_edges": [[495, "brainpy-math-histogram-bin-edges"]], "brainpy.math.histogramdd": [[496, "brainpy-math-histogramdd"]], "brainpy.math.hsplit": [[497, "brainpy-math-hsplit"]], "brainpy.math.hstack": [[498, "brainpy-math-hstack"]], "brainpy.math.hypot": [[499, "brainpy-math-hypot"]], "brainpy.math.i0": [[500, "brainpy-math-i0"]], "brainpy.math.identity": [[501, "brainpy-math-identity"]], "brainpy.math.ifelse": [[502, "brainpy-math-ifelse"], [1012, "brainpy-math-ifelse"]], "brainpy.math.iinfo": [[503, "brainpy-math-iinfo"]], "brainpy.math.imag": [[504, "brainpy-math-imag"]], "brainpy.math.in1d": [[505, "brainpy-math-in1d"]], "brainpy.math.indices": [[506, "brainpy-math-indices"]], "brainpy.math.inf": [[507, "brainpy-math-inf"]], "brainpy.math.info": [[508, "brainpy-math-info"]], "brainpy.math.inner": [[509, "brainpy-math-inner"]], "brainpy.math.insert": [[510, "brainpy-math-insert"]], "brainpy.math.interp": [[511, "brainpy-math-interp"]], "brainpy.math.intersect1d": [[512, "brainpy-math-intersect1d"]], "brainpy.math.invert": [[513, "brainpy-math-invert"]], "brainpy.math.isclose": [[514, "brainpy-math-isclose"]], "brainpy.math.iscomplex": [[515, "brainpy-math-iscomplex"]], "brainpy.math.iscomplexobj": [[516, "brainpy-math-iscomplexobj"]], "brainpy.math.isfinite": [[517, "brainpy-math-isfinite"]], "brainpy.math.isin": [[518, "brainpy-math-isin"]], "brainpy.math.isinf": [[519, "brainpy-math-isinf"]], "brainpy.math.isnan": [[520, "brainpy-math-isnan"]], "brainpy.math.isneginf": [[521, "brainpy-math-isneginf"]], "brainpy.math.isposinf": [[522, "brainpy-math-isposinf"]], "brainpy.math.isreal": [[523, "brainpy-math-isreal"]], "brainpy.math.isrealobj": [[524, "brainpy-math-isrealobj"]], "brainpy.math.isscalar": [[525, "brainpy-math-isscalar"]], "brainpy.math.issubclass_": [[526, "brainpy-math-issubclass"]], "brainpy.math.issubdtype": [[527, "brainpy-math-issubdtype"]], "brainpy.math.issubsctype": [[528, "brainpy-math-issubsctype"]], "brainpy.math.iterable": [[529, "brainpy-math-iterable"]], "brainpy.math.ix_": [[530, "brainpy-math-ix"]], "brainpy.math.jacfwd": [[531, "brainpy-math-jacfwd"]], "brainpy.math.jacobian": [[532, "brainpy-math-jacobian"]], "brainpy.math.jacrev": [[533, "brainpy-math-jacrev"]], "brainpy.math.jit": [[534, "brainpy-math-jit"]], "brainpy.math.kaiser": [[535, "brainpy-math-kaiser"]], "brainpy.math.kron": [[536, "brainpy-math-kron"]], "brainpy.math.lcm": [[537, "brainpy-math-lcm"]], "brainpy.math.ldexp": [[538, "brainpy-math-ldexp"]], "brainpy.math.leaky_relu": [[539, "brainpy-math-leaky-relu"]], "brainpy.math.left_shift": [[540, "brainpy-math-left-shift"]], "brainpy.math.less": [[541, "brainpy-math-less"]], "brainpy.math.less_equal": [[542, "brainpy-math-less-equal"]], "brainpy.math.lexsort": [[543, "brainpy-math-lexsort"]], "brainpy.math.linalg.cholesky": [[544, "brainpy-math-linalg-cholesky"]], "brainpy.math.linalg.cond": [[545, "brainpy-math-linalg-cond"]], "brainpy.math.linalg.det": [[546, "brainpy-math-linalg-det"]], "brainpy.math.linalg.eig": [[547, "brainpy-math-linalg-eig"]], "brainpy.math.linalg.eigh": [[548, "brainpy-math-linalg-eigh"]], "brainpy.math.linalg.eigvals": [[549, "brainpy-math-linalg-eigvals"]], "brainpy.math.linalg.eigvalsh": [[550, "brainpy-math-linalg-eigvalsh"]], "brainpy.math.linalg.inv": [[551, "brainpy-math-linalg-inv"]], "brainpy.math.linalg.lstsq": [[552, "brainpy-math-linalg-lstsq"]], "brainpy.math.linalg.matrix_power": [[553, "brainpy-math-linalg-matrix-power"]], "brainpy.math.linalg.matrix_rank": [[554, "brainpy-math-linalg-matrix-rank"]], "brainpy.math.linalg.multi_dot": [[555, "brainpy-math-linalg-multi-dot"]], "brainpy.math.linalg.norm": [[556, "brainpy-math-linalg-norm"]], "brainpy.math.linalg.pinv": [[557, "brainpy-math-linalg-pinv"]], "brainpy.math.linalg.qr": [[558, "brainpy-math-linalg-qr"]], "brainpy.math.linalg.slogdet": [[559, "brainpy-math-linalg-slogdet"]], "brainpy.math.linalg.solve": [[560, "brainpy-math-linalg-solve"]], "brainpy.math.linalg.svd": [[561, "brainpy-math-linalg-svd"]], "brainpy.math.linalg.tensorinv": [[562, "brainpy-math-linalg-tensorinv"]], "brainpy.math.linalg.tensorsolve": [[563, "brainpy-math-linalg-tensorsolve"]], "brainpy.math.linspace": [[564, "brainpy-math-linspace"]], "brainpy.math.load": [[565, "brainpy-math-load"]], "brainpy.math.loadtxt": [[566, "brainpy-math-loadtxt"]], "brainpy.math.log": [[567, "brainpy-math-log"]], "brainpy.math.log10": [[568, "brainpy-math-log10"]], "brainpy.math.log1p": [[569, "brainpy-math-log1p"]], "brainpy.math.log2": [[570, "brainpy-math-log2"]], "brainpy.math.log_sigmoid": [[571, "brainpy-math-log-sigmoid"]], "brainpy.math.log_softmax": [[572, "brainpy-math-log-softmax"]], "brainpy.math.logaddexp": [[573, "brainpy-math-logaddexp"]], "brainpy.math.logaddexp2": [[574, "brainpy-math-logaddexp2"]], "brainpy.math.logical_and": [[575, "brainpy-math-logical-and"]], "brainpy.math.logical_not": [[576, "brainpy-math-logical-not"]], "brainpy.math.logical_or": [[577, "brainpy-math-logical-or"]], "brainpy.math.logical_xor": [[578, "brainpy-math-logical-xor"]], "brainpy.math.logspace": [[579, "brainpy-math-logspace"]], "brainpy.math.make_cond": [[580, "brainpy-math-make-cond"]], "brainpy.math.make_loop": [[581, "brainpy-math-make-loop"]], "brainpy.math.make_while": [[582, "brainpy-math-make-while"]], "brainpy.math.mask_indices": [[583, "brainpy-math-mask-indices"]], "brainpy.math.mat": [[584, "brainpy-math-mat"]], "brainpy.math.matmul": [[585, "brainpy-math-matmul"]], "brainpy.math.matrix": [[586, "brainpy-math-matrix"]], "brainpy.math.max": [[587, "brainpy-math-max"]], "brainpy.math.maximum": [[588, "brainpy-math-maximum"]], "brainpy.math.mean": [[589, "brainpy-math-mean"]], "brainpy.math.median": [[590, "brainpy-math-median"]], "brainpy.math.meshgrid": [[591, "brainpy-math-meshgrid"]], "brainpy.math.min": [[592, "brainpy-math-min"]], "brainpy.math.minimum": [[593, "brainpy-math-minimum"]], "brainpy.math.mod": [[594, "brainpy-math-mod"]], "brainpy.math.modf": [[595, "brainpy-math-modf"]], "brainpy.math.moveaxis": [[596, "brainpy-math-moveaxis"]], "brainpy.math.msort": [[597, "brainpy-math-msort"]], "brainpy.math.multiply": [[598, "brainpy-math-multiply"]], "brainpy.math.nan_to_num": [[599, "brainpy-math-nan-to-num"]], "brainpy.math.nanargmax": [[600, "brainpy-math-nanargmax"]], "brainpy.math.nanargmin": [[601, "brainpy-math-nanargmin"]], "brainpy.math.nancumprod": [[602, "brainpy-math-nancumprod"]], "brainpy.math.nancumsum": [[603, "brainpy-math-nancumsum"]], "brainpy.math.nanmax": [[604, "brainpy-math-nanmax"]], "brainpy.math.nanmean": [[605, "brainpy-math-nanmean"]], "brainpy.math.nanmedian": [[606, "brainpy-math-nanmedian"]], "brainpy.math.nanmin": [[607, "brainpy-math-nanmin"]], "brainpy.math.nanpercentile": [[608, "brainpy-math-nanpercentile"]], "brainpy.math.nanprod": [[609, "brainpy-math-nanprod"]], "brainpy.math.nanquantile": [[610, "brainpy-math-nanquantile"]], "brainpy.math.nanstd": [[611, "brainpy-math-nanstd"]], "brainpy.math.nansum": [[612, "brainpy-math-nansum"]], "brainpy.math.nanvar": [[613, "brainpy-math-nanvar"]], "brainpy.math.ndim": [[614, "brainpy-math-ndim"]], "brainpy.math.negative": [[615, "brainpy-math-negative"]], "brainpy.math.nextafter": [[616, "brainpy-math-nextafter"]], "brainpy.math.nonbatching_mode": [[617, "brainpy-math-nonbatching-mode"]], "brainpy.math.nonzero": [[618, "brainpy-math-nonzero"]], "brainpy.math.normalize": [[619, "brainpy-math-normalize"]], "brainpy.math.not_equal": [[620, "brainpy-math-not-equal"]], "brainpy.math.one_hot": [[621, "brainpy-math-one-hot"]], "brainpy.math.ones": [[622, "brainpy-math-ones"]], "brainpy.math.ones_like": [[623, "brainpy-math-ones-like"]], "brainpy.math.outer": [[624, "brainpy-math-outer"]], "brainpy.math.packbits": [[625, "brainpy-math-packbits"]], "brainpy.math.pad": [[626, "brainpy-math-pad"]], "brainpy.math.percentile": [[627, "brainpy-math-percentile"]], "brainpy.math.pi": [[628, "brainpy-math-pi"]], "brainpy.math.piecewise": [[629, "brainpy-math-piecewise"]], "brainpy.math.place": [[630, "brainpy-math-place"]], "brainpy.math.poly": [[631, "brainpy-math-poly"]], "brainpy.math.polyadd": [[632, "brainpy-math-polyadd"]], "brainpy.math.polyder": [[633, "brainpy-math-polyder"]], "brainpy.math.polydiv": [[634, "brainpy-math-polydiv"]], "brainpy.math.polyfit": [[635, "brainpy-math-polyfit"]], "brainpy.math.polyint": [[636, "brainpy-math-polyint"]], "brainpy.math.polymul": [[637, "brainpy-math-polymul"]], "brainpy.math.polysub": [[638, "brainpy-math-polysub"]], "brainpy.math.polyval": [[639, "brainpy-math-polyval"]], "brainpy.math.positive": [[640, "brainpy-math-positive"]], "brainpy.math.power": [[641, "brainpy-math-power"]], "brainpy.math.pre2post_coo_event_sum": [[642, "brainpy-math-pre2post-coo-event-sum"]], "brainpy.math.pre2post_event_prod": [[643, "brainpy-math-pre2post-event-prod"]], "brainpy.math.pre2post_event_sum": [[644, "brainpy-math-pre2post-event-sum"]], "brainpy.math.pre2post_max": [[645, "brainpy-math-pre2post-max"]], "brainpy.math.pre2post_mean": [[646, "brainpy-math-pre2post-mean"]], "brainpy.math.pre2post_min": [[647, "brainpy-math-pre2post-min"]], "brainpy.math.pre2post_prod": [[648, "brainpy-math-pre2post-prod"]], "brainpy.math.pre2post_sum": [[649, "brainpy-math-pre2post-sum"]], "brainpy.math.pre2syn": [[650, "brainpy-math-pre2syn"]], "brainpy.math.printoptions": [[651, "brainpy-math-printoptions"]], "brainpy.math.prod": [[652, "brainpy-math-prod"]], "brainpy.math.product": [[653, "brainpy-math-product"]], "brainpy.math.promote_types": [[654, "brainpy-math-promote-types"]], "brainpy.math.ptp": [[655, "brainpy-math-ptp"]], "brainpy.math.put": [[656, "brainpy-math-put"]], "brainpy.math.putmask": [[657, "brainpy-math-putmask"]], "brainpy.math.quantile": [[658, "brainpy-math-quantile"]], "brainpy.math.rad2deg": [[659, "brainpy-math-rad2deg"]], "brainpy.math.radians": [[660, "brainpy-math-radians"]], "brainpy.math.random.DEFAULT": [[661, "brainpy-math-random-default"]], "brainpy.math.random.Generator": [[662, "brainpy-math-random-generator"]], "brainpy.math.random.RandomState": [[663, "brainpy-math-random-randomstate"]], "brainpy.math.random.bernoulli": [[664, "brainpy-math-random-bernoulli"]], "brainpy.math.random.beta": [[665, "brainpy-math-random-beta"]], "brainpy.math.random.binomial": [[666, "brainpy-math-random-binomial"]], "brainpy.math.random.categorical": [[667, "brainpy-math-random-categorical"]], "brainpy.math.random.chisquare": [[668, "brainpy-math-random-chisquare"]], "brainpy.math.random.choice": [[669, "brainpy-math-random-choice"]], "brainpy.math.random.default_rng": [[670, "brainpy-math-random-default-rng"]], "brainpy.math.random.dirichlet": [[671, "brainpy-math-random-dirichlet"]], "brainpy.math.random.exponential": [[672, "brainpy-math-random-exponential"]], "brainpy.math.random.f": [[673, "brainpy-math-random-f"]], "brainpy.math.random.gamma": [[674, "brainpy-math-random-gamma"]], "brainpy.math.random.geometric": [[675, "brainpy-math-random-geometric"]], "brainpy.math.random.gumbel": [[676, "brainpy-math-random-gumbel"]], "brainpy.math.random.hypergeometric": [[677, "brainpy-math-random-hypergeometric"]], "brainpy.math.random.laplace": [[678, "brainpy-math-random-laplace"]], "brainpy.math.random.loggamma": [[679, "brainpy-math-random-loggamma"]], "brainpy.math.random.logistic": [[680, "brainpy-math-random-logistic"]], "brainpy.math.random.lognormal": [[681, "brainpy-math-random-lognormal"]], "brainpy.math.random.logseries": [[682, "brainpy-math-random-logseries"]], "brainpy.math.random.maxwell": [[683, "brainpy-math-random-maxwell"]], "brainpy.math.random.multinomial": [[684, "brainpy-math-random-multinomial"]], "brainpy.math.random.multivariate_normal": [[685, "brainpy-math-random-multivariate-normal"]], "brainpy.math.random.negative_binomial": [[686, "brainpy-math-random-negative-binomial"]], "brainpy.math.random.noncentral_chisquare": [[687, "brainpy-math-random-noncentral-chisquare"]], "brainpy.math.random.noncentral_f": [[688, "brainpy-math-random-noncentral-f"]], "brainpy.math.random.normal": [[689, "brainpy-math-random-normal"]], "brainpy.math.random.orthogonal": [[690, "brainpy-math-random-orthogonal"]], "brainpy.math.random.pareto": [[691, "brainpy-math-random-pareto"]], "brainpy.math.random.permutation": [[692, "brainpy-math-random-permutation"]], "brainpy.math.random.poisson": [[693, "brainpy-math-random-poisson"]], "brainpy.math.random.power": [[694, "brainpy-math-random-power"]], "brainpy.math.random.rand": [[695, "brainpy-math-random-rand"]], "brainpy.math.random.rand_like": [[696, "brainpy-math-random-rand-like"]], "brainpy.math.random.randint": [[697, "brainpy-math-random-randint"]], "brainpy.math.random.randint_like": [[698, "brainpy-math-random-randint-like"]], "brainpy.math.random.randn": [[699, "brainpy-math-random-randn"]], "brainpy.math.random.randn_like": [[700, "brainpy-math-random-randn-like"]], "brainpy.math.random.random": [[701, "brainpy-math-random-random"]], "brainpy.math.random.random_integers": [[702, "brainpy-math-random-random-integers"]], "brainpy.math.random.random_sample": [[703, "brainpy-math-random-random-sample"]], "brainpy.math.random.ranf": [[704, "brainpy-math-random-ranf"]], "brainpy.math.random.rayleigh": [[705, "brainpy-math-random-rayleigh"]], "brainpy.math.random.sample": [[706, "brainpy-math-random-sample"]], "brainpy.math.random.seed": [[707, "brainpy-math-random-seed"]], "brainpy.math.random.shuffle": [[708, "brainpy-math-random-shuffle"]], "brainpy.math.random.split_key": [[709, "brainpy-math-random-split-key"]], "brainpy.math.random.standard_cauchy": [[710, "brainpy-math-random-standard-cauchy"]], "brainpy.math.random.standard_exponential": [[711, "brainpy-math-random-standard-exponential"]], "brainpy.math.random.standard_gamma": [[712, "brainpy-math-random-standard-gamma"]], "brainpy.math.random.standard_normal": [[713, "brainpy-math-random-standard-normal"]], "brainpy.math.random.standard_t": [[714, "brainpy-math-random-standard-t"]], "brainpy.math.random.t": [[715, "brainpy-math-random-t"]], "brainpy.math.random.triangular": [[716, "brainpy-math-random-triangular"]], "brainpy.math.random.truncated_normal": [[717, "brainpy-math-random-truncated-normal"]], "brainpy.math.random.uniform": [[718, "brainpy-math-random-uniform"]], "brainpy.math.random.vonmises": [[719, "brainpy-math-random-vonmises"]], "brainpy.math.random.wald": [[720, "brainpy-math-random-wald"]], "brainpy.math.random.weibull": [[721, "brainpy-math-random-weibull"]], "brainpy.math.random.weibull_min": [[722, "brainpy-math-random-weibull-min"]], "brainpy.math.random.zipf": [[723, "brainpy-math-random-zipf"]], "brainpy.math.ravel": [[724, "brainpy-math-ravel"]], "brainpy.math.ravel_multi_index": [[725, "brainpy-math-ravel-multi-index"]], "brainpy.math.real": [[726, "brainpy-math-real"]], "brainpy.math.reciprocal": [[727, "brainpy-math-reciprocal"]], "brainpy.math.reduce_all": [[728, "brainpy-math-reduce-all"]], "brainpy.math.reduce_any": [[729, "brainpy-math-reduce-any"]], "brainpy.math.reduce_euclidean_norm": [[730, "brainpy-math-reduce-euclidean-norm"]], "brainpy.math.reduce_logsumexp": [[731, "brainpy-math-reduce-logsumexp"]], "brainpy.math.reduce_max": [[732, "brainpy-math-reduce-max"]], "brainpy.math.reduce_mean": [[733, "brainpy-math-reduce-mean"]], "brainpy.math.reduce_min": [[734, "brainpy-math-reduce-min"]], "brainpy.math.reduce_prod": [[735, "brainpy-math-reduce-prod"]], "brainpy.math.reduce_std": [[736, "brainpy-math-reduce-std"]], "brainpy.math.reduce_sum": [[737, "brainpy-math-reduce-sum"]], "brainpy.math.reduce_variance": [[738, "brainpy-math-reduce-variance"]], "brainpy.math.relu": [[739, "brainpy-math-relu"]], "brainpy.math.relu6": [[740, "brainpy-math-relu6"]], "brainpy.math.remainder": [[741, "brainpy-math-remainder"]], "brainpy.math.repeat": [[742, "brainpy-math-repeat"]], "brainpy.math.reshape": [[743, "brainpy-math-reshape"]], "brainpy.math.resize": [[744, "brainpy-math-resize"]], "brainpy.math.result_type": [[745, "brainpy-math-result-type"]], "brainpy.math.right_shift": [[746, "brainpy-math-right-shift"]], "brainpy.math.rint": [[747, "brainpy-math-rint"]], "brainpy.math.roll": [[748, "brainpy-math-roll"]], "brainpy.math.rollaxis": [[749, "brainpy-math-rollaxis"]], "brainpy.math.roots": [[750, "brainpy-math-roots"]], "brainpy.math.rot90": [[751, "brainpy-math-rot90"]], "brainpy.math.round": [[752, "brainpy-math-round"]], "brainpy.math.round_": [[753, "brainpy-math-round"]], "brainpy.math.row_stack": [[754, "brainpy-math-row-stack"]], "brainpy.math.safe_eval": [[755, "brainpy-math-safe-eval"]], "brainpy.math.save": [[756, "brainpy-math-save"]], "brainpy.math.savetxt": [[757, "brainpy-math-savetxt"]], "brainpy.math.savez": [[758, "brainpy-math-savez"]], "brainpy.math.savez_compressed": [[759, "brainpy-math-savez-compressed"]], "brainpy.math.searchsorted": [[760, "brainpy-math-searchsorted"]], "brainpy.math.segment_max": [[761, "brainpy-math-segment-max"]], "brainpy.math.segment_mean": [[762, "brainpy-math-segment-mean"]], "brainpy.math.segment_min": [[763, "brainpy-math-segment-min"]], "brainpy.math.segment_prod": [[764, "brainpy-math-segment-prod"]], "brainpy.math.segment_sum": [[765, "brainpy-math-segment-sum"]], "brainpy.math.select": [[766, "brainpy-math-select"]], "brainpy.math.selu": [[767, "brainpy-math-selu"]], "brainpy.math.set_bool": [[768, "brainpy-math-set-bool"]], "brainpy.math.set_complex": [[769, "brainpy-math-set-complex"]], "brainpy.math.set_dt": [[770, "brainpy-math-set-dt"]], "brainpy.math.set_environment": [[771, "brainpy-math-set-environment"]], "brainpy.math.set_float": [[772, "brainpy-math-set-float"]], "brainpy.math.set_host_device_count": [[773, "brainpy-math-set-host-device-count"]], "brainpy.math.set_int": [[774, "brainpy-math-set-int"]], "brainpy.math.set_mode": [[775, "brainpy-math-set-mode"]], "brainpy.math.set_platform": [[776, "brainpy-math-set-platform"]], "brainpy.math.set_printoptions": [[777, "brainpy-math-set-printoptions"]], "brainpy.math.setdiff1d": [[778, "brainpy-math-setdiff1d"]], "brainpy.math.setxor1d": [[779, "brainpy-math-setxor1d"]], "brainpy.math.shape": [[780, "brainpy-math-shape"]], "brainpy.math.show_config": [[781, "brainpy-math-show-config"]], "brainpy.math.sigmoid": [[782, "brainpy-math-sigmoid"]], "brainpy.math.sign": [[783, "brainpy-math-sign"]], "brainpy.math.signbit": [[784, "brainpy-math-signbit"]], "brainpy.math.silu": [[785, "brainpy-math-silu"]], "brainpy.math.sin": [[786, "brainpy-math-sin"]], "brainpy.math.sinc": [[787, "brainpy-math-sinc"]], "brainpy.math.sinh": [[788, "brainpy-math-sinh"]], "brainpy.math.size": [[789, "brainpy-math-size"]], "brainpy.math.soft_sign": [[790, "brainpy-math-soft-sign"]], "brainpy.math.softmax": [[791, "brainpy-math-softmax"]], "brainpy.math.softplus": [[792, "brainpy-math-softplus"]], "brainpy.math.sometrue": [[793, "brainpy-math-sometrue"]], "brainpy.math.sort": [[794, "brainpy-math-sort"]], "brainpy.math.sort_complex": [[795, "brainpy-math-sort-complex"]], "brainpy.math.sparse_matmul": [[796, "brainpy-math-sparse-matmul"]], "brainpy.math.split": [[797, "brainpy-math-split"]], "brainpy.math.sqrt": [[798, "brainpy-math-sqrt"]], "brainpy.math.square": [[799, "brainpy-math-square"]], "brainpy.math.squeeze": [[800, "brainpy-math-squeeze"]], "brainpy.math.stack": [[801, "brainpy-math-stack"]], "brainpy.math.std": [[802, "brainpy-math-std"]], "brainpy.math.subtract": [[803, "brainpy-math-subtract"]], "brainpy.math.sum": [[804, "brainpy-math-sum"]], "brainpy.math.surrogate.arctan": [[805, "brainpy-math-surrogate-arctan"]], "brainpy.math.surrogate.erf": [[806, "brainpy-math-surrogate-erf"]], "brainpy.math.surrogate.gaussian_grad": [[807, "brainpy-math-surrogate-gaussian-grad"]], "brainpy.math.surrogate.inv_square_grad": [[808, "brainpy-math-surrogate-inv-square-grad"]], "brainpy.math.surrogate.inv_square_grad2": [[809, "brainpy-math-surrogate-inv-square-grad2"]], "brainpy.math.surrogate.leaky_relu": [[810, "brainpy-math-surrogate-leaky-relu"]], "brainpy.math.surrogate.log_tailed_relu": [[811, "brainpy-math-surrogate-log-tailed-relu"]], "brainpy.math.surrogate.multi_gaussian_grad": [[812, "brainpy-math-surrogate-multi-gaussian-grad"]], "brainpy.math.surrogate.nonzero_sign_log": [[813, "brainpy-math-surrogate-nonzero-sign-log"]], "brainpy.math.surrogate.piecewise_exp": [[814, "brainpy-math-surrogate-piecewise-exp"]], "brainpy.math.surrogate.piecewise_leaky_relu": [[815, "brainpy-math-surrogate-piecewise-leaky-relu"]], "brainpy.math.surrogate.piecewise_quadratic": [[816, "brainpy-math-surrogate-piecewise-quadratic"]], "brainpy.math.surrogate.q_pseudo_spike": [[817, "brainpy-math-surrogate-q-pseudo-spike"]], "brainpy.math.surrogate.relu_grad": [[818, "brainpy-math-surrogate-relu-grad"]], "brainpy.math.surrogate.relu_grad2": [[819, "brainpy-math-surrogate-relu-grad2"]], "brainpy.math.surrogate.s2nn": [[820, "brainpy-math-surrogate-s2nn"]], "brainpy.math.surrogate.sigmoid": [[821, "brainpy-math-surrogate-sigmoid"]], "brainpy.math.surrogate.slayer_grad": [[822, "brainpy-math-surrogate-slayer-grad"]], "brainpy.math.surrogate.soft_sign": [[823, "brainpy-math-surrogate-soft-sign"]], "brainpy.math.surrogate.squarewave_fourier_series": [[824, "brainpy-math-surrogate-squarewave-fourier-series"]], "brainpy.math.swapaxes": [[825, "brainpy-math-swapaxes"]], "brainpy.math.swish": [[826, "brainpy-math-swish"]], "brainpy.math.syn2post": [[827, "brainpy-math-syn2post"]], "brainpy.math.syn2post_max": [[828, "brainpy-math-syn2post-max"]], "brainpy.math.syn2post_mean": [[829, "brainpy-math-syn2post-mean"]], "brainpy.math.syn2post_min": [[830, "brainpy-math-syn2post-min"]], "brainpy.math.syn2post_prod": [[831, "brainpy-math-syn2post-prod"]], "brainpy.math.syn2post_softmax": [[832, "brainpy-math-syn2post-softmax"]], "brainpy.math.syn2post_sum": [[833, "brainpy-math-syn2post-sum"]], "brainpy.math.take": [[834, "brainpy-math-take"]], "brainpy.math.take_along_axis": [[835, "brainpy-math-take-along-axis"]], "brainpy.math.tan": [[836, "brainpy-math-tan"]], "brainpy.math.tanh": [[837, "brainpy-math-tanh"]], "brainpy.math.tensordot": [[838, "brainpy-math-tensordot"]], "brainpy.math.tile": [[839, "brainpy-math-tile"]], "brainpy.math.to_dynsys": [[840, "brainpy-math-to-dynsys"]], "brainpy.math.to_object": [[841, "brainpy-math-to-object"]], "brainpy.math.trace": [[842, "brainpy-math-trace"]], "brainpy.math.training_environment": [[843, "brainpy-math-training-environment"]], "brainpy.math.training_mode": [[844, "brainpy-math-training-mode"]], "brainpy.math.transpose": [[845, "brainpy-math-transpose"]], "brainpy.math.trapz": [[846, "brainpy-math-trapz"]], "brainpy.math.tri": [[847, "brainpy-math-tri"]], "brainpy.math.tril": [[848, "brainpy-math-tril"]], "brainpy.math.tril_indices": [[849, "brainpy-math-tril-indices"]], "brainpy.math.tril_indices_from": [[850, "brainpy-math-tril-indices-from"]], "brainpy.math.trim_zeros": [[851, "brainpy-math-trim-zeros"]], "brainpy.math.triu": [[852, "brainpy-math-triu"]], "brainpy.math.triu_indices": [[853, "brainpy-math-triu-indices"]], "brainpy.math.triu_indices_from": [[854, "brainpy-math-triu-indices-from"]], "brainpy.math.true_divide": [[855, "brainpy-math-true-divide"]], "brainpy.math.trunc": [[856, "brainpy-math-trunc"]], "brainpy.math.typename": [[857, "brainpy-math-typename"]], "brainpy.math.union1d": [[858, "brainpy-math-union1d"]], "brainpy.math.unique": [[859, "brainpy-math-unique"]], "brainpy.math.unpackbits": [[860, "brainpy-math-unpackbits"]], "brainpy.math.unravel_index": [[861, "brainpy-math-unravel-index"]], "brainpy.math.unsorted_segment_max": [[862, "brainpy-math-unsorted-segment-max"]], "brainpy.math.unsorted_segment_mean": [[863, "brainpy-math-unsorted-segment-mean"]], "brainpy.math.unsorted_segment_min": [[864, "brainpy-math-unsorted-segment-min"]], "brainpy.math.unsorted_segment_prod": [[865, "brainpy-math-unsorted-segment-prod"]], "brainpy.math.unsorted_segment_sqrt_n": [[866, "brainpy-math-unsorted-segment-sqrt-n"]], "brainpy.math.unsorted_segment_sum": [[867, "brainpy-math-unsorted-segment-sum"]], "brainpy.math.unsqueeze": [[868, "brainpy-math-unsqueeze"]], "brainpy.math.unwrap": [[869, "brainpy-math-unwrap"]], "brainpy.math.vander": [[870, "brainpy-math-vander"]], "brainpy.math.var": [[871, "brainpy-math-var"]], "brainpy.math.vdot": [[872, "brainpy-math-vdot"]], "brainpy.math.vector_grad": [[873, "brainpy-math-vector-grad"]], "brainpy.math.vsplit": [[874, "brainpy-math-vsplit"]], "brainpy.math.vstack": [[875, "brainpy-math-vstack"]], "brainpy.math.where": [[876, "brainpy-math-where"], [1012, "brainpy-math-where"]], "brainpy.math.while_loop": [[877, "brainpy-math-while-loop"]], "brainpy.math.zeros": [[878, "brainpy-math-zeros"]], "brainpy.math.zeros_like": [[879, "brainpy-math-zeros-like"]], "brainpy.measure.cross_correlation": [[880, "brainpy-measure-cross-correlation"]], "brainpy.measure.firing_rate": [[881, "brainpy-measure-firing-rate"]], "brainpy.measure.functional_connectivity": [[882, "brainpy-measure-functional-connectivity"]], "brainpy.measure.matrix_correlation": [[883, "brainpy-measure-matrix-correlation"]], "brainpy.measure.raster_plot": [[884, "brainpy-measure-raster-plot"]], "brainpy.measure.unitary_LFP": [[885, "brainpy-measure-unitary-lfp"]], "brainpy.measure.voltage_fluctuation": [[886, "brainpy-measure-voltage-fluctuation"]], "brainpy.measure.weighted_correlation": [[887, "brainpy-measure-weighted-correlation"]], "brainpy.neurons.ALIFBellec2020": [[888, "brainpy-neurons-alifbellec2020"]], "brainpy.neurons.AdExIF": [[889, "brainpy-neurons-adexif"]], "brainpy.neurons.AdQuaIF": [[890, "brainpy-neurons-adquaif"]], "brainpy.neurons.ExpIF": [[891, "brainpy-neurons-expif"]], "brainpy.neurons.FHN": [[892, "brainpy-neurons-fhn"]], "brainpy.neurons.FractionalFHR": [[893, "brainpy-neurons-fractionalfhr"]], "brainpy.neurons.FractionalIzhikevich": [[894, "brainpy-neurons-fractionalizhikevich"]], "brainpy.neurons.FractionalNeuron": [[895, "brainpy-neurons-fractionalneuron"]], "brainpy.neurons.GIF": [[896, "brainpy-neurons-gif"]], "brainpy.neurons.HH": [[897, "brainpy-neurons-hh"]], "brainpy.neurons.HindmarshRose": [[898, "brainpy-neurons-hindmarshrose"]], "brainpy.neurons.InputGroup": [[899, "brainpy-neurons-inputgroup"]], "brainpy.neurons.Izhikevich": [[900, "brainpy-neurons-izhikevich"]], "brainpy.neurons.LIF": [[901, "brainpy-neurons-lif"]], "brainpy.neurons.LeakyIntegrator": [[902, "brainpy-neurons-leakyintegrator"]], "brainpy.neurons.MorrisLecar": [[903, "brainpy-neurons-morrislecar"]], "brainpy.neurons.OUProcess": [[904, "brainpy-neurons-ouprocess"]], "brainpy.neurons.OutputGroup": [[905, "brainpy-neurons-outputgroup"]], "brainpy.neurons.PinskyRinzelModel": [[906, "brainpy-neurons-pinskyrinzelmodel"]], "brainpy.neurons.PoissonGroup": [[907, "brainpy-neurons-poissongroup"]], "brainpy.neurons.QuaIF": [[908, "brainpy-neurons-quaif"]], "brainpy.neurons.SpikeTimeGroup": [[909, "brainpy-neurons-spiketimegroup"]], "brainpy.neurons.WangBuzsakiModel": [[910, "brainpy-neurons-wangbuzsakimodel"]], "brainpy.odeint": [[911, "brainpy-odeint"]], "brainpy.optim.Adadelta": [[912, "brainpy-optim-adadelta"]], "brainpy.optim.Adagrad": [[913, "brainpy-optim-adagrad"]], "brainpy.optim.Adam": [[914, "brainpy-optim-adam"]], "brainpy.optim.AdamW": [[915, "brainpy-optim-adamw"]], "brainpy.optim.Adan": [[916, "brainpy-optim-adan"]], "brainpy.optim.Constant": [[917, "brainpy-optim-constant"]], "brainpy.optim.CosineAnnealingLR": [[918, "brainpy-optim-cosineannealinglr"]], "brainpy.optim.CosineAnnealingWarmRestarts": [[919, "brainpy-optim-cosineannealingwarmrestarts"]], "brainpy.optim.ExponentialDecay": [[920, "brainpy-optim-exponentialdecay"]], "brainpy.optim.ExponentialLR": [[921, "brainpy-optim-exponentiallr"]], "brainpy.optim.InverseTimeDecay": [[922, "brainpy-optim-inversetimedecay"]], "brainpy.optim.LARS": [[923, "brainpy-optim-lars"]], "brainpy.optim.Momentum": [[924, "brainpy-optim-momentum"]], "brainpy.optim.MomentumNesterov": [[925, "brainpy-optim-momentumnesterov"]], "brainpy.optim.MultiStepLR": [[926, "brainpy-optim-multisteplr"]], "brainpy.optim.Optimizer": [[927, "brainpy-optim-optimizer"]], "brainpy.optim.PiecewiseConstant": [[928, "brainpy-optim-piecewiseconstant"]], "brainpy.optim.PolynomialDecay": [[929, "brainpy-optim-polynomialdecay"]], "brainpy.optim.RMSProp": [[930, "brainpy-optim-rmsprop"]], "brainpy.optim.SGD": [[931, "brainpy-optim-sgd"]], "brainpy.optim.Scheduler": [[932, "brainpy-optim-scheduler"]], "brainpy.optim.StepLR": [[933, "brainpy-optim-steplr"]], "brainpy.optim.make_schedule": [[934, "brainpy-optim-make-schedule"]], "brainpy.rates.FHN": [[935, "brainpy-rates-fhn"]], "brainpy.rates.FeedbackFHN": [[936, "brainpy-rates-feedbackfhn"]], "brainpy.rates.QIF": [[937, "brainpy-rates-qif"]], "brainpy.rates.RateModel": [[938, "brainpy-rates-ratemodel"]], "brainpy.rates.StuartLandauOscillator": [[939, "brainpy-rates-stuartlandauoscillator"]], "brainpy.rates.ThresholdLinearModel": [[940, "brainpy-rates-thresholdlinearmodel"]], "Reference": [[940, "reference"]], "brainpy.rates.WilsonCowanModel": [[941, "brainpy-rates-wilsoncowanmodel"]], "brainpy.running.cpu_ordered_parallel": [[942, "brainpy-running-cpu-ordered-parallel"]], "brainpy.running.cpu_unordered_parallel": [[943, "brainpy-running-cpu-unordered-parallel"]], "brainpy.running.jax_parallelize_map": [[944, "brainpy-running-jax-parallelize-map"]], "brainpy.running.jax_vectorize_map": [[945, "brainpy-running-jax-vectorize-map"]], "brainpy.running.process_pool": [[946, "brainpy-running-process-pool"]], "brainpy.running.process_pool_lock": [[947, "brainpy-running-process-pool-lock"]], "brainpy.sdeint": [[948, "brainpy-sdeint"]], "brainpy.synapses.AMPA": [[949, "brainpy-synapses-ampa"]], "brainpy.synapses.AdditiveCoupling": [[950, "brainpy-synapses-additivecoupling"]], "brainpy.synapses.Alpha": [[951, "brainpy-synapses-alpha"]], "brainpy.synapses.BioNMDA": [[952, "brainpy-synapses-bionmda"]], "brainpy.synapses.DelayCoupling": [[953, "brainpy-synapses-delaycoupling"]], "brainpy.synapses.Delta": [[954, "brainpy-synapses-delta"]], "brainpy.synapses.DiffusiveCoupling": [[955, "brainpy-synapses-diffusivecoupling"]], "brainpy.synapses.DualExponential": [[956, "brainpy-synapses-dualexponential"]], "brainpy.synapses.Exponential": [[957, "brainpy-synapses-exponential"]], "brainpy.synapses.GABAa": [[958, "brainpy-synapses-gabaa"]], "brainpy.synapses.GapJunction": [[959, "brainpy-synapses-gapjunction"]], "brainpy.synapses.NMDA": [[960, "brainpy-synapses-nmda"]], "brainpy.synapses.PoissonInput": [[961, "brainpy-synapses-poissoninput"]], "brainpy.synouts.COBA": [[962, "brainpy-synouts-coba"]], "brainpy.synouts.CUBA": [[963, "brainpy-synouts-cuba"]], "brainpy.synouts.MgBlock": [[964, "brainpy-synouts-mgblock"]], "brainpy.synplast.STD": [[965, "brainpy-synplast-std"]], "brainpy.synplast.STP": [[966, "brainpy-synplast-stp"]], "brainpy.initialize module": [[967, "module-brainpy.initialize"]], "Basic Initialization Classes": [[967, "basic-initialization-classes"]], "Regular Initializers": [[967, "regular-initializers"]], "Random Initializers": [[967, "random-initializers"]], "Decay Initializers": [[967, "decay-initializers"]], "brainpy.inputs module": [[968, "module-brainpy.inputs"]], "brainpy.integrators module": [[969, "module-brainpy.integrators"]], "ODE integrators": [[969, "module-brainpy.integrators.ode"]], "Base ODE Integrator": [[969, "base-ode-integrator"]], "Generic ODE Functions": [[969, "generic-ode-functions"]], "Explicit Runge-Kutta ODE Integrators": [[969, "explicit-runge-kutta-ode-integrators"]], "Adaptive Runge-Kutta ODE Integrators": [[969, "adaptive-runge-kutta-ode-integrators"]], "Exponential ODE Integrators": [[969, "exponential-ode-integrators"]], "SDE integrators": [[969, "module-brainpy.integrators.sde"]], "Base SDE Integrator": [[969, "base-sde-integrator"]], "Generic SDE Functions": [[969, "generic-sde-functions"]], "Normal SDE Integrators": [[969, "normal-sde-integrators"]], "SRK methods for scalar Wiener process": [[969, "srk-methods-for-scalar-wiener-process"]], "FDE integrators": [[969, "module-brainpy.integrators.fde"]], "Base FDE Integrator": [[969, "base-fde-integrator"]], "Generic FDE Functions": [[969, "generic-fde-functions"]], "Methods for Caputo Fractional Derivative": [[969, "methods-for-caputo-fractional-derivative"]], "Methods for Riemann-Liouville Fractional Derivative": [[969, "methods-for-riemann-liouville-fractional-derivative"]], "brainpy.layers module": [[970, "module-brainpy.layers"]], "Basic ANN Layer Class": [[970, "basic-ann-layer-class"]], "Convolutional Layers": [[970, "convolutional-layers"]], "Dropout Layers": [[970, "dropout-layers"]], "Function Layers": [[970, "function-layers"]], "Dense Connection Layers": [[970, "dense-connection-layers"]], "Normalization Layers": [[970, "normalization-layers"]], "NVAR Layers": [[970, "nvar-layers"]], "Pooling Layers": [[970, "pooling-layers"]], "Reservoir Layers": [[970, "reservoir-layers"]], "Artificial Recurrent Layers": [[970, "artificial-recurrent-layers"]], "brainpy.losses module": [[971, "module-brainpy.losses"]], "Comparison": [[971, "comparison"]], "Regularization": [[971, "regularization"]], "brainpy.math module": [[972, "brainpy-math-module"]], "Basis for Object-oriented Transformations": [[972, "module-brainpy.math"]], "Object-oriented Transformations": [[972, "module-0"]], "Brain Dynamics Dedicated Operators": [[972, "module-1"]], "Activation Functions": [[972, "module-2"]], "Delay Variables": [[972, "module-3"]], "Environment Settings": [[972, "module-4"]], "Computing Modes": [[972, "module-5"]], "Array Interoperability": [[972, "module-6"]], "Array Operators with NumPy Syntax": [[972, "module-7"]], "Array Operators with PyTorch Syntax": [[972, "module-8"]], "Array Operators with TensorFlow Syntax": [[972, "module-9"]], "brainpy.math.surrogate module: Surrogate Gradient Functions": [[972, "module-brainpy.math.surrogate"]], "brainpy.math.random module: Random Number Generations": [[972, "module-brainpy.math.random"]], "brainpy.math.linalg module: Linear algebra": [[972, "module-brainpy.math.linalg"]], "brainpy.math.fft module: Discrete Fourier Transform": [[972, "module-brainpy.math.fft"]], "brainpy.math.random module": [[973, "module-brainpy.math.random"]], "brainpy.math.surrogate module": [[974, "module-brainpy.math.surrogate"]], "brainpy.measure module": [[975, "module-brainpy.measure"]], "brainpy.neurons module": [[976, "module-brainpy.neurons"]], "Biological Models": [[976, "biological-models"], [980, "biological-models"]], "Fractional-order Models": [[976, "fractional-order-models"]], "Reduced Models": [[976, "reduced-models"]], "Noise Models": [[976, "noise-models"]], "Input Models": [[976, "input-models"]], "brainpy.optim module": [[977, "module-brainpy.optim"]], "Optimizers": [[977, "optimizers"]], "Schedulers": [[977, "schedulers"], [1024, "schedulers"]], "brainpy.rates module": [[978, "module-brainpy.rates"]], "brainpy.running module": [[979, "module-brainpy.running"]], "brainpy.synapses module": [[980, "module-brainpy.synapses"]], "Abstract Models": [[980, "abstract-models"]], "Coupling Models": [[980, "coupling-models"]], "Gap Junction Models": [[980, "gap-junction-models"]], "Learning Rule Models": [[980, "learning-rule-models"]], "brainpy.synouts module": [[981, "module-brainpy.synouts"]], "brainpy.synplast module": [[982, "module-brainpy.synplast"]], "Concept 2: Dynamical System": [[983, "concept-2-dynamical-system"]], "What is DynamicalSystem?": [[983, "what-is-dynamicalsystem"]], "How to define DynamicalSystem?": [[983, "how-to-define-dynamicalsystem"]], "1. .update() function": [[983, "update-function"]], "2. Computing mode": [[983, "computing-mode"]], "Model composition": [[983, "model-composition"]], "How to run DynamicalSystem?": [[983, "how-to-run-dynamicalsystem"]], "1. brainpy.math.for_loop": [[983, "brainpy-math-for-loop"]], "2. brainpy.DSRunner": [[983, "brainpy-dsrunner"]], "Concept 1: Object-oriented Transformation": [[984, "concept-1-object-oriented-transformation"]], "Illustrating example: Training a network": [[984, "illustrating-example-training-a-network"]], "BrainPyObject and its Variable": [[984, "brainpyobject-and-its-variable"]], "Transform a function to BrainPyObject": [[984, "transform-a-function-to-brainpyobject"]], "BrainPy object-oriented transformations": [[984, "brainpy-object-oriented-transformations"]], "Math Foundation": [[985, "math-foundation"], [1013, "math-foundation"]], "BrainPy documentation": [[986, "brainpy-documentation"]], "Quickstart": [[986, null]], "BrainPy Core Concepts": [[986, null]], "Brain Dynamics Tutorials": [[986, null]], "Advanced Tutorials": [[986, null]], "Toolboxes": [[986, null]], "Frequently Asked Questions": [[986, null]], "API Documentation": [[986, null]], "Indices and tables": [[986, "indices-and-tables"]], "Analyzing a Brain Dynamics Model": [[987, "analyzing-a-brain-dynamics-model"]], "Bifurcation analysis of a 1D model": [[987, "bifurcation-analysis-of-a-1d-model"]], "Phase plane analysis of a 2D model": [[987, "phase-plane-analysis-of-a-2d-model"]], "Slow point analysis of a high-dimensional system": [[987, "slow-point-analysis-of-a-high-dimensional-system"]], "Further reading": [[987, "further-reading"], [1020, "further-reading"]], "Installation": [[988, "installation"]], "Installation with pip": [[988, "installation-with-pip"]], "Installation from source": [[988, "installation-from-source"]], "Dependency 1: NumPy": [[988, "dependency-1-numpy"]], "Dependency 2: JAX": [[988, "dependency-2-jax"]], "Linux & MacOS": [[988, "linux-macos"]], "Windows": [[988, "windows"]], "WSL": [[988, "wsl"]], "Dependency 3: brainpylib": [[988, "dependency-3-brainpylib"]], "Other Dependency": [[988, "other-dependency"]], "Simulating a Brain Dynamics Model": [[989, "simulating-a-brain-dynamics-model"]], "Simulating an E-I balanced network": [[989, "simulating-an-e-i-balanced-network"]], "Building an E-I balanced network": [[989, "building-an-e-i-balanced-network"]], "Running a simulation": [[989, "running-a-simulation"], [989, "id1"]], "Simulating a decision-making network": [[989, "simulating-a-decision-making-network"]], "Building a decision-making network": [[989, "building-a-decision-making-network"]], "Simulating a firing rate-based network": [[989, "simulating-a-firing-rate-based-network"]], "Neural mass model": [[989, "neural-mass-model"]], "Whole-brain model": [[989, "whole-brain-model"]], "References": [[989, "references"], [994, "references"], [999, "references"], [1000, "references"], [1002, "references"], [1031, "references"]], "Training a Brain Dynamics Model": [[990, "training-a-brain-dynamics-model"]], "Training a reservoir network model": [[990, "training-a-reservoir-network-model"]], "Training an artificial recurrent network": [[990, "training-an-artificial-recurrent-network"]], "Training a spiking neural network": [[990, "training-a-spiking-neural-network"]], "BrainPy Ecosystem for Brain Dynamics Modeling": [[991, "brainpy-ecosystem-for-brain-dynamics-modeling"]], "BrainPy": [[991, "brainpy"]], "brainpy-examples": [[991, "brainpy-examples"]], "brainpylib": [[991, "brainpylib"]], "brainpy-datasets": [[991, "brainpy-datasets"]], "brainpy-largescale": [[991, "brainpy-largescale"]], "How to cite BrainPy?": [[992, "how-to-cite-brainpy"]], "How is brainpy different from other frameworks?": [[993, "how-is-brainpy-different-from-other-frameworks"]], "BrainPy vs Brian2/NEST/NEURON \u2026": [[993, "brainpy-vs-brian2-nest-neuron"]], "BrainPy vs JAX/Numba": [[993, "brainpy-vs-jax-numba"]], "How does low-dimensional analyzers work?": [[994, "how-does-low-dimensional-analyzers-work"]], "Terminology": [[994, "terminology"]], "Mechanism for 1D system analysis": [[994, "mechanism-for-1d-system-analysis"]], "Mechanism for 2D system analysis": [[994, "mechanism-for-2d-system-analysis"]], "BrainPyObject and Collector": [[995, "brainpyobject-and-collector"]], "brainpy.BrainPyObject": [[995, "brainpy-brainpyobject"]], "The naming system": [[995, "the-naming-system"]], "Collection functions": [[995, "collection-functions"]], "Absolute paths": [[995, "absolute-paths"]], "Relative paths": [[995, "relative-paths"]], "Elements in containers": [[995, "elements-in-containers"]], "Saving and loading": [[995, "saving-and-loading"]], "Save": [[995, "save"]], "Load": [[995, "load"]], "Collector": [[995, "collector"]], "subset()": [[995, "subset"]], "unique()": [[995, "unique"]], "update()": [[995, "update"]], "replace()": [[995, "replace"]], "__add()__": [[995, "add"]], "ArrayCollector": [[995, "arraycollector"]], "JIT Compilation with BrainPyObject": [[996, "jit-compilation-with-brainpyobject"]], "brainpy.math.jit()": [[996, "brainpy-math-jit"]], "JIT compilation for class objects": [[996, "jit-compilation-for-class-objects"]], "JIT mechanism": [[996, "jit-mechanism"]], "Example 1: JIT compiled methods in a class": [[996, "example-1-jit-compiled-methods-in-a-class"]], "Example 2: JIT compiled functions": [[996, "example-2-jit-compiled-functions"]], "Example 3: JIT compiled neural networks": [[996, "example-3-jit-compiled-neural-networks"]], "RandomState": [[996, "randomstate"]], "Static arguments": [[996, "static-arguments"]], "Automatic Differentiation with BrainPyObject": [[997, "automatic-differentiation-with-brainpyobject"]], "Preliminary": [[997, "preliminary"]], "argnums and grad_vars": [[997, "argnums-and-grad-vars"]], "return_value": [[997, "return-value"]], "has_aux": [[997, "has-aux"]], "brainpy.math.grad()": [[997, "brainpy-math-grad"]], "Pure functions": [[997, "pure-functions"]], "Class objects": [[997, "class-objects"]], "Auxiliary data": [[997, "auxiliary-data"]], "brainpy.math.vector_grad()": [[997, "brainpy-math-vector-grad"]], "Gradients for vectors": [[997, "gradients-for-vectors"]], "Gradients for matrices": [[997, "gradients-for-matrices"]], "brainpy.math.jacobian()": [[997, "brainpy-math-jacobian"]], "Interoperation with other JAX frameworks": [[998, "interoperation-with-other-jax-frameworks"]], "1. data are exchangeable among different frameworks.": [[998, "data-are-exchangeable-among-different-frameworks"]], "2. transformations in brainpy.math also work on functions.": [[998, "transformations-in-brainpy-math-also-work-on-functions"]], "3. other JAX frameworks can be integrated into a BrainPy program.": [[998, "other-jax-frameworks-can-be-integrated-into-a-brainpy-program"]], "Analysis of a Decision-making Model": [[999, "analysis-of-a-decision-making-model"]], "Decision making model": [[999, "decision-making-model"]], "Parameters": [[999, "parameters"]], "Model implementation": [[999, "model-implementation"]], "Phase plane analysis": [[999, "phase-plane-analysis"], [1002, "phase-plane-analysis"]], "Bifurcation analysis": [[999, "bifurcation-analysis"], [1002, "bifurcation-analysis"]], "What are slow points?": [[1000, "what-are-slow-points"]], "How to find slow points?": [[1000, "how-to-find-slow-points"]], "Example 1: Decision Making Model": [[1000, "example-1-decision-making-model"]], "Example 2: Continuous-attractor Neural Network": [[1000, "example-2-continuous-attractor-neural-network"]], "Model Analysis": [[1001, "model-analysis"]], "A simple case": [[1002, "a-simple-case"]], "Understanding settings": [[1002, "understanding-settings"]], "resolutions": [[1002, "resolutions"]], "vars and pars": [[1002, "vars-and-pars"]], "Fast-slow system bifurcation": [[1002, "fast-slow-system-bifurcation"]], "Building Conductance-based Neuron Models": [[1003, "building-conductance-based-neuron-models"]], "Building an ion channel": [[1003, "building-an-ion-channel"]], "Building a conductance-based neuron model with ion channels": [[1003, "building-a-conductance-based-neuron-model-with-ion-channels"]], "Building Network Models": [[1004, "building-network-models"]], "Excitation-Inhibition (E-I) Balanced Network": [[1004, "excitation-inhibition-e-i-balanced-network"]], "Two ways to define network models": [[1004, "two-ways-to-define-network-models"]], "1. Defining a network as a class": [[1004, "defining-a-network-as-a-class"]], "2. Instantiating a network directly": [[1004, "instantiating-a-network-directly"]], "Customizing update function": [[1004, "customizing-update-function"]], "Building Synapse Models": [[1005, "building-synapse-models"]], "Synaptic models with brainpy.dyn.TwoEndConn": [[1005, "synaptic-models-with-brainpy-dyn-twoendconn"]], "Example 1: Exponential synapse model": [[1005, "example-1-exponential-synapse-model"]], "Example 2: NMDA synapse model": [[1005, "example-2-nmda-synapse-model"]], "Example 3: Synapse models with short-term plasticity": [[1005, "example-3-synapse-models-with-short-term-plasticity"]], "Example 4: synapse models with long-term plasticity": [[1005, "example-4-synapse-models-with-long-term-plasticity"]], "Customizing General Dynamical Systems": [[1006, "customizing-general-dynamical-systems"]], "What is a dynamical system?": [[1006, "what-is-a-dynamical-system"]], "Customizing your dynamical systems": [[1006, "customizing-your-dynamical-systems"]], "Advantages of using brainpy.dyn.DynamicalSystem": [[1006, "advantages-of-using-brainpy-dyn-dynamicalsystem"]], "1. A systematic naming system.": [[1006, "a-systematic-naming-system"]], "2. Convenient operations for simulation and analysis.": [[1006, "convenient-operations-for-simulation-and-analysis"]], "3. Efficient computation.": [[1006, "efficient-computation"]], "4. Support composable programming.": [[1006, "support-composable-programming"]], "Customizing Your Neuron Models": [[1007, "customizing-your-neuron-models"]], "brainpy.dyn.NeuGroup": [[1007, "brainpy-dyn-neugroup"]], "Hodgkin\u2013Huxley Model": [[1007, "hodgkinhuxley-model"]], "Leaky Integrate-and-Fire Model": [[1007, "leaky-integrate-and-fire-model"]], "Instantiation and running": [[1007, "instantiation-and-running"]], "Customizing Your Synapse Models": [[1008, "customizing-your-synapse-models"]], "Synapse Models in Math": [[1008, "synapse-models-in-math"]], "1. The exponential synapse model": [[1008, "the-exponential-synapse-model"]], "2. The AMPA synapse model": [[1008, "the-ampa-synapse-model"]], "Synapse Models in Silicon": [[1008, "synapse-models-in-silicon"]], "1. brainpy.dyn.TwoEndConn": [[1008, "brainpy-dyn-twoendconn"]], "2. Variable delays": [[1008, "variable-delays"]], "3. Synaptic connections": [[1008, "synaptic-connections"]], "Achieving efficient synaptic computation is difficult": [[1008, "achieving-efficient-synaptic-computation-is-difficult"]], "Computation with Dense Connections": [[1008, "computation-with-dense-connections"]], "conn_mat": [[1008, "conn-mat"]], "Special connections": [[1008, "special-connections"]], "Computation with Sparse Connections": [[1008, "computation-with-sparse-connections"]], "The pre2post operator": [[1008, "the-pre2post-operator"]], "The pre2syn and syn2post operators": [[1008, "the-pre2syn-and-syn2post-operators"]], "Model Building": [[1009, "model-building"]], "Using Built-in Models": [[1010, "using-built-in-models"]], "Initializing a neuron model": [[1010, "initializing-a-neuron-model"]], "Initializing a synapse model": [[1010, "initializing-a-synapse-model"]], "Changing model parameters during simulation": [[1010, "changing-model-parameters-during-simulation"]], "Examples of using built-in models": [[1010, "examples-of-using-built-in-models"]], "Variable": [[1011, "variable"]], "In-place updating": [[1011, "in-place-updating"], [1015, "in-place-updating"]], "Control Flows for JIT compilation": [[1012, "control-flows-for-jit-compilation"]], "1. Selection": [[1012, "selection"]], "Non-Variable-based control statements": [[1012, "non-variable-based-control-statements"]], "Variable-based control statements": [[1012, "variable-based-control-statements"]], "2. Repetition": [[1012, "repetition"]], "Pythonic loop syntax": [[1012, "pythonic-loop-syntax"]], "brainpy.math.for_loop()": [[1012, "brainpy-math-for-loop"]], "brainpy.math.while_loop()": [[1012, "brainpy-math-while-loop"]], "Random Number Generation for JIT Compilation": [[1014, "random-number-generation-for-jit-compilation"]], "Using bm.random outside functions to JIT": [[1014, "using-bm-random-outside-functions-to-jit"]], "Using bm.random inside a function to JIT": [[1014, "using-bm-random-inside-a-function-to-jit"]], "Using RandomState for objects to JIT": [[1014, "using-randomstate-for-objects-to-jit"]], "Subtypes of Variable": [[1015, "subtypes-of-variable"]], "1. TrainVar": [[1015, "trainvar"]], "2. Parameter": [[1015, "parameter"]], "3. RandomState": [[1015, "randomstate"]], "1. Indexing and slicing": [[1015, "indexing-and-slicing"]], "2. Augmented assignment": [[1015, "augmented-assignment"]], "3. .value assignment": [[1015, "value-assignment"]], "4. .update() method": [[1015, "update-method"]], "Model Simulation": [[1016, "model-simulation"]], "Parallel Simulation for Parameter Exploration": [[1017, "parallel-simulation-for-parameter-exploration"]], "Parallelization across different CPU processors": [[1017, "parallelization-across-different-cpu-processors"]], "Parallelization with jax.vmap": [[1017, "parallelization-with-jax-vmap"]], "Parallelization across multiple devices": [[1017, "parallelization-across-multiple-devices"]], "Simulation with DSRunner": [[1018, "simulation-with-dsrunner"]], "Initializing a DSRunner": [[1018, "initializing-a-dsrunner"]], "Running a DSRunner": [[1018, "running-a-dsrunner"]], "Monitors in DSRunner": [[1018, "monitors-in-dsrunner"]], "Initialization with a list of strings": [[1018, "initialization-with-a-list-of-strings"]], "Initialization with index specification": [[1018, "initialization-with-index-specification"]], "Explicit monitor target": [[1018, "explicit-monitor-target"]], "Explicit monitor target with index specification": [[1018, "explicit-monitor-target-with-index-specification"]], "Inputs in DSRunner": [[1018, "inputs-in-dsrunner"]], "Static inputs": [[1018, "static-inputs"]], "Iterable inputs": [[1018, "iterable-inputs"]], "Numerical Solvers for Delay Differential Equations": [[1019, "numerical-solvers-for-delay-differential-equations"]], "Delay variables": [[1019, "delay-variables"]], "Delay ODEs": [[1019, "delay-odes"]], "Example #1: First-order DDE with one constant delay and a constant initial history function": [[1019, "example-1-first-order-dde-with-one-constant-delay-and-a-constant-initial-history-function"]], "Example #2: First-order DDE with one constant delay and a non constant initial history function": [[1019, "example-2-first-order-dde-with-one-constant-delay-and-a-non-constant-initial-history-function"]], "Example #3: First-order DDE with two constant delays and a constant initial history function": [[1019, "example-3-first-order-dde-with-two-constant-delays-and-a-constant-initial-history-function"]], "Example #4: System of two first-order DDEs with one constant delay and two constant initial history functions": [[1019, "example-4-system-of-two-first-order-ddes-with-one-constant-delay-and-two-constant-initial-history-functions"]], "Example #5: Second-order DDE with one constant delay and two constant initial history functions": [[1019, "example-5-second-order-dde-with-one-constant-delay-and-two-constant-initial-history-functions"]], "Example #6: First-order DDE with one non constant delay and a constant initial history function": [[1019, "example-6-first-order-dde-with-one-non-constant-delay-and-a-constant-initial-history-function"]], "Delay SDEs": [[1019, "delay-sdes"]], "Delay FDEs": [[1019, "delay-fdes"]], "Lemmings\u2019 population cycle": [[1019, "lemmings-population-cycle"]], "Time delay Chen system": [[1019, "time-delay-chen-system"]], "Enzyme kinetics": [[1019, "enzyme-kinetics"]], "Fractional matrix delayed differential equations": [[1019, "fractional-matrix-delayed-differential-equations"]], "Acknowledgement": [[1019, "acknowledgement"]], "Numerical Solvers for Fractional Differential Equations": [[1020, "numerical-solvers-for-fractional-differential-equations"]], "Methods for Caputo FDEs": [[1020, "methods-for-caputo-fdes"]], "brainpy.fde.CaputoEuler": [[1020, "brainpy-fde-caputoeuler"]], "brainpy.fde.CaputoL1Schema": [[1020, "brainpy-fde-caputol1schema"]], "Methods for Gr\u00fcnwald-Letnikov FDEs": [[1020, "methods-for-grunwald-letnikov-fdes"]], "brainpy.fde.GLShortMemory": [[1020, "brainpy-fde-glshortmemory"]], "Inputs Construction": [[1021, "inputs-construction"]], "Input construction functions": [[1021, "input-construction-functions"]], "1. brainpy.inputs.section_input()": [[1021, "brainpy-inputs-section-input"]], "2. brainpy.inputs.constant_input()": [[1021, "brainpy-inputs-constant-input"]], "3. brainpy.inputs.spike_input()": [[1021, "brainpy-inputs-spike-input"]], "4. brainpy.inputs.ramp_input()": [[1021, "brainpy-inputs-ramp-input"]], "5. brainpy.inputs.wiener_process": [[1021, "brainpy-inputs-wiener-process"]], "6. brainpy.inputs.ou_process": [[1021, "brainpy-inputs-ou-process"]], "7. brainpy.inputs.sinusoidal_input": [[1021, "brainpy-inputs-sinusoidal-input"]], "8. brainpy.inputs.square_input": [[1021, "brainpy-inputs-square-input"]], "More complex inputs": [[1021, "more-complex-inputs"]], "General properties of input functions": [[1021, "general-properties-of-input-functions"]], "Joint Differential Equations": [[1022, "joint-differential-equations"]], "Why use brainpy.JointEq?": [[1022, "why-use-brainpy-jointeq"]], "Numerical Solvers for Ordinary Differential Equations": [[1023, "numerical-solvers-for-ordinary-differential-equations"]], "How to define ODE functions?": [[1023, "how-to-define-ode-functions"]], "How to define the numerical integration for ODEs?": [[1023, "how-to-define-the-numerical-integration-for-odes"]], "Two Examples": [[1023, "two-examples"]], "Example 1: FitzHugh\u2013Nagumo model": [[1023, "example-1-fitzhughnagumo-model"]], "Example 2: Hodgkin\u2013Huxley model": [[1023, "example-2-hodgkinhuxley-model"]], "Provided ODE Numerical Solvers": [[1023, "provided-ode-numerical-solvers"]], "1. Explicit Runge-Kutta (RK) methods for ODEs": [[1023, "explicit-runge-kutta-rk-methods-for-odes"]], "2. Adaptive Runge-Kutta (RK) methods for ODEs": [[1023, "adaptive-runge-kutta-rk-methods-for-odes"]], "3. Exponential Euler methods for ODEs": [[1023, "exponential-euler-methods-for-odes"]], "Gradient Descent Optimizers": [[1024, "gradient-descent-optimizers"]], "Optimizers in BrainPy": [[1024, "optimizers-in-brainpy"]], "Creating A Self-Customized Optimizer": [[1024, "creating-a-self-customized-optimizer"]], "Creating a Self-Customized Scheduler": [[1024, "creating-a-self-customized-scheduler"]], "Saving and Loading": [[1025, "saving-and-loading"]], "Saving and loading variables": [[1025, "saving-and-loading-variables"]], "Custom saving and loading": [[1025, "custom-saving-and-loading"]], "Numerical Solvers for Stochastic Differential Equations": [[1026, "numerical-solvers-for-stochastic-differential-equations"]], "How to define SDE functions?": [[1026, "how-to-define-sde-functions"]], "How to define the numerical integration for SDEs?": [[1026, "how-to-define-the-numerical-integration-for-sdes"]], "Example: Noisy Lorenz system": [[1026, "example-noisy-lorenz-system"]], "Supported SDE Numerical Methods": [[1026, "supported-sde-numerical-methods"]], "Synaptic Connections": [[1027, "synaptic-connections"]], "An Overview of BrainPy Connectors": [[1027, "an-overview-of-brainpy-connectors"]], "Base class: bp.conn.Connector": [[1027, "base-class-bp-conn-connector"]], "Two subclasses: TwoEndConnector and OneEndConnector": [[1027, "two-subclasses-twoendconnector-and-oneendconnector"]], "Connector.__init__()": [[1027, "connector-init"]], "Connector.__call__()": [[1027, "connector-call"]], "Connector.build_conn()": [[1027, "connector-build-conn"]], "Connector.require()": [[1027, "connector-require"]], "Connection Properties": [[1027, "connection-properties"]], "1. conn_mat": [[1027, "conn-mat"]], "2. pre_ids and post_ids": [[1027, "pre-ids-and-post-ids"]], "3. pre2post and post2pre": [[1027, "pre2post-and-post2pre"]], "4. pre2syn and post2syn": [[1027, "pre2syn-and-post2syn"]], "Built-in regular connections": [[1027, "built-in-regular-connections"]], "brainpy.connect.One2One": [[1027, "brainpy-connect-one2one"]], "brainpy.connect.All2All": [[1027, "brainpy-connect-all2all"]], "Built-in random connections": [[1027, "built-in-random-connections"]], "Encapsulate your existing connections": [[1027, "encapsulate-your-existing-connections"]], "bp.conn.IJConn": [[1027, "bp-conn-ijconn"]], "bp.conn.MatConn": [[1027, "bp-conn-matconn"]], "bp.conn.SparseMatConn": [[1027, "bp-conn-sparsematconn"]], "Using NetworkX to provide connections and pass into Connector": [[1027, "using-networkx-to-provide-connections-and-pass-into-connector"]], "Customize your connections": [[1027, "customize-your-connections"]], "Synaptic Weights": [[1028, "synaptic-weights"]], "Creating Static Weights": [[1028, "creating-static-weights"]], "1. Storing weights with a scalar": [[1028, "storing-weights-with-a-scalar"]], "2. Storing weights with a matrix": [[1028, "storing-weights-with-a-matrix"]], "3. Storing weights with a vector": [[1028, "storing-weights-with-a-vector"]], "Conversion from a weight matrix to a weight vector": [[1028, "conversion-from-a-weight-matrix-to-a-weight-vector"]], "Creating Dynamic Weights": [[1028, "creating-dynamic-weights"]], "Built-in Weight Initializers": [[1028, "built-in-weight-initializers"]], "Base Class: bp.init.Initializer": [[1028, "base-class-bp-init-initializer"]], "Superclass 1: bp.init.InterLayerInitializer": [[1028, "superclass-1-bp-init-interlayerinitializer"]], "Superclass 2: bp.init.IntraLayerInitializer": [[1028, "superclass-2-bp-init-intralayerinitializer"]], "1. Built-In Regular Initializers": [[1028, "built-in-regular-initializers"]], "2. Built-In Random Initializers": [[1028, "built-in-random-initializers"]], "3. Built-In Decay Initializers": [[1028, "built-in-decay-initializers"]], "Customizing your initializers": [[1028, "customizing-your-initializers"]], "Training with Back-propagation Algorithms": [[1029, "training-with-back-propagation-algorithms"]], "Train a ANN model": [[1029, "train-a-ann-model"]], "Train a SNN model": [[1029, "train-a-snn-model"]], "Customize your BP training": [[1029, "customize-your-bp-training"]], "Building Training Models": [[1030, "building-training-models"]], "Use built-in models": [[1030, "use-built-in-models"]], "mode settings": [[1030, "mode-settings"]], "Naming a node": [[1030, "naming-a-node"]], "Initializing parameters": [[1030, "initializing-parameters"]], "Customize your models": [[1030, "customize-your-models"]], "Examples of training models": [[1030, "examples-of-training-models"]], "Artificial neural networks": [[1030, "artificial-neural-networks"]], "Reservoir computing models": [[1030, "reservoir-computing-models"]], "Spiking Neural Networks": [[1030, "spiking-neural-networks"]], "Introduction to Echo State Network": [[1031, "introduction-to-echo-state-network"]], "Echo State Network": [[1031, "echo-state-network"]], "Ridge regression": [[1031, "ridge-regression"]], "Dataset": [[1031, "dataset"]], "Task 1: prediction of Mackey-Glass timeseries": [[1031, "task-1-prediction-of-mackey-glass-timeseries"]], "Prepare the data": [[1031, "prepare-the-data"]], "Prepare the ESN": [[1031, "prepare-the-esn"]], "Train and test ESN": [[1031, "train-and-test-esn"]], "Make the task harder": [[1031, "make-the-task-harder"]], "Diving into the reservoir": [[1031, "diving-into-the-reservoir"]], "Spectral radius": [[1031, "spectral-radius"]], "Input scaling": [[1031, "input-scaling"]], "Leaking rate": [[1031, "leaking-rate"]], "Task 2: generation of Mackey-Glass timeseries": [[1031, "task-2-generation-of-mackey-glass-timeseries"]], "Model Training": [[1032, "model-training"]], "Training with Offline Algorithms": [[1033, "training-with-offline-algorithms"]], "Train a reservoir model": [[1033, "train-a-reservoir-model"], [1034, "train-a-reservoir-model"]], "Switch different training algorithms": [[1033, "switch-different-training-algorithms"]], "Customize your training algorithms": [[1033, "customize-your-training-algorithms"]], "Training with Online Algorithms": [[1034, "training-with-online-algorithms"]]}, "indexentries": {"brainpy.analysis": [[0, "module-brainpy.analysis"]], "module": [[0, "module-brainpy.analysis"], [1, "module-brainpy"], [3, "module-brainpy.channels"], [4, "module-brainpy.connect"], [5, "module-brainpy.encoding"], [967, "module-brainpy.initialize"], [968, "module-brainpy.inputs"], [969, "module-brainpy.integrators"], [969, "module-brainpy.integrators.fde"], [969, "module-brainpy.integrators.ode"], [969, "module-brainpy.integrators.sde"], [970, "module-brainpy.layers"], [971, "module-brainpy.losses"], [972, "module-0"], [972, "module-1"], [972, "module-2"], [972, "module-3"], [972, "module-4"], [972, "module-5"], [972, "module-6"], [972, "module-7"], [972, "module-8"], [972, "module-9"], [972, "module-brainpy.math"], [972, "module-brainpy.math.fft"], [972, "module-brainpy.math.linalg"], [972, "module-brainpy.math.random"], [972, "module-brainpy.math.surrogate"], [973, "module-brainpy.math.random"], [974, "module-brainpy.math.surrogate"], [975, "module-brainpy.measure"], [976, "module-brainpy.neurons"], [977, "module-brainpy.optim"], [978, "module-brainpy.rates"], [979, "module-brainpy.running"], [980, "module-brainpy.synapses"], [981, "module-brainpy.synouts"], [982, "module-brainpy.synplast"]], "brainpy": [[1, "module-brainpy"]], "brainpy.channels": [[3, "module-brainpy.channels"]], "brainpy.connect": [[4, "module-brainpy.connect"]], "brainpy.encoding": [[5, "module-brainpy.encoding"]], "bpff (class in brainpy)": [[6, "brainpy.BPFF"]], "__init__() (brainpy.bpff method)": [[6, "brainpy.BPFF.__init__"]], "bptt (class in brainpy)": [[7, "brainpy.BPTT"]], "__init__() (brainpy.bptt method)": [[7, "brainpy.BPTT.__init__"]], "channel (class in brainpy)": [[8, "brainpy.Channel"]], "__init__() (brainpy.channel method)": [[8, "brainpy.Channel.__init__"]], "condneugroup (class in brainpy)": [[9, "brainpy.CondNeuGroup"]], "__init__() (brainpy.condneugroup method)": [[9, "brainpy.CondNeuGroup.__init__"]], "container (class in brainpy)": [[10, "brainpy.Container"]], "__init__() (brainpy.container method)": [[10, "brainpy.Container.__init__"]], "dsrunner (class in brainpy)": [[11, "brainpy.DSRunner"]], "__init__() (brainpy.dsrunner method)": [[11, "brainpy.DSRunner.__init__"]], "dstrainer (class in brainpy)": [[12, "brainpy.DSTrainer"]], "__init__() (brainpy.dstrainer method)": [[12, "brainpy.DSTrainer.__init__"]], "dynamicalsystem (class in brainpy)": [[13, "brainpy.DynamicalSystem"]], "__init__() (brainpy.dynamicalsystem method)": [[13, "brainpy.DynamicalSystem.__init__"]], "forcetrainer (class in brainpy)": [[14, "brainpy.ForceTrainer"]], "__init__() (brainpy.forcetrainer method)": [[14, "brainpy.ForceTrainer.__init__"]], "integrator (class in brainpy)": [[15, "brainpy.Integrator"]], "__init__() (brainpy.integrator method)": [[15, "brainpy.Integrator.__init__"]], "integratorrunner (class in brainpy)": [[16, "brainpy.IntegratorRunner"]], "__init__() (brainpy.integratorrunner method)": [[16, "brainpy.IntegratorRunner.__init__"]], "jointeq (class in brainpy)": [[17, "brainpy.JointEq"]], "__init__() (brainpy.jointeq method)": [[17, "brainpy.JointEq.__init__"]], "loopovertime (class in brainpy)": [[18, "brainpy.LoopOverTime"]], "__init__() (brainpy.loopovertime method)": [[18, "brainpy.LoopOverTime.__init__"]], "network (class in brainpy)": [[19, "brainpy.Network"]], "__init__() (brainpy.network method)": [[19, "brainpy.Network.__init__"]], "neugroup (class in brainpy)": [[20, "brainpy.NeuGroup"]], "__init__() (brainpy.neugroup method)": [[20, "brainpy.NeuGroup.__init__"]], "nosharedarg (class in brainpy)": [[21, "brainpy.NoSharedArg"]], "__init__() (brainpy.nosharedarg method)": [[21, "brainpy.NoSharedArg.__init__"]], "offlinetrainer (class in brainpy)": [[22, "brainpy.OfflineTrainer"]], "__init__() (brainpy.offlinetrainer method)": [[22, "brainpy.OfflineTrainer.__init__"]], "onlinetrainer (class in brainpy)": [[23, "brainpy.OnlineTrainer"]], "__init__() (brainpy.onlinetrainer method)": [[23, "brainpy.OnlineTrainer.__init__"]], "ridgetrainer (class in brainpy)": [[24, "brainpy.RidgeTrainer"]], "__init__() (brainpy.ridgetrainer method)": [[24, "brainpy.RidgeTrainer.__init__"]], "sequential (class in brainpy)": [[25, "brainpy.Sequential"]], "__init__() (brainpy.sequential method)": [[25, "brainpy.Sequential.__init__"]], "synconn (class in brainpy)": [[26, "brainpy.SynConn"]], "__init__() (brainpy.synconn method)": [[26, "brainpy.SynConn.__init__"]], "synltp (class in brainpy)": [[27, "brainpy.SynLTP"]], "__init__() (brainpy.synltp method)": [[27, "brainpy.SynLTP.__init__"]], "synout (class in brainpy)": [[28, "brainpy.SynOut"]], "__init__() (brainpy.synout method)": [[28, "brainpy.SynOut.__init__"]], "synstp (class in brainpy)": [[29, "brainpy.SynSTP"]], "__init__() (brainpy.synstp method)": [[29, "brainpy.SynSTP.__init__"]], "twoendconn (class in brainpy)": [[30, "brainpy.TwoEndConn"]], "__init__() (brainpy.twoendconn method)": [[30, "brainpy.TwoEndConn.__init__"]], "bifurcation1d (class in brainpy.analysis)": [[31, "brainpy.analysis.Bifurcation1D"]], "__init__() (brainpy.analysis.bifurcation1d method)": [[31, "brainpy.analysis.Bifurcation1D.__init__"]], "bifurcation2d (class in brainpy.analysis)": [[32, "brainpy.analysis.Bifurcation2D"]], "__init__() (brainpy.analysis.bifurcation2d method)": [[32, "brainpy.analysis.Bifurcation2D.__init__"]], "fastslow1d (class in brainpy.analysis)": [[33, "brainpy.analysis.FastSlow1D"]], "__init__() (brainpy.analysis.fastslow1d method)": [[33, "brainpy.analysis.FastSlow1D.__init__"]], "fastslow2d (class in brainpy.analysis)": [[34, "brainpy.analysis.FastSlow2D"]], "__init__() (brainpy.analysis.fastslow2d method)": [[34, "brainpy.analysis.FastSlow2D.__init__"]], "phaseplane1d (class in brainpy.analysis)": [[35, "brainpy.analysis.PhasePlane1D"]], "__init__() (brainpy.analysis.phaseplane1d method)": [[35, "brainpy.analysis.PhasePlane1D.__init__"]], "phaseplane2d (class in brainpy.analysis)": [[36, "brainpy.analysis.PhasePlane2D"]], "__init__() (brainpy.analysis.phaseplane2d method)": [[36, "brainpy.analysis.PhasePlane2D.__init__"]], "slowpointfinder (class in brainpy.analysis)": [[37, "brainpy.analysis.SlowPointFinder"]], "__init__() (brainpy.analysis.slowpointfinder method)": [[37, "brainpy.analysis.SlowPointFinder.__init__"]], "calcium (class in brainpy.channels)": [[38, "brainpy.channels.Calcium"]], "__init__() (brainpy.channels.calcium method)": [[38, "brainpy.channels.Calcium.__init__"]], "calciumchannel (class in brainpy.channels)": [[39, "brainpy.channels.CalciumChannel"]], "__init__() (brainpy.channels.calciumchannel method)": [[39, "brainpy.channels.CalciumChannel.__init__"]], "calciumdetailed (class in brainpy.channels)": [[40, "brainpy.channels.CalciumDetailed"]], "__init__() (brainpy.channels.calciumdetailed method)": [[40, "brainpy.channels.CalciumDetailed.__init__"]], "calciumdyna (class in brainpy.channels)": [[41, "brainpy.channels.CalciumDyna"]], "__init__() (brainpy.channels.calciumdyna method)": [[41, "brainpy.channels.CalciumDyna.__init__"]], "calciumfirstorder (class in brainpy.channels)": [[42, "brainpy.channels.CalciumFirstOrder"]], "__init__() (brainpy.channels.calciumfirstorder method)": [[42, "brainpy.channels.CalciumFirstOrder.__init__"]], "calciumfixed (class in brainpy.channels)": [[43, "brainpy.channels.CalciumFixed"]], "__init__() (brainpy.channels.calciumfixed method)": [[43, "brainpy.channels.CalciumFixed.__init__"]], "iahp_de1994 (class in brainpy.channels)": [[44, "brainpy.channels.IAHP_De1994"]], "__init__() (brainpy.channels.iahp_de1994 method)": [[44, "brainpy.channels.IAHP_De1994.__init__"]], "icaht_hm1992 (class in brainpy.channels)": [[45, "brainpy.channels.ICaHT_HM1992"]], "__init__() (brainpy.channels.icaht_hm1992 method)": [[45, "brainpy.channels.ICaHT_HM1992.__init__"]], "ical_is2008 (class in brainpy.channels)": [[46, "brainpy.channels.ICaL_IS2008"]], "__init__() (brainpy.channels.ical_is2008 method)": [[46, "brainpy.channels.ICaL_IS2008.__init__"]], "ican_is2008 (class in brainpy.channels)": [[47, "brainpy.channels.ICaN_IS2008"]], "__init__() (brainpy.channels.ican_is2008 method)": [[47, "brainpy.channels.ICaN_IS2008.__init__"]], "icat_hm1992 (class in brainpy.channels)": [[48, "brainpy.channels.ICaT_HM1992"]], "__init__() (brainpy.channels.icat_hm1992 method)": [[48, "brainpy.channels.ICaT_HM1992.__init__"]], "icat_hp1992 (class in brainpy.channels)": [[49, "brainpy.channels.ICaT_HP1992"]], "__init__() (brainpy.channels.icat_hp1992 method)": [[49, "brainpy.channels.ICaT_HP1992.__init__"]], "ika1_hm1992 (class in brainpy.channels)": [[50, "brainpy.channels.IKA1_HM1992"]], "__init__() (brainpy.channels.ika1_hm1992 method)": [[50, "brainpy.channels.IKA1_HM1992.__init__"]], "ika2_hm1992 (class in brainpy.channels)": [[51, "brainpy.channels.IKA2_HM1992"]], "__init__() (brainpy.channels.ika2_hm1992 method)": [[51, "brainpy.channels.IKA2_HM1992.__init__"]], "ikdr_ba2002 (class in brainpy.channels)": [[52, "brainpy.channels.IKDR_Ba2002"]], "__init__() (brainpy.channels.ikdr_ba2002 method)": [[52, "brainpy.channels.IKDR_Ba2002.__init__"]], "ikk2a_hm1992 (class in brainpy.channels)": [[53, "brainpy.channels.IKK2A_HM1992"]], "__init__() (brainpy.channels.ikk2a_hm1992 method)": [[53, "brainpy.channels.IKK2A_HM1992.__init__"]], "ikk2b_hm1992 (class in brainpy.channels)": [[54, "brainpy.channels.IKK2B_HM1992"]], "__init__() (brainpy.channels.ikk2b_hm1992 method)": [[54, "brainpy.channels.IKK2B_HM1992.__init__"]], "ikl (class in brainpy.channels)": [[55, "brainpy.channels.IKL"]], "__init__() (brainpy.channels.ikl method)": [[55, "brainpy.channels.IKL.__init__"]], "ikni_ya1989 (class in brainpy.channels)": [[56, "brainpy.channels.IKNI_Ya1989"]], "__init__() (brainpy.channels.ikni_ya1989 method)": [[56, "brainpy.channels.IKNI_Ya1989.__init__"]], "ik_hh1952 (class in brainpy.channels)": [[57, "brainpy.channels.IK_HH1952"]], "__init__() (brainpy.channels.ik_hh1952 method)": [[57, "brainpy.channels.IK_HH1952.__init__"]], "ik_tm1991 (class in brainpy.channels)": [[58, "brainpy.channels.IK_TM1991"]], "__init__() (brainpy.channels.ik_tm1991 method)": [[58, "brainpy.channels.IK_TM1991.__init__"]], "il (class in brainpy.channels)": [[59, "brainpy.channels.IL"]], "__init__() (brainpy.channels.il method)": [[59, "brainpy.channels.IL.__init__"]], "ina_ba2002 (class in brainpy.channels)": [[60, "brainpy.channels.INa_Ba2002"]], "__init__() (brainpy.channels.ina_ba2002 method)": [[60, "brainpy.channels.INa_Ba2002.__init__"]], "ina_hh1952 (class in brainpy.channels)": [[61, "brainpy.channels.INa_HH1952"]], "__init__() (brainpy.channels.ina_hh1952 method)": [[61, "brainpy.channels.INa_HH1952.__init__"]], "ina_tm1991 (class in brainpy.channels)": [[62, "brainpy.channels.INa_TM1991"]], "__init__() (brainpy.channels.ina_tm1991 method)": [[62, "brainpy.channels.INa_TM1991.__init__"]], "ihchannel (class in brainpy.channels)": [[63, "brainpy.channels.IhChannel"]], "__init__() (brainpy.channels.ihchannel method)": [[63, "brainpy.channels.IhChannel.__init__"]], "ih_de1996 (class in brainpy.channels)": [[64, "brainpy.channels.Ih_De1996"]], "__init__() (brainpy.channels.ih_de1996 method)": [[64, "brainpy.channels.Ih_De1996.__init__"]], "ih_hm1992 (class in brainpy.channels)": [[65, "brainpy.channels.Ih_HM1992"]], "__init__() (brainpy.channels.ih_hm1992 method)": [[65, "brainpy.channels.Ih_HM1992.__init__"]], "ion (class in brainpy.channels)": [[66, "brainpy.channels.Ion"]], "__init__() (brainpy.channels.ion method)": [[66, "brainpy.channels.Ion.__init__"]], "ionchannel (class in brainpy.channels)": [[67, "brainpy.channels.IonChannel"]], "__init__() (brainpy.channels.ionchannel method)": [[67, "brainpy.channels.IonChannel.__init__"]], "leakychannel (class in brainpy.channels)": [[68, "brainpy.channels.LeakyChannel"]], "__init__() (brainpy.channels.leakychannel method)": [[68, "brainpy.channels.LeakyChannel.__init__"]], "potassiumchannel (class in brainpy.channels)": [[69, "brainpy.channels.PotassiumChannel"]], "__init__() (brainpy.channels.potassiumchannel method)": [[69, "brainpy.channels.PotassiumChannel.__init__"]], "sodiumchannel (class in brainpy.channels)": [[70, "brainpy.channels.SodiumChannel"]], "__init__() (brainpy.channels.sodiumchannel method)": [[70, "brainpy.channels.SodiumChannel.__init__"]], "all2all (in module brainpy.connect)": [[71, "brainpy.connect.all2all"]], "conn_mat (in module brainpy.connect)": [[72, "brainpy.connect.CONN_MAT"]], "csrconn (class in brainpy.connect)": [[73, "brainpy.connect.CSRConn"]], "__init__() (brainpy.connect.csrconn method)": [[73, "brainpy.connect.CSRConn.__init__"]], "connector (class in brainpy.connect)": [[74, "brainpy.connect.Connector"]], "__init__() (brainpy.connect.connector method)": [[74, "brainpy.connect.Connector.__init__"]], "fixedpostnum (class in brainpy.connect)": [[75, "brainpy.connect.FixedPostNum"]], "__init__() (brainpy.connect.fixedpostnum method)": [[75, "brainpy.connect.FixedPostNum.__init__"]], "fixedprenum (class in brainpy.connect)": [[76, "brainpy.connect.FixedPreNum"]], "__init__() (brainpy.connect.fixedprenum method)": [[76, "brainpy.connect.FixedPreNum.__init__"]], "fixedprob (class in brainpy.connect)": [[77, "brainpy.connect.FixedProb"]], "__init__() (brainpy.connect.fixedprob method)": [[77, "brainpy.connect.FixedProb.__init__"]], "fixedtotalnum (class in brainpy.connect)": [[78, "brainpy.connect.FixedTotalNum"]], "__init__() (brainpy.connect.fixedtotalnum method)": [[78, "brainpy.connect.FixedTotalNum.__init__"]], "gaussianprob (class in brainpy.connect)": [[79, "brainpy.connect.GaussianProb"]], "__init__() (brainpy.connect.gaussianprob method)": [[79, "brainpy.connect.GaussianProb.__init__"]], "grideight (class in brainpy.connect)": [[80, "brainpy.connect.GridEight"]], "__init__() (brainpy.connect.grideight method)": [[80, "brainpy.connect.GridEight.__init__"]], "gridfour (class in brainpy.connect)": [[81, "brainpy.connect.GridFour"]], "__init__() (brainpy.connect.gridfour method)": [[81, "brainpy.connect.GridFour.__init__"]], "gridn (class in brainpy.connect)": [[82, "brainpy.connect.GridN"]], "__init__() (brainpy.connect.gridn method)": [[82, "brainpy.connect.GridN.__init__"]], "ijconn (class in brainpy.connect)": [[83, "brainpy.connect.IJConn"]], "__init__() (brainpy.connect.ijconn method)": [[83, "brainpy.connect.IJConn.__init__"]], "matconn (class in brainpy.connect)": [[84, "brainpy.connect.MatConn"]], "__init__() (brainpy.connect.matconn method)": [[84, "brainpy.connect.MatConn.__init__"]], "one2one (in module brainpy.connect)": [[85, "brainpy.connect.one2one"]], "oneendconnector (class in brainpy.connect)": [[86, "brainpy.connect.OneEndConnector"]], "__init__() (brainpy.connect.oneendconnector method)": [[86, "brainpy.connect.OneEndConnector.__init__"]], "post2pre (in module brainpy.connect)": [[87, "brainpy.connect.POST2PRE"]], "post2syn (in module brainpy.connect)": [[88, "brainpy.connect.POST2SYN"]], "post_ids (in module brainpy.connect)": [[89, "brainpy.connect.POST_IDS"]], "pre2post (in module brainpy.connect)": [[90, "brainpy.connect.PRE2POST"]], "pre2syn (in module brainpy.connect)": [[91, "brainpy.connect.PRE2SYN"]], "pre_ids (in module brainpy.connect)": [[92, "brainpy.connect.PRE_IDS"]], "powerlaw (class in brainpy.connect)": [[93, "brainpy.connect.PowerLaw"]], "__init__() (brainpy.connect.powerlaw method)": [[93, "brainpy.connect.PowerLaw.__init__"]], "probdist (class in brainpy.connect)": [[94, "brainpy.connect.ProbDist"]], "__init__() (brainpy.connect.probdist method)": [[94, "brainpy.connect.ProbDist.__init__"]], "scalefreeba (class in brainpy.connect)": [[95, "brainpy.connect.ScaleFreeBA"]], "__init__() (brainpy.connect.scalefreeba method)": [[95, "brainpy.connect.ScaleFreeBA.__init__"]], "scalefreebadual (class in brainpy.connect)": [[96, "brainpy.connect.ScaleFreeBADual"]], "__init__() (brainpy.connect.scalefreebadual method)": [[96, "brainpy.connect.ScaleFreeBADual.__init__"]], "smallworld (class in brainpy.connect)": [[97, "brainpy.connect.SmallWorld"]], "__init__() (brainpy.connect.smallworld method)": [[97, "brainpy.connect.SmallWorld.__init__"]], "sparsematconn (class in brainpy.connect)": [[98, "brainpy.connect.SparseMatConn"]], "__init__() (brainpy.connect.sparsematconn method)": [[98, "brainpy.connect.SparseMatConn.__init__"]], "twoendconnector (class in brainpy.connect)": [[99, "brainpy.connect.TwoEndConnector"]], "__init__() (brainpy.connect.twoendconnector method)": [[99, "brainpy.connect.TwoEndConnector.__init__"]], "coo2csc() (in module brainpy.connect)": [[100, "brainpy.connect.coo2csc"]], "coo2csr() (in module brainpy.connect)": [[101, "brainpy.connect.coo2csr"]], "coo2mat() (in module brainpy.connect)": [[102, "brainpy.connect.coo2mat"]], "csr2coo() (in module brainpy.connect)": [[103, "brainpy.connect.csr2coo"]], "csr2csc() (in module brainpy.connect)": [[104, "brainpy.connect.csr2csc"]], "csr2mat() (in module brainpy.connect)": [[105, "brainpy.connect.csr2mat"]], "grid_eight (in module brainpy.connect)": [[106, "brainpy.connect.grid_eight"]], "grid_four (in module brainpy.connect)": [[107, "brainpy.connect.grid_four"]], "mat2coo() (in module brainpy.connect)": [[108, "brainpy.connect.mat2coo"]], "mat2csc() (in module brainpy.connect)": [[109, "brainpy.connect.mat2csc"]], "mat2csr() (in module brainpy.connect)": [[110, "brainpy.connect.mat2csr"]], "encoder (class in brainpy.encoding)": [[111, "brainpy.encoding.Encoder"]], "__init__() (brainpy.encoding.encoder method)": [[111, "brainpy.encoding.Encoder.__init__"]], "latencyencoder (class in brainpy.encoding)": [[112, "brainpy.encoding.LatencyEncoder"]], "__init__() (brainpy.encoding.latencyencoder method)": [[112, "brainpy.encoding.LatencyEncoder.__init__"]], "poissonencoder (class in brainpy.encoding)": [[113, "brainpy.encoding.PoissonEncoder"]], "__init__() (brainpy.encoding.poissonencoder method)": [[113, "brainpy.encoding.PoissonEncoder.__init__"]], "weightedphaseencoder (class in brainpy.encoding)": [[114, "brainpy.encoding.WeightedPhaseEncoder"]], "__init__() (brainpy.encoding.weightedphaseencoder method)": [[114, "brainpy.encoding.WeightedPhaseEncoder.__init__"]], "fdeint() (in module brainpy)": [[115, "brainpy.fdeint"]], "constant (class in brainpy.initialize)": [[116, "brainpy.initialize.Constant"]], "__init__() (brainpy.initialize.constant method)": [[116, "brainpy.initialize.Constant.__init__"]], "dogdecay (class in brainpy.initialize)": [[117, "brainpy.initialize.DOGDecay"]], "__init__() (brainpy.initialize.dogdecay method)": [[117, "brainpy.initialize.DOGDecay.__init__"]], "deltaorthogonal (class in brainpy.initialize)": [[118, "brainpy.initialize.DeltaOrthogonal"]], "__init__() (brainpy.initialize.deltaorthogonal method)": [[118, "brainpy.initialize.DeltaOrthogonal.__init__"]], "gaussiandecay (class in brainpy.initialize)": [[119, "brainpy.initialize.GaussianDecay"]], "__init__() (brainpy.initialize.gaussiandecay method)": [[119, "brainpy.initialize.GaussianDecay.__init__"]], "identity (class in brainpy.initialize)": [[120, "brainpy.initialize.Identity"]], "__init__() (brainpy.initialize.identity method)": [[120, "brainpy.initialize.Identity.__init__"]], "initializer (class in brainpy.initialize)": [[121, "brainpy.initialize.Initializer"]], "__init__() (brainpy.initialize.initializer method)": [[121, "brainpy.initialize.Initializer.__init__"]], "interlayerinitializer (class in brainpy.initialize)": [[122, "brainpy.initialize.InterLayerInitializer"]], "__init__() (brainpy.initialize.interlayerinitializer method)": [[122, "brainpy.initialize.InterLayerInitializer.__init__"]], "intralayerinitializer (class in brainpy.initialize)": [[123, "brainpy.initialize.IntraLayerInitializer"]], "__init__() (brainpy.initialize.intralayerinitializer method)": [[123, "brainpy.initialize.IntraLayerInitializer.__init__"]], "kaimingnormal (class in brainpy.initialize)": [[124, "brainpy.initialize.KaimingNormal"]], "__init__() (brainpy.initialize.kaimingnormal method)": [[124, "brainpy.initialize.KaimingNormal.__init__"]], "kaiminguniform (class in brainpy.initialize)": [[125, "brainpy.initialize.KaimingUniform"]], "__init__() (brainpy.initialize.kaiminguniform method)": [[125, "brainpy.initialize.KaimingUniform.__init__"]], "lecunnormal (class in brainpy.initialize)": [[126, "brainpy.initialize.LecunNormal"]], "__init__() (brainpy.initialize.lecunnormal method)": [[126, "brainpy.initialize.LecunNormal.__init__"]], "lecununiform (class in brainpy.initialize)": [[127, "brainpy.initialize.LecunUniform"]], "__init__() (brainpy.initialize.lecununiform method)": [[127, "brainpy.initialize.LecunUniform.__init__"]], "normal (class in brainpy.initialize)": [[128, "brainpy.initialize.Normal"]], "__init__() (brainpy.initialize.normal method)": [[128, "brainpy.initialize.Normal.__init__"]], "oneinit (class in brainpy.initialize)": [[129, "brainpy.initialize.OneInit"]], "__init__() (brainpy.initialize.oneinit method)": [[129, "brainpy.initialize.OneInit.__init__"]], "orthogonal (class in brainpy.initialize)": [[130, "brainpy.initialize.Orthogonal"]], "__init__() (brainpy.initialize.orthogonal method)": [[130, "brainpy.initialize.Orthogonal.__init__"]], "uniform (class in brainpy.initialize)": [[131, "brainpy.initialize.Uniform"]], "__init__() (brainpy.initialize.uniform method)": [[131, "brainpy.initialize.Uniform.__init__"]], "variancescaling (class in brainpy.initialize)": [[132, "brainpy.initialize.VarianceScaling"]], "__init__() (brainpy.initialize.variancescaling method)": [[132, "brainpy.initialize.VarianceScaling.__init__"]], "xaviernormal (class in brainpy.initialize)": [[133, "brainpy.initialize.XavierNormal"]], "__init__() (brainpy.initialize.xaviernormal method)": [[133, "brainpy.initialize.XavierNormal.__init__"]], "xavieruniform (class in brainpy.initialize)": [[134, "brainpy.initialize.XavierUniform"]], "__init__() (brainpy.initialize.xavieruniform method)": [[134, "brainpy.initialize.XavierUniform.__init__"]], "zeroinit (class in brainpy.initialize)": [[135, "brainpy.initialize.ZeroInit"]], "__init__() (brainpy.initialize.zeroinit method)": [[135, "brainpy.initialize.ZeroInit.__init__"]], "constant_input() (in module brainpy.inputs)": [[136, "brainpy.inputs.constant_input"]], "ou_process() (in module brainpy.inputs)": [[137, "brainpy.inputs.ou_process"]], "ramp_input() (in module brainpy.inputs)": [[138, "brainpy.inputs.ramp_input"]], "section_input() (in module brainpy.inputs)": [[139, "brainpy.inputs.section_input"]], "sinusoidal_input() (in module brainpy.inputs)": [[140, "brainpy.inputs.sinusoidal_input"]], "spike_input() (in module brainpy.inputs)": [[141, "brainpy.inputs.spike_input"]], "square_input() (in module brainpy.inputs)": [[142, "brainpy.inputs.square_input"]], "wiener_process() (in module brainpy.inputs)": [[143, "brainpy.inputs.wiener_process"]], "caputoeuler (class in brainpy.integrators.fde)": [[144, "brainpy.integrators.fde.CaputoEuler"]], "__init__() (brainpy.integrators.fde.caputoeuler method)": [[144, "brainpy.integrators.fde.CaputoEuler.__init__"]], "caputol1schema (class in brainpy.integrators.fde)": [[145, "brainpy.integrators.fde.CaputoL1Schema"]], "__init__() (brainpy.integrators.fde.caputol1schema method)": [[145, "brainpy.integrators.fde.CaputoL1Schema.__init__"]], "fdeintegrator (class in brainpy.integrators.fde)": [[146, "brainpy.integrators.fde.FDEIntegrator"]], "__init__() (brainpy.integrators.fde.fdeintegrator method)": [[146, "brainpy.integrators.fde.FDEIntegrator.__init__"]], "glshortmemory (class in brainpy.integrators.fde)": [[147, "brainpy.integrators.fde.GLShortMemory"]], "__init__() (brainpy.integrators.fde.glshortmemory method)": [[147, "brainpy.integrators.fde.GLShortMemory.__init__"]], "get_default_fdeint() (in module brainpy.integrators.fde)": [[148, "brainpy.integrators.fde.get_default_fdeint"]], "get_supported_methods() (in module brainpy.integrators.fde)": [[149, "brainpy.integrators.fde.get_supported_methods"]], "register_fde_integrator() (in module brainpy.integrators.fde)": [[150, "brainpy.integrators.fde.register_fde_integrator"]], "set_default_fdeint() (in module brainpy.integrators.fde)": [[151, "brainpy.integrators.fde.set_default_fdeint"]], "adaptiverkintegrator (class in brainpy.integrators.ode)": [[152, "brainpy.integrators.ode.AdaptiveRKIntegrator"]], "__init__() (brainpy.integrators.ode.adaptiverkintegrator method)": [[152, "brainpy.integrators.ode.AdaptiveRKIntegrator.__init__"]], "bogackishampine (class in brainpy.integrators.ode)": [[153, "brainpy.integrators.ode.BogackiShampine"]], "__init__() (brainpy.integrators.ode.bogackishampine method)": [[153, "brainpy.integrators.ode.BogackiShampine.__init__"]], "cashkarp (class in brainpy.integrators.ode)": [[154, "brainpy.integrators.ode.CashKarp"]], "__init__() (brainpy.integrators.ode.cashkarp method)": [[154, "brainpy.integrators.ode.CashKarp.__init__"]], "dormandprince (class in brainpy.integrators.ode)": [[155, "brainpy.integrators.ode.DormandPrince"]], "__init__() (brainpy.integrators.ode.dormandprince method)": [[155, "brainpy.integrators.ode.DormandPrince.__init__"]], "euler (class in brainpy.integrators.ode)": [[156, "brainpy.integrators.ode.Euler"]], "__init__() (brainpy.integrators.ode.euler method)": [[156, "brainpy.integrators.ode.Euler.__init__"]], "explicitrkintegrator (class in brainpy.integrators.ode)": [[157, "brainpy.integrators.ode.ExplicitRKIntegrator"]], "__init__() (brainpy.integrators.ode.explicitrkintegrator method)": [[157, "brainpy.integrators.ode.ExplicitRKIntegrator.__init__"]], "exponentialeuler (class in brainpy.integrators.ode)": [[158, "brainpy.integrators.ode.ExponentialEuler"]], "__init__() (brainpy.integrators.ode.exponentialeuler method)": [[158, "brainpy.integrators.ode.ExponentialEuler.__init__"]], "heun2 (class in brainpy.integrators.ode)": [[159, "brainpy.integrators.ode.Heun2"]], "__init__() (brainpy.integrators.ode.heun2 method)": [[159, "brainpy.integrators.ode.Heun2.__init__"]], "heun3 (class in brainpy.integrators.ode)": [[160, "brainpy.integrators.ode.Heun3"]], "__init__() (brainpy.integrators.ode.heun3 method)": [[160, "brainpy.integrators.ode.Heun3.__init__"]], "heuneuler (class in brainpy.integrators.ode)": [[161, "brainpy.integrators.ode.HeunEuler"]], "__init__() (brainpy.integrators.ode.heuneuler method)": [[161, "brainpy.integrators.ode.HeunEuler.__init__"]], "midpoint (class in brainpy.integrators.ode)": [[162, "brainpy.integrators.ode.MidPoint"]], "__init__() (brainpy.integrators.ode.midpoint method)": [[162, "brainpy.integrators.ode.MidPoint.__init__"]], "odeintegrator (class in brainpy.integrators.ode)": [[163, "brainpy.integrators.ode.ODEIntegrator"]], "__init__() (brainpy.integrators.ode.odeintegrator method)": [[163, "brainpy.integrators.ode.ODEIntegrator.__init__"]], "rk2 (class in brainpy.integrators.ode)": [[164, "brainpy.integrators.ode.RK2"]], "__init__() (brainpy.integrators.ode.rk2 method)": [[164, "brainpy.integrators.ode.RK2.__init__"]], "rk3 (class in brainpy.integrators.ode)": [[165, "brainpy.integrators.ode.RK3"]], "__init__() (brainpy.integrators.ode.rk3 method)": [[165, "brainpy.integrators.ode.RK3.__init__"]], "rk4 (class in brainpy.integrators.ode)": [[166, "brainpy.integrators.ode.RK4"]], "__init__() (brainpy.integrators.ode.rk4 method)": [[166, "brainpy.integrators.ode.RK4.__init__"]], "rk4rule38 (class in brainpy.integrators.ode)": [[167, "brainpy.integrators.ode.RK4Rule38"]], "__init__() (brainpy.integrators.ode.rk4rule38 method)": [[167, "brainpy.integrators.ode.RK4Rule38.__init__"]], "rkf12 (class in brainpy.integrators.ode)": [[168, "brainpy.integrators.ode.RKF12"]], "__init__() (brainpy.integrators.ode.rkf12 method)": [[168, "brainpy.integrators.ode.RKF12.__init__"]], "rkf45 (class in brainpy.integrators.ode)": [[169, "brainpy.integrators.ode.RKF45"]], "__init__() (brainpy.integrators.ode.rkf45 method)": [[169, "brainpy.integrators.ode.RKF45.__init__"]], "ralston2 (class in brainpy.integrators.ode)": [[170, "brainpy.integrators.ode.Ralston2"]], "__init__() (brainpy.integrators.ode.ralston2 method)": [[170, "brainpy.integrators.ode.Ralston2.__init__"]], "ralston3 (class in brainpy.integrators.ode)": [[171, "brainpy.integrators.ode.Ralston3"]], "__init__() (brainpy.integrators.ode.ralston3 method)": [[171, "brainpy.integrators.ode.Ralston3.__init__"]], "ralston4 (class in brainpy.integrators.ode)": [[172, "brainpy.integrators.ode.Ralston4"]], "__init__() (brainpy.integrators.ode.ralston4 method)": [[172, "brainpy.integrators.ode.Ralston4.__init__"]], "ssprk3 (class in brainpy.integrators.ode)": [[173, "brainpy.integrators.ode.SSPRK3"]], "__init__() (brainpy.integrators.ode.ssprk3 method)": [[173, "brainpy.integrators.ode.SSPRK3.__init__"]], "get_default_odeint() (in module brainpy.integrators.ode)": [[174, "brainpy.integrators.ode.get_default_odeint"]], "get_supported_methods() (in module brainpy.integrators.ode)": [[175, "brainpy.integrators.ode.get_supported_methods"]], "register_ode_integrator() (in module brainpy.integrators.ode)": [[176, "brainpy.integrators.ode.register_ode_integrator"]], "set_default_odeint() (in module brainpy.integrators.ode)": [[177, "brainpy.integrators.ode.set_default_odeint"]], "euler (class in brainpy.integrators.sde)": [[178, "brainpy.integrators.sde.Euler"]], "__init__() (brainpy.integrators.sde.euler method)": [[178, "brainpy.integrators.sde.Euler.__init__"]], "exponentialeuler (class in brainpy.integrators.sde)": [[179, "brainpy.integrators.sde.ExponentialEuler"]], "__init__() (brainpy.integrators.sde.exponentialeuler method)": [[179, "brainpy.integrators.sde.ExponentialEuler.__init__"]], "heun (class in brainpy.integrators.sde)": [[180, "brainpy.integrators.sde.Heun"]], "__init__() (brainpy.integrators.sde.heun method)": [[180, "brainpy.integrators.sde.Heun.__init__"]], "klpl (class in brainpy.integrators.sde)": [[181, "brainpy.integrators.sde.KlPl"]], "__init__() (brainpy.integrators.sde.klpl method)": [[181, "brainpy.integrators.sde.KlPl.__init__"]], "milstein (class in brainpy.integrators.sde)": [[182, "brainpy.integrators.sde.Milstein"]], "__init__() (brainpy.integrators.sde.milstein method)": [[182, "brainpy.integrators.sde.Milstein.__init__"]], "milsteingradfree (class in brainpy.integrators.sde)": [[183, "brainpy.integrators.sde.MilsteinGradFree"]], "__init__() (brainpy.integrators.sde.milsteingradfree method)": [[183, "brainpy.integrators.sde.MilsteinGradFree.__init__"]], "sdeintegrator (class in brainpy.integrators.sde)": [[184, "brainpy.integrators.sde.SDEIntegrator"]], "__init__() (brainpy.integrators.sde.sdeintegrator method)": [[184, "brainpy.integrators.sde.SDEIntegrator.__init__"]], "srk1w1 (class in brainpy.integrators.sde)": [[185, "brainpy.integrators.sde.SRK1W1"]], "__init__() (brainpy.integrators.sde.srk1w1 method)": [[185, "brainpy.integrators.sde.SRK1W1.__init__"]], "srk2w1 (class in brainpy.integrators.sde)": [[186, "brainpy.integrators.sde.SRK2W1"]], "__init__() (brainpy.integrators.sde.srk2w1 method)": [[186, "brainpy.integrators.sde.SRK2W1.__init__"]], "get_default_sdeint() (in module brainpy.integrators.sde)": [[187, "brainpy.integrators.sde.get_default_sdeint"]], "get_supported_methods() (in module brainpy.integrators.sde)": [[188, "brainpy.integrators.sde.get_supported_methods"]], "register_sde_integrator() (in module brainpy.integrators.sde)": [[189, "brainpy.integrators.sde.register_sde_integrator"]], "set_default_sdeint() (in module brainpy.integrators.sde)": [[190, "brainpy.integrators.sde.set_default_sdeint"]], "activation (class in brainpy.layers)": [[191, "brainpy.layers.Activation"]], "__init__() (brainpy.layers.activation method)": [[191, "brainpy.layers.Activation.__init__"]], "adaptiveavgpool1d (class in brainpy.layers)": [[192, "brainpy.layers.AdaptiveAvgPool1d"]], "__init__() (brainpy.layers.adaptiveavgpool1d method)": [[192, "brainpy.layers.AdaptiveAvgPool1d.__init__"]], "adaptiveavgpool2d (class in brainpy.layers)": [[193, "brainpy.layers.AdaptiveAvgPool2d"]], "__init__() (brainpy.layers.adaptiveavgpool2d method)": [[193, "brainpy.layers.AdaptiveAvgPool2d.__init__"]], "adaptiveavgpool3d (class in brainpy.layers)": [[194, "brainpy.layers.AdaptiveAvgPool3d"]], "__init__() (brainpy.layers.adaptiveavgpool3d method)": [[194, "brainpy.layers.AdaptiveAvgPool3d.__init__"]], "adaptivemaxpool1d (class in brainpy.layers)": [[195, "brainpy.layers.AdaptiveMaxPool1d"]], "__init__() (brainpy.layers.adaptivemaxpool1d method)": [[195, "brainpy.layers.AdaptiveMaxPool1d.__init__"]], "adaptivemaxpool2d (class in brainpy.layers)": [[196, "brainpy.layers.AdaptiveMaxPool2d"]], "__init__() (brainpy.layers.adaptivemaxpool2d method)": [[196, "brainpy.layers.AdaptiveMaxPool2d.__init__"]], "adaptivemaxpool3d (class in brainpy.layers)": [[197, "brainpy.layers.AdaptiveMaxPool3d"]], "__init__() (brainpy.layers.adaptivemaxpool3d method)": [[197, "brainpy.layers.AdaptiveMaxPool3d.__init__"]], "avgpool (class in brainpy.layers)": [[198, "brainpy.layers.AvgPool"]], "__init__() (brainpy.layers.avgpool method)": [[198, "brainpy.layers.AvgPool.__init__"]], "avgpool1d (class in brainpy.layers)": [[199, "brainpy.layers.AvgPool1d"]], "__init__() (brainpy.layers.avgpool1d method)": [[199, "brainpy.layers.AvgPool1d.__init__"]], "avgpool2d (class in brainpy.layers)": [[200, "brainpy.layers.AvgPool2d"]], "__init__() (brainpy.layers.avgpool2d method)": [[200, "brainpy.layers.AvgPool2d.__init__"]], "avgpool3d (class in brainpy.layers)": [[201, "brainpy.layers.AvgPool3d"]], "__init__() (brainpy.layers.avgpool3d method)": [[201, "brainpy.layers.AvgPool3d.__init__"]], "batchnorm1d (class in brainpy.layers)": [[202, "brainpy.layers.BatchNorm1d"]], "__init__() (brainpy.layers.batchnorm1d method)": [[202, "brainpy.layers.BatchNorm1d.__init__"]], "batchnorm2d (class in brainpy.layers)": [[203, "brainpy.layers.BatchNorm2d"]], "__init__() (brainpy.layers.batchnorm2d method)": [[203, "brainpy.layers.BatchNorm2d.__init__"]], "batchnorm3d (class in brainpy.layers)": [[204, "brainpy.layers.BatchNorm3d"]], "__init__() (brainpy.layers.batchnorm3d method)": [[204, "brainpy.layers.BatchNorm3d.__init__"]], "conv1d (class in brainpy.layers)": [[205, "brainpy.layers.Conv1d"]], "__init__() (brainpy.layers.conv1d method)": [[205, "brainpy.layers.Conv1d.__init__"]], "conv1dlstmcell (class in brainpy.layers)": [[206, "brainpy.layers.Conv1dLSTMCell"]], "__init__() (brainpy.layers.conv1dlstmcell method)": [[206, "brainpy.layers.Conv1dLSTMCell.__init__"]], "conv2d (class in brainpy.layers)": [[207, "brainpy.layers.Conv2d"]], "__init__() (brainpy.layers.conv2d method)": [[207, "brainpy.layers.Conv2d.__init__"]], "conv2dlstmcell (class in brainpy.layers)": [[208, "brainpy.layers.Conv2dLSTMCell"]], "__init__() (brainpy.layers.conv2dlstmcell method)": [[208, "brainpy.layers.Conv2dLSTMCell.__init__"]], "conv3d (class in brainpy.layers)": [[209, "brainpy.layers.Conv3d"]], "__init__() (brainpy.layers.conv3d method)": [[209, "brainpy.layers.Conv3d.__init__"]], "conv3dlstmcell (class in brainpy.layers)": [[210, "brainpy.layers.Conv3dLSTMCell"]], "__init__() (brainpy.layers.conv3dlstmcell method)": [[210, "brainpy.layers.Conv3dLSTMCell.__init__"]], "convtranspose1d (class in brainpy.layers)": [[211, "brainpy.layers.ConvTranspose1d"]], "__init__() (brainpy.layers.convtranspose1d method)": [[211, "brainpy.layers.ConvTranspose1d.__init__"]], "convtranspose2d (class in brainpy.layers)": [[212, "brainpy.layers.ConvTranspose2d"]], "__init__() (brainpy.layers.convtranspose2d method)": [[212, "brainpy.layers.ConvTranspose2d.__init__"]], "convtranspose3d (class in brainpy.layers)": [[213, "brainpy.layers.ConvTranspose3d"]], "__init__() (brainpy.layers.convtranspose3d method)": [[213, "brainpy.layers.ConvTranspose3d.__init__"]], "dense (class in brainpy.layers)": [[214, "brainpy.layers.Dense"]], "__init__() (brainpy.layers.dense method)": [[214, "brainpy.layers.Dense.__init__"]], "dropout (class in brainpy.layers)": [[215, "brainpy.layers.Dropout"]], "__init__() (brainpy.layers.dropout method)": [[215, "brainpy.layers.Dropout.__init__"]], "flatten (class in brainpy.layers)": [[216, "brainpy.layers.Flatten"]], "__init__() (brainpy.layers.flatten method)": [[216, "brainpy.layers.Flatten.__init__"]], "funaslayer (class in brainpy.layers)": [[217, "brainpy.layers.FunAsLayer"]], "__init__() (brainpy.layers.funaslayer method)": [[217, "brainpy.layers.FunAsLayer.__init__"]], "gru (class in brainpy.layers)": [[218, "brainpy.layers.GRU"]], "__init__() (brainpy.layers.gru method)": [[218, "brainpy.layers.GRU.__init__"]], "grucell (class in brainpy.layers)": [[219, "brainpy.layers.GRUCell"]], "__init__() (brainpy.layers.grucell method)": [[219, "brainpy.layers.GRUCell.__init__"]], "groupnorm (class in brainpy.layers)": [[220, "brainpy.layers.GroupNorm"]], "__init__() (brainpy.layers.groupnorm method)": [[220, "brainpy.layers.GroupNorm.__init__"]], "identity (class in brainpy.layers)": [[221, "brainpy.layers.Identity"]], "__init__() (brainpy.layers.identity method)": [[221, "brainpy.layers.Identity.__init__"]], "instancenorm (class in brainpy.layers)": [[222, "brainpy.layers.InstanceNorm"]], "__init__() (brainpy.layers.instancenorm method)": [[222, "brainpy.layers.InstanceNorm.__init__"]], "lstm (class in brainpy.layers)": [[223, "brainpy.layers.LSTM"]], "__init__() (brainpy.layers.lstm method)": [[223, "brainpy.layers.LSTM.__init__"]], "lstmcell (class in brainpy.layers)": [[224, "brainpy.layers.LSTMCell"]], "__init__() (brainpy.layers.lstmcell method)": [[224, "brainpy.layers.LSTMCell.__init__"]], "layer (class in brainpy.layers)": [[225, "brainpy.layers.Layer"]], "__init__() (brainpy.layers.layer method)": [[225, "brainpy.layers.Layer.__init__"]], "layernorm (class in brainpy.layers)": [[226, "brainpy.layers.LayerNorm"]], "__init__() (brainpy.layers.layernorm method)": [[226, "brainpy.layers.LayerNorm.__init__"]], "linear (in module brainpy.layers)": [[227, "brainpy.layers.Linear"]], "maxpool (class in brainpy.layers)": [[228, "brainpy.layers.MaxPool"]], "__init__() (brainpy.layers.maxpool method)": [[228, "brainpy.layers.MaxPool.__init__"]], "maxpool1d (class in brainpy.layers)": [[229, "brainpy.layers.MaxPool1d"]], "__init__() (brainpy.layers.maxpool1d method)": [[229, "brainpy.layers.MaxPool1d.__init__"]], "maxpool2d (class in brainpy.layers)": [[230, "brainpy.layers.MaxPool2d"]], "__init__() (brainpy.layers.maxpool2d method)": [[230, "brainpy.layers.MaxPool2d.__init__"]], "maxpool3d (class in brainpy.layers)": [[231, "brainpy.layers.MaxPool3d"]], "__init__() (brainpy.layers.maxpool3d method)": [[231, "brainpy.layers.MaxPool3d.__init__"]], "minpool (class in brainpy.layers)": [[232, "brainpy.layers.MinPool"]], "__init__() (brainpy.layers.minpool method)": [[232, "brainpy.layers.MinPool.__init__"]], "nvar (class in brainpy.layers)": [[233, "brainpy.layers.NVAR"]], "__init__() (brainpy.layers.nvar method)": [[233, "brainpy.layers.NVAR.__init__"]], "rnncell (class in brainpy.layers)": [[234, "brainpy.layers.RNNCell"]], "__init__() (brainpy.layers.rnncell method)": [[234, "brainpy.layers.RNNCell.__init__"]], "reservoir (class in brainpy.layers)": [[235, "brainpy.layers.Reservoir"]], "__init__() (brainpy.layers.reservoir method)": [[235, "brainpy.layers.Reservoir.__init__"]], "vanillarnn (class in brainpy.layers)": [[236, "brainpy.layers.VanillaRNN"]], "__init__() (brainpy.layers.vanillarnn method)": [[236, "brainpy.layers.VanillaRNN.__init__"]], "binary_logistic_loss() (in module brainpy.losses)": [[237, "brainpy.losses.binary_logistic_loss"]], "cross_entropy_loss() (in module brainpy.losses)": [[238, "brainpy.losses.cross_entropy_loss"]], "cross_entropy_sigmoid() (in module brainpy.losses)": [[239, "brainpy.losses.cross_entropy_sigmoid"]], "cross_entropy_sparse() (in module brainpy.losses)": [[240, "brainpy.losses.cross_entropy_sparse"]], "ctc_loss() (in module brainpy.losses)": [[241, "brainpy.losses.ctc_loss"]], "ctc_loss_with_forward_probs() (in module brainpy.losses)": [[242, "brainpy.losses.ctc_loss_with_forward_probs"]], "huber_loss() (in module brainpy.losses)": [[243, "brainpy.losses.huber_loss"]], "l1_loos() (in module brainpy.losses)": [[244, "brainpy.losses.l1_loos"]], "l2_loss() (in module brainpy.losses)": [[245, "brainpy.losses.l2_loss"]], "l2_norm() (in module brainpy.losses)": [[246, "brainpy.losses.l2_norm"]], "log_cosh() (in module brainpy.losses)": [[247, "brainpy.losses.log_cosh"]], "log_cosh_loss() (in module brainpy.losses)": [[248, "brainpy.losses.log_cosh_loss"]], "mean_absolute() (in module brainpy.losses)": [[249, "brainpy.losses.mean_absolute"]], "mean_absolute_error() (in module brainpy.losses)": [[250, "brainpy.losses.mean_absolute_error"]], "mean_square() (in module brainpy.losses)": [[251, "brainpy.losses.mean_square"]], "mean_squared_error() (in module brainpy.losses)": [[252, "brainpy.losses.mean_squared_error"]], "mean_squared_log_error() (in module brainpy.losses)": [[253, "brainpy.losses.mean_squared_log_error"]], "multiclass_logistic_loss() (in module brainpy.losses)": [[254, "brainpy.losses.multiclass_logistic_loss"]], "sigmoid_binary_cross_entropy() (in module brainpy.losses)": [[255, "brainpy.losses.sigmoid_binary_cross_entropy"]], "smooth_labels() (in module brainpy.losses)": [[256, "brainpy.losses.smooth_labels"]], "softmax_cross_entropy() (in module brainpy.losses)": [[257, "brainpy.losses.softmax_cross_entropy"]], "batchingmode (class in brainpy.math)": [[258, "brainpy.math.BatchingMode"]], "__init__() (brainpy.math.batchingmode method)": [[258, "brainpy.math.BatchingMode.__init__"]], "brainpyobject (class in brainpy.math)": [[259, "brainpy.math.BrainPyObject"]], "__init__() (brainpy.math.brainpyobject method)": [[259, "brainpy.math.BrainPyObject.__init__"]], "concat_update (in module brainpy.math)": [[260, "brainpy.math.CONCAT_UPDATE"]], "delayvariable (class in brainpy.math)": [[261, "brainpy.math.DelayVariable"]], "__init__() (brainpy.math.delayvariable method)": [[261, "brainpy.math.DelayVariable.__init__"]], "funasobject (class in brainpy.math)": [[262, "brainpy.math.FunAsObject"]], "__init__() (brainpy.math.funasobject method)": [[262, "brainpy.math.FunAsObject.__init__"]], "lengthdelay (class in brainpy.math)": [[263, "brainpy.math.LengthDelay"]], "__init__() (brainpy.math.lengthdelay method)": [[263, "brainpy.math.LengthDelay.__init__"]], "mode (class in brainpy.math)": [[264, "brainpy.math.Mode"]], "__init__() (brainpy.math.mode method)": [[264, "brainpy.math.Mode.__init__"]], "neulendelay (class in brainpy.math)": [[265, "brainpy.math.NeuLenDelay"]], "__init__() (brainpy.math.neulendelay method)": [[265, "brainpy.math.NeuLenDelay.__init__"]], "neutimedelay (class in brainpy.math)": [[266, "brainpy.math.NeuTimeDelay"]], "__init__() (brainpy.math.neutimedelay method)": [[266, "brainpy.math.NeuTimeDelay.__init__"]], "nonbatchingmode (class in brainpy.math)": [[267, "brainpy.math.NonBatchingMode"]], "__init__() (brainpy.math.nonbatchingmode method)": [[267, "brainpy.math.NonBatchingMode.__init__"]], "objecttransform (class in brainpy.math)": [[268, "brainpy.math.ObjectTransform"]], "__init__() (brainpy.math.objecttransform method)": [[268, "brainpy.math.ObjectTransform.__init__"]], "parameter (class in brainpy.math)": [[269, "brainpy.math.Parameter"]], "__init__() (brainpy.math.parameter method)": [[269, "brainpy.math.Parameter.__init__"]], "partial (class in brainpy.math)": [[270, "brainpy.math.Partial"]], "__init__() (brainpy.math.partial method)": [[270, "brainpy.math.Partial.__init__"]], "rotate_update (in module brainpy.math)": [[271, "brainpy.math.ROTATE_UPDATE"]], "tensor (in module brainpy.math)": [[272, "brainpy.math.Tensor"]], "timedelay (class in brainpy.math)": [[273, "brainpy.math.TimeDelay"]], "__init__() (brainpy.math.timedelay method)": [[273, "brainpy.math.TimeDelay.__init__"]], "trainvar (class in brainpy.math)": [[274, "brainpy.math.TrainVar"]], "__init__() (brainpy.math.trainvar method)": [[274, "brainpy.math.TrainVar.__init__"]], "trainingmode (class in brainpy.math)": [[275, "brainpy.math.TrainingMode"]], "__init__() (brainpy.math.trainingmode method)": [[275, "brainpy.math.TrainingMode.__init__"]], "variable (class in brainpy.math)": [[276, "brainpy.math.Variable"]], "__init__() (brainpy.math.variable method)": [[276, "brainpy.math.Variable.__init__"]], "xlacustomop (class in brainpy.math)": [[277, "brainpy.math.XLACustomOp"]], "__init__() (brainpy.math.xlacustomop method)": [[277, "brainpy.math.XLACustomOp.__init__"]], "abs() (in module brainpy.math)": [[278, "brainpy.math.abs"]], "absolute() (in module brainpy.math)": [[279, "brainpy.math.absolute"]], "acos() (in module brainpy.math)": [[280, "brainpy.math.acos"]], "acosh() (in module brainpy.math)": [[281, "brainpy.math.acosh"]], "add() (in module brainpy.math)": [[282, "brainpy.math.add"]], "add_docstring() (in module brainpy.math)": [[283, "brainpy.math.add_docstring"]], "add_newdoc() (in module brainpy.math)": [[284, "brainpy.math.add_newdoc"]], "add_newdoc_ufunc() (in module brainpy.math)": [[285, "brainpy.math.add_newdoc_ufunc"]], "addcdiv() (in module brainpy.math)": [[286, "brainpy.math.addcdiv"]], "addcmul() (in module brainpy.math)": [[287, "brainpy.math.addcmul"]], "all() (in module brainpy.math)": [[288, "brainpy.math.all"]], "allclose() (in module brainpy.math)": [[289, "brainpy.math.allclose"]], "alltrue() (in module brainpy.math)": [[290, "brainpy.math.alltrue"]], "amax() (in module brainpy.math)": [[291, "brainpy.math.amax"]], "amin() (in module brainpy.math)": [[292, "brainpy.math.amin"]], "angle() (in module brainpy.math)": [[293, "brainpy.math.angle"]], "any() (in module brainpy.math)": [[294, "brainpy.math.any"]], "append() (in module brainpy.math)": [[295, "brainpy.math.append"]], "apply_along_axis() (in module brainpy.math)": [[296, "brainpy.math.apply_along_axis"]], "apply_over_axes() (in module brainpy.math)": [[297, "brainpy.math.apply_over_axes"]], "arange() (in module brainpy.math)": [[298, "brainpy.math.arange"]], "arccos() (in module brainpy.math)": [[299, "brainpy.math.arccos"]], "arccosh() (in module brainpy.math)": [[300, "brainpy.math.arccosh"]], "arcsin() (in module brainpy.math)": [[301, "brainpy.math.arcsin"]], "arcsinh() (in module brainpy.math)": [[302, "brainpy.math.arcsinh"]], "arctan() (in module brainpy.math)": [[303, "brainpy.math.arctan"]], "arctan2() (in module brainpy.math)": [[304, "brainpy.math.arctan2"]], "arctanh() (in module brainpy.math)": [[305, "brainpy.math.arctanh"]], "argmax() (in module brainpy.math)": [[306, "brainpy.math.argmax"]], "argmin() (in module brainpy.math)": [[307, "brainpy.math.argmin"]], "argsort() (in module brainpy.math)": [[308, "brainpy.math.argsort"]], "argwhere() (in module brainpy.math)": [[309, "brainpy.math.argwhere"]], "around() (in module brainpy.math)": [[310, "brainpy.math.around"]], "array() (in module brainpy.math)": [[311, "brainpy.math.array"]], "array2string() (in module brainpy.math)": [[312, "brainpy.math.array2string"]], "array_equal() (in module brainpy.math)": [[313, "brainpy.math.array_equal"]], "array_equiv() (in module brainpy.math)": [[314, "brainpy.math.array_equiv"]], "array_repr() (in module brainpy.math)": [[315, "brainpy.math.array_repr"]], "array_split() (in module brainpy.math)": [[316, "brainpy.math.array_split"]], "array_str() (in module brainpy.math)": [[317, "brainpy.math.array_str"]], "as_device_array() (in module brainpy.math)": [[318, "brainpy.math.as_device_array"]], "as_jax() (in module brainpy.math)": [[319, "brainpy.math.as_jax"]], "as_ndarray() (in module brainpy.math)": [[320, "brainpy.math.as_ndarray"]], "as_numpy() (in module brainpy.math)": [[321, "brainpy.math.as_numpy"]], "as_variable() (in module brainpy.math)": [[322, "brainpy.math.as_variable"]], "asanyarray() (in module brainpy.math)": [[323, "brainpy.math.asanyarray"]], "asarray() (in module brainpy.math)": [[324, "brainpy.math.asarray"]], "ascontiguousarray() (in module brainpy.math)": [[325, "brainpy.math.ascontiguousarray"]], "asfarray() (in module brainpy.math)": [[326, "brainpy.math.asfarray"]], "asin() (in module brainpy.math)": [[327, "brainpy.math.asin"]], "asinh() (in module brainpy.math)": [[328, "brainpy.math.asinh"]], "asmatrix() (in module brainpy.math)": [[329, "brainpy.math.asmatrix"]], "asscalar() (in module brainpy.math)": [[330, "brainpy.math.asscalar"]], "atan() (in module brainpy.math)": [[331, "brainpy.math.atan"]], "atan2() (in module brainpy.math)": [[332, "brainpy.math.atan2"]], "atanh() (in module brainpy.math)": [[333, "brainpy.math.atanh"]], "atleast_1d() (in module brainpy.math)": [[334, "brainpy.math.atleast_1d"]], "atleast_2d() (in module brainpy.math)": [[335, "brainpy.math.atleast_2d"]], "atleast_3d() (in module brainpy.math)": [[336, "brainpy.math.atleast_3d"]], "average() (in module brainpy.math)": [[337, "brainpy.math.average"]], "bartlett() (in module brainpy.math)": [[338, "brainpy.math.bartlett"]], "__init__() (brainpy.math.batching_environment method)": [[339, "brainpy.math.batching_environment.__init__"]], "batching_environment (class in brainpy.math)": [[339, "brainpy.math.batching_environment"]], "batching_mode (in module brainpy.math)": [[340, "brainpy.math.batching_mode"]], "bincount() (in module brainpy.math)": [[341, "brainpy.math.bincount"]], "bitwise_and() (in module brainpy.math)": [[342, "brainpy.math.bitwise_and"]], "bitwise_not() (in module brainpy.math)": [[343, "brainpy.math.bitwise_not"]], "bitwise_or() (in module brainpy.math)": [[344, "brainpy.math.bitwise_or"]], "bitwise_xor() (in module brainpy.math)": [[345, "brainpy.math.bitwise_xor"]], "blackman() (in module brainpy.math)": [[346, "brainpy.math.blackman"]], "block() (in module brainpy.math)": [[347, "brainpy.math.block"]], "broadcast_arrays() (in module brainpy.math)": [[348, "brainpy.math.broadcast_arrays"]], "broadcast_shapes() (in module brainpy.math)": [[349, "brainpy.math.broadcast_shapes"]], "broadcast_to() (in module brainpy.math)": [[350, "brainpy.math.broadcast_to"]], "can_cast() (in module brainpy.math)": [[351, "brainpy.math.can_cast"]], "cast() (in module brainpy.math)": [[352, "brainpy.math.cast"]], "cat() (in module brainpy.math)": [[353, "brainpy.math.cat"]], "cbrt() (in module brainpy.math)": [[354, "brainpy.math.cbrt"]], "ceil() (in module brainpy.math)": [[355, "brainpy.math.ceil"]], "celu() (in module brainpy.math)": [[356, "brainpy.math.celu"]], "choose() (in module brainpy.math)": [[357, "brainpy.math.choose"]], "clear_buffer_memory() (in module brainpy.math)": [[358, "brainpy.math.clear_buffer_memory"]], "clip() (in module brainpy.math)": [[359, "brainpy.math.clip"]], "clip_by_value() (in module brainpy.math)": [[360, "brainpy.math.clip_by_value"]], "column_stack() (in module brainpy.math)": [[361, "brainpy.math.column_stack"]], "common_type() (in module brainpy.math)": [[362, "brainpy.math.common_type"]], "compress() (in module brainpy.math)": [[363, "brainpy.math.compress"]], "concat() (in module brainpy.math)": [[364, "brainpy.math.concat"]], "concatenate() (in module brainpy.math)": [[365, "brainpy.math.concatenate"]], "cond() (in module brainpy.math)": [[366, "brainpy.math.cond"]], "conj() (in module brainpy.math)": [[367, "brainpy.math.conj"]], "conjugate() (in module brainpy.math)": [[368, "brainpy.math.conjugate"]], "convolve() (in module brainpy.math)": [[369, "brainpy.math.convolve"]], "copy() (in module brainpy.math)": [[370, "brainpy.math.copy"]], "copysign() (in module brainpy.math)": [[371, "brainpy.math.copysign"]], "copyto() (in module brainpy.math)": [[372, "brainpy.math.copyto"]], "corrcoef() (in module brainpy.math)": [[373, "brainpy.math.corrcoef"]], "correlate() (in module brainpy.math)": [[374, "brainpy.math.correlate"]], "cos() (in module brainpy.math)": [[375, "brainpy.math.cos"]], "cosh() (in module brainpy.math)": [[376, "brainpy.math.cosh"]], "count_nonzero() (in module brainpy.math)": [[377, "brainpy.math.count_nonzero"]], "cov() (in module brainpy.math)": [[378, "brainpy.math.cov"]], "cross() (in module brainpy.math)": [[379, "brainpy.math.cross"]], "csr_matvec() (in module brainpy.math)": [[380, "brainpy.math.csr_matvec"]], "cumprod() (in module brainpy.math)": [[381, "brainpy.math.cumprod"]], "cumproduct() (in module brainpy.math)": [[382, "brainpy.math.cumproduct"]], "cumsum() (in module brainpy.math)": [[383, "brainpy.math.cumsum"]], "deg2rad() (in module brainpy.math)": [[384, "brainpy.math.deg2rad"]], "degrees() (in module brainpy.math)": [[385, "brainpy.math.degrees"]], "delete() (in module brainpy.math)": [[386, "brainpy.math.delete"]], "dftype() (in module brainpy.math)": [[387, "brainpy.math.dftype"]], "diag() (in module brainpy.math)": [[388, "brainpy.math.diag"]], "diag_indices() (in module brainpy.math)": [[389, "brainpy.math.diag_indices"]], "diag_indices_from() (in module brainpy.math)": [[390, "brainpy.math.diag_indices_from"]], "diagflat() (in module brainpy.math)": [[391, "brainpy.math.diagflat"]], "diagonal() (in module brainpy.math)": [[392, "brainpy.math.diagonal"]], "diff() (in module brainpy.math)": [[393, "brainpy.math.diff"]], "digitize() (in module brainpy.math)": [[394, "brainpy.math.digitize"]], "disable_gpu_memory_preallocation() (in module brainpy.math)": [[395, "brainpy.math.disable_gpu_memory_preallocation"]], "disable_x64() (in module brainpy.math)": [[396, "brainpy.math.disable_x64"]], "disp() (in module brainpy.math)": [[397, "brainpy.math.disp"]], "ditype() (in module brainpy.math)": [[398, "brainpy.math.ditype"]], "divide() (in module brainpy.math)": [[399, "brainpy.math.divide"]], "divmod() (in module brainpy.math)": [[400, "brainpy.math.divmod"]], "dot() (in module brainpy.math)": [[401, "brainpy.math.dot"]], "dsplit() (in module brainpy.math)": [[402, "brainpy.math.dsplit"]], "dstack() (in module brainpy.math)": [[403, "brainpy.math.dstack"]], "__init__() (brainpy.math.dtype method)": [[404, "brainpy.math.dtype.__init__"]], "dtype (class in brainpy.math)": [[404, "brainpy.math.dtype"]], "__init__() (brainpy.math.dyn_dict method)": [[405, "brainpy.math.dyn_dict.__init__"]], "dyn_dict (class in brainpy.math)": [[405, "brainpy.math.dyn_dict"]], "__init__() (brainpy.math.dyn_seq method)": [[406, "brainpy.math.dyn_seq.__init__"]], "dyn_seq (class in brainpy.math)": [[406, "brainpy.math.dyn_seq"]], "e (in module brainpy.math)": [[407, "brainpy.math.e"]], "ediff1d() (in module brainpy.math)": [[408, "brainpy.math.ediff1d"]], "einsum() (in module brainpy.math)": [[409, "brainpy.math.einsum"]], "einsum_path() (in module brainpy.math)": [[410, "brainpy.math.einsum_path"]], "elu() (in module brainpy.math)": [[411, "brainpy.math.elu"]], "empty() (in module brainpy.math)": [[412, "brainpy.math.empty"]], "empty_like() (in module brainpy.math)": [[413, "brainpy.math.empty_like"]], "enable_gpu_memory_preallocation() (in module brainpy.math)": [[414, "brainpy.math.enable_gpu_memory_preallocation"]], "enable_x64() (in module brainpy.math)": [[415, "brainpy.math.enable_x64"]], "__init__() (brainpy.math.environment method)": [[416, "brainpy.math.environment.__init__"]], "environment (class in brainpy.math)": [[416, "brainpy.math.environment"]], "equal() (in module brainpy.math)": [[417, "brainpy.math.equal"]], "event_csr_matvec() (in module brainpy.math)": [[418, "brainpy.math.event_csr_matvec"]], "exp() (in module brainpy.math)": [[419, "brainpy.math.exp"]], "exp2() (in module brainpy.math)": [[420, "brainpy.math.exp2"]], "expand_dims() (in module brainpy.math)": [[421, "brainpy.math.expand_dims"]], "expm1() (in module brainpy.math)": [[422, "brainpy.math.expm1"]], "extract() (in module brainpy.math)": [[423, "brainpy.math.extract"]], "eye() (in module brainpy.math)": [[424, "brainpy.math.eye"]], "fabs() (in module brainpy.math)": [[425, "brainpy.math.fabs"]], "fft() (in module brainpy.math.fft)": [[426, "brainpy.math.fft.fft"]], "fft2() (in module brainpy.math.fft)": [[427, "brainpy.math.fft.fft2"]], "fftfreq() (in module brainpy.math.fft)": [[428, "brainpy.math.fft.fftfreq"]], "fftn() (in module brainpy.math.fft)": [[429, "brainpy.math.fft.fftn"]], "fftshift() (in module brainpy.math.fft)": [[430, "brainpy.math.fft.fftshift"]], "hfft() (in module brainpy.math.fft)": [[431, "brainpy.math.fft.hfft"]], "ifft() (in module brainpy.math.fft)": [[432, "brainpy.math.fft.ifft"]], "ifft2() (in module brainpy.math.fft)": [[433, "brainpy.math.fft.ifft2"]], "ifftn() (in module brainpy.math.fft)": [[434, "brainpy.math.fft.ifftn"]], "ifftshift() (in module brainpy.math.fft)": [[435, "brainpy.math.fft.ifftshift"]], "ihfft() (in module brainpy.math.fft)": [[436, "brainpy.math.fft.ihfft"]], "irfft() (in module brainpy.math.fft)": [[437, "brainpy.math.fft.irfft"]], "irfft2() (in module brainpy.math.fft)": [[438, "brainpy.math.fft.irfft2"]], "irfftn() (in module brainpy.math.fft)": [[439, "brainpy.math.fft.irfftn"]], "rfft() (in module brainpy.math.fft)": [[440, "brainpy.math.fft.rfft"]], "rfft2() (in module brainpy.math.fft)": [[441, "brainpy.math.fft.rfft2"]], "rfftfreq() (in module brainpy.math.fft)": [[442, "brainpy.math.fft.rfftfreq"]], "rfftn() (in module brainpy.math.fft)": [[443, "brainpy.math.fft.rfftn"]], "fill_diagonal() (in module brainpy.math)": [[444, "brainpy.math.fill_diagonal"]], "__init__() (brainpy.math.finfo method)": [[445, "brainpy.math.finfo.__init__"]], "bits (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.bits"]], "eps (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.eps"]], "epsneg (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.epsneg"]], "finfo (class in brainpy.math)": [[445, "brainpy.math.finfo"]], "iexp (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.iexp"]], "machar (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.machar"]], "machep (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.machep"]], "max (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.max"]], "maxexp (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.maxexp"]], "min (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.min"]], "minexp (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.minexp"]], "negep (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.negep"]], "nexp (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.nexp"]], "nmant (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.nmant"]], "precision (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.precision"]], "resolution (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.resolution"]], "smallest_normal (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.smallest_normal"]], "smallest_subnormal (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.smallest_subnormal"]], "tiny (brainpy.math.finfo attribute)": [[445, "brainpy.math.finfo.tiny"]], "fix() (in module brainpy.math)": [[446, "brainpy.math.fix"]], "flatnonzero() (in module brainpy.math)": [[447, "brainpy.math.flatnonzero"]], "flatten() (in module brainpy.math)": [[448, "brainpy.math.flatten"]], "flip() (in module brainpy.math)": [[449, "brainpy.math.flip"]], "fliplr() (in module brainpy.math)": [[450, "brainpy.math.fliplr"]], "flipud() (in module brainpy.math)": [[451, "brainpy.math.flipud"]], "float_power() (in module brainpy.math)": [[452, "brainpy.math.float_power"]], "floor() (in module brainpy.math)": [[453, "brainpy.math.floor"]], "floor_divide() (in module brainpy.math)": [[454, "brainpy.math.floor_divide"]], "fmax() (in module brainpy.math)": [[455, "brainpy.math.fmax"]], "fmin() (in module brainpy.math)": [[456, "brainpy.math.fmin"]], "fmod() (in module brainpy.math)": [[457, "brainpy.math.fmod"]], "for_loop() (in module brainpy.math)": [[458, "brainpy.math.for_loop"]], "frexp() (in module brainpy.math)": [[459, "brainpy.math.frexp"]], "frombuffer() (in module brainpy.math)": [[460, "brainpy.math.frombuffer"]], "fromfile() (in module brainpy.math)": [[461, "brainpy.math.fromfile"]], "fromfunction() (in module brainpy.math)": [[462, "brainpy.math.fromfunction"]], "fromiter() (in module brainpy.math)": [[463, "brainpy.math.fromiter"]], "fromstring() (in module brainpy.math)": [[464, "brainpy.math.fromstring"]], "full() (in module brainpy.math)": [[465, "brainpy.math.full"]], "full_like() (in module brainpy.math)": [[466, "brainpy.math.full_like"]], "function() (in module brainpy.math)": [[467, "brainpy.math.function"]], "gcd() (in module brainpy.math)": [[468, "brainpy.math.gcd"]], "gelu() (in module brainpy.math)": [[469, "brainpy.math.gelu"]], "genfromtxt() (in module brainpy.math)": [[470, "brainpy.math.genfromtxt"]], "geomspace() (in module brainpy.math)": [[471, "brainpy.math.geomspace"]], "get_bool() (in module brainpy.math)": [[472, "brainpy.math.get_bool"]], "get_complex() (in module brainpy.math)": [[473, "brainpy.math.get_complex"]], "get_dt() (in module brainpy.math)": [[474, "brainpy.math.get_dt"]], "get_float() (in module brainpy.math)": [[475, "brainpy.math.get_float"]], "get_int() (in module brainpy.math)": [[476, "brainpy.math.get_int"]], "get_mode() (in module brainpy.math)": [[477, "brainpy.math.get_mode"]], "get_platform() (in module brainpy.math)": [[478, "brainpy.math.get_platform"]], "get_printoptions() (in module brainpy.math)": [[479, "brainpy.math.get_printoptions"]], "glu() (in module brainpy.math)": [[480, "brainpy.math.glu"]], "grad() (in module brainpy.math)": [[481, "brainpy.math.grad"]], "gradient() (in module brainpy.math)": [[482, "brainpy.math.gradient"]], "greater() (in module brainpy.math)": [[483, "brainpy.math.greater"]], "greater_equal() (in module brainpy.math)": [[484, "brainpy.math.greater_equal"]], "hamming() (in module brainpy.math)": [[485, "brainpy.math.hamming"]], "hanning() (in module brainpy.math)": [[486, "brainpy.math.hanning"]], "hard_sigmoid() (in module brainpy.math)": [[487, "brainpy.math.hard_sigmoid"]], "hard_silu() (in module brainpy.math)": [[488, "brainpy.math.hard_silu"]], "hard_swish() (in module brainpy.math)": [[489, "brainpy.math.hard_swish"]], "hard_tanh() (in module brainpy.math)": [[490, "brainpy.math.hard_tanh"]], "heaviside() (in module brainpy.math)": [[491, "brainpy.math.heaviside"]], "hessian() (in module brainpy.math)": [[492, "brainpy.math.hessian"]], "histogram() (in module brainpy.math)": [[493, "brainpy.math.histogram"]], "histogram2d() (in module brainpy.math)": [[494, "brainpy.math.histogram2d"]], "histogram_bin_edges() (in module brainpy.math)": [[495, "brainpy.math.histogram_bin_edges"]], "histogramdd() (in module brainpy.math)": [[496, "brainpy.math.histogramdd"]], "hsplit() (in module brainpy.math)": [[497, "brainpy.math.hsplit"]], "hstack() (in module brainpy.math)": [[498, "brainpy.math.hstack"]], "hypot() (in module brainpy.math)": [[499, "brainpy.math.hypot"]], "i0() (in module brainpy.math)": [[500, "brainpy.math.i0"]], "identity() (in module brainpy.math)": [[501, "brainpy.math.identity"]], "ifelse() (in module brainpy.math)": [[502, "brainpy.math.ifelse"]], "__init__() (brainpy.math.iinfo method)": [[503, "brainpy.math.iinfo.__init__"]], "bits (brainpy.math.iinfo attribute)": [[503, "brainpy.math.iinfo.bits"]], "iinfo (class in brainpy.math)": [[503, "brainpy.math.iinfo"]], "max (brainpy.math.iinfo attribute)": [[503, "brainpy.math.iinfo.max"]], "min (brainpy.math.iinfo attribute)": [[503, "brainpy.math.iinfo.min"]], "imag() (in module brainpy.math)": [[504, "brainpy.math.imag"]], "in1d() (in module brainpy.math)": [[505, "brainpy.math.in1d"]], "indices() (in module brainpy.math)": [[506, "brainpy.math.indices"]], "inf (in module brainpy.math)": [[507, "brainpy.math.inf"]], "info() (in module brainpy.math)": [[508, "brainpy.math.info"]], "inner() (in module brainpy.math)": [[509, "brainpy.math.inner"]], "insert() (in module brainpy.math)": [[510, "brainpy.math.insert"]], "interp() (in module brainpy.math)": [[511, "brainpy.math.interp"]], "intersect1d() (in module brainpy.math)": [[512, "brainpy.math.intersect1d"]], "invert() (in module brainpy.math)": [[513, "brainpy.math.invert"]], "isclose() (in module brainpy.math)": [[514, "brainpy.math.isclose"]], "iscomplex() (in module brainpy.math)": [[515, "brainpy.math.iscomplex"]], "iscomplexobj() (in module brainpy.math)": [[516, "brainpy.math.iscomplexobj"]], "isfinite() (in module brainpy.math)": [[517, "brainpy.math.isfinite"]], "isin() (in module brainpy.math)": [[518, "brainpy.math.isin"]], "isinf() (in module brainpy.math)": [[519, "brainpy.math.isinf"]], "isnan() (in module brainpy.math)": [[520, "brainpy.math.isnan"]], "isneginf() (in module brainpy.math)": [[521, "brainpy.math.isneginf"]], "isposinf() (in module brainpy.math)": [[522, "brainpy.math.isposinf"]], "isreal() (in module brainpy.math)": [[523, "brainpy.math.isreal"]], "isrealobj() (in module brainpy.math)": [[524, "brainpy.math.isrealobj"]], "isscalar() (in module brainpy.math)": [[525, "brainpy.math.isscalar"]], "issubclass_() (in module brainpy.math)": [[526, "brainpy.math.issubclass_"]], "issubdtype() (in module brainpy.math)": [[527, "brainpy.math.issubdtype"]], "issubsctype() (in module brainpy.math)": [[528, "brainpy.math.issubsctype"]], "iterable() (in module brainpy.math)": [[529, "brainpy.math.iterable"]], "ix_() (in module brainpy.math)": [[530, "brainpy.math.ix_"]], "jacfwd() (in module brainpy.math)": [[531, "brainpy.math.jacfwd"]], "jacobian() (in module brainpy.math)": [[532, "brainpy.math.jacobian"]], "jacrev() (in module brainpy.math)": [[533, "brainpy.math.jacrev"]], "jit() (in module brainpy.math)": [[534, "brainpy.math.jit"]], "kaiser() (in module brainpy.math)": [[535, "brainpy.math.kaiser"]], "kron() (in module brainpy.math)": [[536, "brainpy.math.kron"]], "lcm() (in module brainpy.math)": [[537, "brainpy.math.lcm"]], "ldexp() (in module brainpy.math)": [[538, "brainpy.math.ldexp"]], "leaky_relu() (in module brainpy.math)": [[539, "brainpy.math.leaky_relu"]], "left_shift() (in module brainpy.math)": [[540, "brainpy.math.left_shift"]], "less() (in module brainpy.math)": [[541, "brainpy.math.less"]], "less_equal() (in module brainpy.math)": [[542, "brainpy.math.less_equal"]], "lexsort() (in module brainpy.math)": [[543, "brainpy.math.lexsort"]], "cholesky() (in module brainpy.math.linalg)": [[544, "brainpy.math.linalg.cholesky"]], "cond() (in module brainpy.math.linalg)": [[545, "brainpy.math.linalg.cond"]], "det (in module brainpy.math.linalg)": [[546, "brainpy.math.linalg.det"]], "eig() (in module brainpy.math.linalg)": [[547, "brainpy.math.linalg.eig"]], "eigh() (in module brainpy.math.linalg)": [[548, "brainpy.math.linalg.eigh"]], "eigvals() (in module brainpy.math.linalg)": [[549, "brainpy.math.linalg.eigvals"]], "eigvalsh() (in module brainpy.math.linalg)": [[550, "brainpy.math.linalg.eigvalsh"]], "inv() (in module brainpy.math.linalg)": [[551, "brainpy.math.linalg.inv"]], "lstsq() (in module brainpy.math.linalg)": [[552, "brainpy.math.linalg.lstsq"]], "matrix_power() (in module brainpy.math.linalg)": [[553, "brainpy.math.linalg.matrix_power"]], "matrix_rank() (in module brainpy.math.linalg)": [[554, "brainpy.math.linalg.matrix_rank"]], "multi_dot() (in module brainpy.math.linalg)": [[555, "brainpy.math.linalg.multi_dot"]], "norm() (in module brainpy.math.linalg)": [[556, "brainpy.math.linalg.norm"]], "pinv (in module brainpy.math.linalg)": [[557, "brainpy.math.linalg.pinv"]], "qr() (in module brainpy.math.linalg)": [[558, "brainpy.math.linalg.qr"]], "slogdet() (in module brainpy.math.linalg)": [[559, "brainpy.math.linalg.slogdet"]], "solve() (in module brainpy.math.linalg)": [[560, "brainpy.math.linalg.solve"]], "svd() (in module brainpy.math.linalg)": [[561, "brainpy.math.linalg.svd"]], "tensorinv() (in module brainpy.math.linalg)": [[562, "brainpy.math.linalg.tensorinv"]], "tensorsolve() (in module brainpy.math.linalg)": [[563, "brainpy.math.linalg.tensorsolve"]], "linspace() (in module brainpy.math)": [[564, "brainpy.math.linspace"]], "load() (in module brainpy.math)": [[565, "brainpy.math.load"]], "loadtxt() (in module brainpy.math)": [[566, "brainpy.math.loadtxt"]], "log() (in module brainpy.math)": [[567, "brainpy.math.log"]], "log10() (in module brainpy.math)": [[568, "brainpy.math.log10"]], "log1p() (in module brainpy.math)": [[569, "brainpy.math.log1p"]], "log2() (in module brainpy.math)": [[570, "brainpy.math.log2"]], "log_sigmoid() (in module brainpy.math)": [[571, "brainpy.math.log_sigmoid"]], "log_softmax() (in module brainpy.math)": [[572, "brainpy.math.log_softmax"]], "logaddexp (in module brainpy.math)": [[573, "brainpy.math.logaddexp"]], "logaddexp2 (in module brainpy.math)": [[574, "brainpy.math.logaddexp2"]], "logical_and() (in module brainpy.math)": [[575, "brainpy.math.logical_and"]], "logical_not() (in module brainpy.math)": [[576, "brainpy.math.logical_not"]], "logical_or() (in module brainpy.math)": [[577, "brainpy.math.logical_or"]], "logical_xor() (in module brainpy.math)": [[578, "brainpy.math.logical_xor"]], "logspace() (in module brainpy.math)": [[579, "brainpy.math.logspace"]], "make_cond() (in module brainpy.math)": [[580, "brainpy.math.make_cond"]], "make_loop() (in module brainpy.math)": [[581, "brainpy.math.make_loop"]], "make_while() (in module brainpy.math)": [[582, "brainpy.math.make_while"]], "mask_indices() (in module brainpy.math)": [[583, "brainpy.math.mask_indices"]], "mat() (in module brainpy.math)": [[584, "brainpy.math.mat"]], "matmul() (in module brainpy.math)": [[585, "brainpy.math.matmul"]], "matrix() (in module brainpy.math)": [[586, "brainpy.math.matrix"]], "max() (in module brainpy.math)": [[587, "brainpy.math.max"]], "maximum() (in module brainpy.math)": [[588, "brainpy.math.maximum"]], "mean() (in module brainpy.math)": [[589, "brainpy.math.mean"]], "median() (in module brainpy.math)": [[590, "brainpy.math.median"]], "meshgrid() (in module brainpy.math)": [[591, "brainpy.math.meshgrid"]], "min() (in module brainpy.math)": [[592, "brainpy.math.min"]], "minimum() (in module brainpy.math)": [[593, "brainpy.math.minimum"]], "mod() (in module brainpy.math)": [[594, "brainpy.math.mod"]], "modf() (in module brainpy.math)": [[595, "brainpy.math.modf"]], "moveaxis() (in module brainpy.math)": [[596, "brainpy.math.moveaxis"]], "msort() (in module brainpy.math)": [[597, "brainpy.math.msort"]], "multiply() (in module brainpy.math)": [[598, "brainpy.math.multiply"]], "nan_to_num() (in module brainpy.math)": [[599, "brainpy.math.nan_to_num"]], "nanargmax() (in module brainpy.math)": [[600, "brainpy.math.nanargmax"]], "nanargmin() (in module brainpy.math)": [[601, "brainpy.math.nanargmin"]], "nancumprod() (in module brainpy.math)": [[602, "brainpy.math.nancumprod"]], "nancumsum() (in module brainpy.math)": [[603, "brainpy.math.nancumsum"]], "nanmax() (in module brainpy.math)": [[604, "brainpy.math.nanmax"]], "nanmean() (in module brainpy.math)": [[605, "brainpy.math.nanmean"]], "nanmedian() (in module brainpy.math)": [[606, "brainpy.math.nanmedian"]], "nanmin() (in module brainpy.math)": [[607, "brainpy.math.nanmin"]], "nanpercentile() (in module brainpy.math)": [[608, "brainpy.math.nanpercentile"]], "nanprod() (in module brainpy.math)": [[609, "brainpy.math.nanprod"]], "nanquantile() (in module brainpy.math)": [[610, "brainpy.math.nanquantile"]], "nanstd() (in module brainpy.math)": [[611, "brainpy.math.nanstd"]], "nansum() (in module brainpy.math)": [[612, "brainpy.math.nansum"]], "nanvar() (in module brainpy.math)": [[613, "brainpy.math.nanvar"]], "ndim() (in module brainpy.math)": [[614, "brainpy.math.ndim"]], "negative() (in module brainpy.math)": [[615, "brainpy.math.negative"]], "nextafter() (in module brainpy.math)": [[616, "brainpy.math.nextafter"]], "nonbatching_mode (in module brainpy.math)": [[617, "brainpy.math.nonbatching_mode"]], "nonzero() (in module brainpy.math)": [[618, "brainpy.math.nonzero"]], "normalize() (in module brainpy.math)": [[619, "brainpy.math.normalize"]], "not_equal() (in module brainpy.math)": [[620, "brainpy.math.not_equal"]], "one_hot() (in module brainpy.math)": [[621, "brainpy.math.one_hot"]], "ones() (in module brainpy.math)": [[622, "brainpy.math.ones"]], "ones_like() (in module brainpy.math)": [[623, "brainpy.math.ones_like"]], "outer() (in module brainpy.math)": [[624, "brainpy.math.outer"]], "packbits() (in module brainpy.math)": [[625, "brainpy.math.packbits"]], "pad() (in module brainpy.math)": [[626, "brainpy.math.pad"]], "percentile() (in module brainpy.math)": [[627, "brainpy.math.percentile"]], "pi (in module brainpy.math)": [[628, "brainpy.math.pi"]], "piecewise() (in module brainpy.math)": [[629, "brainpy.math.piecewise"]], "place() (in module brainpy.math)": [[630, "brainpy.math.place"]], "poly() (in module brainpy.math)": [[631, "brainpy.math.poly"]], "polyadd() (in module brainpy.math)": [[632, "brainpy.math.polyadd"]], "polyder() (in module brainpy.math)": [[633, "brainpy.math.polyder"]], "polydiv() (in module brainpy.math)": [[634, "brainpy.math.polydiv"]], "polyfit() (in module brainpy.math)": [[635, "brainpy.math.polyfit"]], "polyint() (in module brainpy.math)": [[636, "brainpy.math.polyint"]], "polymul() (in module brainpy.math)": [[637, "brainpy.math.polymul"]], "polysub() (in module brainpy.math)": [[638, "brainpy.math.polysub"]], "polyval() (in module brainpy.math)": [[639, "brainpy.math.polyval"]], "positive() (in module brainpy.math)": [[640, "brainpy.math.positive"]], "power() (in module brainpy.math)": [[641, "brainpy.math.power"]], "pre2post_coo_event_sum() (in module brainpy.math)": [[642, "brainpy.math.pre2post_coo_event_sum"]], "pre2post_event_prod() (in module brainpy.math)": [[643, "brainpy.math.pre2post_event_prod"]], "pre2post_event_sum() (in module brainpy.math)": [[644, "brainpy.math.pre2post_event_sum"]], "pre2post_max() (in module brainpy.math)": [[645, "brainpy.math.pre2post_max"]], "pre2post_mean() (in module brainpy.math)": [[646, "brainpy.math.pre2post_mean"]], "pre2post_min() (in module brainpy.math)": [[647, "brainpy.math.pre2post_min"]], "pre2post_prod() (in module brainpy.math)": [[648, "brainpy.math.pre2post_prod"]], "pre2post_sum() (in module brainpy.math)": [[649, "brainpy.math.pre2post_sum"]], "pre2syn() (in module brainpy.math)": [[650, "brainpy.math.pre2syn"]], "printoptions() (in module brainpy.math)": [[651, "brainpy.math.printoptions"]], "prod() (in module brainpy.math)": [[652, "brainpy.math.prod"]], "product() (in module brainpy.math)": [[653, "brainpy.math.product"]], "promote_types() (in module brainpy.math)": [[654, "brainpy.math.promote_types"]], "ptp() (in module brainpy.math)": [[655, "brainpy.math.ptp"]], "put() (in module brainpy.math)": [[656, "brainpy.math.put"]], "putmask() (in module brainpy.math)": [[657, "brainpy.math.putmask"]], "quantile() (in module brainpy.math)": [[658, "brainpy.math.quantile"]], "rad2deg() (in module brainpy.math)": [[659, "brainpy.math.rad2deg"]], "radians() (in module brainpy.math)": [[660, "brainpy.math.radians"]], "default (in module brainpy.math.random)": [[661, "brainpy.math.random.DEFAULT"]], "generator (in module brainpy.math.random)": [[662, "brainpy.math.random.Generator"]], "randomstate (class in brainpy.math.random)": [[663, "brainpy.math.random.RandomState"]], "__init__() (brainpy.math.random.randomstate method)": [[663, "brainpy.math.random.RandomState.__init__"]], "bernoulli() (in module brainpy.math.random)": [[664, "brainpy.math.random.bernoulli"]], "beta() (in module brainpy.math.random)": [[665, "brainpy.math.random.beta"]], "binomial() (in module brainpy.math.random)": [[666, "brainpy.math.random.binomial"]], "categorical() (in module brainpy.math.random)": [[667, "brainpy.math.random.categorical"]], "chisquare() (in module brainpy.math.random)": [[668, "brainpy.math.random.chisquare"]], "choice() (in module brainpy.math.random)": [[669, "brainpy.math.random.choice"]], "default_rng() (in module brainpy.math.random)": [[670, "brainpy.math.random.default_rng"]], "dirichlet() (in module brainpy.math.random)": [[671, "brainpy.math.random.dirichlet"]], "exponential() (in module brainpy.math.random)": [[672, "brainpy.math.random.exponential"]], "f() (in module brainpy.math.random)": [[673, "brainpy.math.random.f"]], "gamma() (in module brainpy.math.random)": [[674, "brainpy.math.random.gamma"]], "geometric() (in module brainpy.math.random)": [[675, "brainpy.math.random.geometric"]], "gumbel() (in module brainpy.math.random)": [[676, "brainpy.math.random.gumbel"]], "hypergeometric() (in module brainpy.math.random)": [[677, "brainpy.math.random.hypergeometric"]], "laplace() (in module brainpy.math.random)": [[678, "brainpy.math.random.laplace"]], "loggamma() (in module brainpy.math.random)": [[679, "brainpy.math.random.loggamma"]], "logistic() (in module brainpy.math.random)": [[680, "brainpy.math.random.logistic"]], "lognormal() (in module brainpy.math.random)": [[681, "brainpy.math.random.lognormal"]], "logseries() (in module brainpy.math.random)": [[682, "brainpy.math.random.logseries"]], "maxwell() (in module brainpy.math.random)": [[683, "brainpy.math.random.maxwell"]], "multinomial() (in module brainpy.math.random)": [[684, "brainpy.math.random.multinomial"]], "multivariate_normal() (in module brainpy.math.random)": [[685, "brainpy.math.random.multivariate_normal"]], "negative_binomial() (in module brainpy.math.random)": [[686, "brainpy.math.random.negative_binomial"]], "noncentral_chisquare() (in module brainpy.math.random)": [[687, "brainpy.math.random.noncentral_chisquare"]], "noncentral_f() (in module brainpy.math.random)": [[688, "brainpy.math.random.noncentral_f"]], "normal() (in module brainpy.math.random)": [[689, "brainpy.math.random.normal"]], "orthogonal() (in module brainpy.math.random)": [[690, "brainpy.math.random.orthogonal"]], "pareto() (in module brainpy.math.random)": [[691, "brainpy.math.random.pareto"]], "permutation() (in module brainpy.math.random)": [[692, "brainpy.math.random.permutation"]], "poisson() (in module brainpy.math.random)": [[693, "brainpy.math.random.poisson"]], "power() (in module brainpy.math.random)": [[694, "brainpy.math.random.power"]], "rand() (in module brainpy.math.random)": [[695, "brainpy.math.random.rand"]], "rand_like() (in module brainpy.math.random)": [[696, "brainpy.math.random.rand_like"]], "randint() (in module brainpy.math.random)": [[697, "brainpy.math.random.randint"]], "randint_like() (in module brainpy.math.random)": [[698, "brainpy.math.random.randint_like"]], "randn() (in module brainpy.math.random)": [[699, "brainpy.math.random.randn"]], "randn_like() (in module brainpy.math.random)": [[700, "brainpy.math.random.randn_like"]], "random() (in module brainpy.math.random)": [[701, "brainpy.math.random.random"]], "random_integers() (in module brainpy.math.random)": [[702, "brainpy.math.random.random_integers"]], "random_sample() (in module brainpy.math.random)": [[703, "brainpy.math.random.random_sample"]], "ranf() (in module brainpy.math.random)": [[704, "brainpy.math.random.ranf"]], "rayleigh() (in module brainpy.math.random)": [[705, "brainpy.math.random.rayleigh"]], "sample() (in module brainpy.math.random)": [[706, "brainpy.math.random.sample"]], "seed() (in module brainpy.math.random)": [[707, "brainpy.math.random.seed"]], "shuffle() (in module brainpy.math.random)": [[708, "brainpy.math.random.shuffle"]], "split_key() (in module brainpy.math.random)": [[709, "brainpy.math.random.split_key"]], "standard_cauchy() (in module brainpy.math.random)": [[710, "brainpy.math.random.standard_cauchy"]], "standard_exponential() (in module brainpy.math.random)": [[711, "brainpy.math.random.standard_exponential"]], "standard_gamma() (in module brainpy.math.random)": [[712, "brainpy.math.random.standard_gamma"]], "standard_normal() (in module brainpy.math.random)": [[713, "brainpy.math.random.standard_normal"]], "standard_t() (in module brainpy.math.random)": [[714, "brainpy.math.random.standard_t"]], "t() (in module brainpy.math.random)": [[715, "brainpy.math.random.t"]], "triangular() (in module brainpy.math.random)": [[716, "brainpy.math.random.triangular"]], "truncated_normal() (in module brainpy.math.random)": [[717, "brainpy.math.random.truncated_normal"]], "uniform() (in module brainpy.math.random)": [[718, "brainpy.math.random.uniform"]], "vonmises() (in module brainpy.math.random)": [[719, "brainpy.math.random.vonmises"]], "wald() (in module brainpy.math.random)": [[720, "brainpy.math.random.wald"]], "weibull() (in module brainpy.math.random)": [[721, "brainpy.math.random.weibull"]], "weibull_min() (in module brainpy.math.random)": [[722, "brainpy.math.random.weibull_min"]], "zipf() (in module brainpy.math.random)": [[723, "brainpy.math.random.zipf"]], "ravel() (in module brainpy.math)": [[724, "brainpy.math.ravel"]], "ravel_multi_index() (in module brainpy.math)": [[725, "brainpy.math.ravel_multi_index"]], "real() (in module brainpy.math)": [[726, "brainpy.math.real"]], "reciprocal() (in module brainpy.math)": [[727, "brainpy.math.reciprocal"]], "reduce_all() (in module brainpy.math)": [[728, "brainpy.math.reduce_all"]], "reduce_any() (in module brainpy.math)": [[729, "brainpy.math.reduce_any"]], "reduce_euclidean_norm() (in module brainpy.math)": [[730, "brainpy.math.reduce_euclidean_norm"]], "reduce_logsumexp() (in module brainpy.math)": [[731, "brainpy.math.reduce_logsumexp"]], "reduce_max() (in module brainpy.math)": [[732, "brainpy.math.reduce_max"]], "reduce_mean() (in module brainpy.math)": [[733, "brainpy.math.reduce_mean"]], "reduce_min() (in module brainpy.math)": [[734, "brainpy.math.reduce_min"]], "reduce_prod() (in module brainpy.math)": [[735, "brainpy.math.reduce_prod"]], "reduce_std() (in module brainpy.math)": [[736, "brainpy.math.reduce_std"]], "reduce_sum() (in module brainpy.math)": [[737, "brainpy.math.reduce_sum"]], "reduce_variance() (in module brainpy.math)": [[738, "brainpy.math.reduce_variance"]], "relu() (in module brainpy.math)": [[739, "brainpy.math.relu"]], "relu6() (in module brainpy.math)": [[740, "brainpy.math.relu6"]], "remainder() (in module brainpy.math)": [[741, "brainpy.math.remainder"]], "repeat() (in module brainpy.math)": [[742, "brainpy.math.repeat"]], "reshape() (in module brainpy.math)": [[743, "brainpy.math.reshape"]], "resize() (in module brainpy.math)": [[744, "brainpy.math.resize"]], "result_type() (in module brainpy.math)": [[745, "brainpy.math.result_type"]], "right_shift() (in module brainpy.math)": [[746, "brainpy.math.right_shift"]], "rint() (in module brainpy.math)": [[747, "brainpy.math.rint"]], "roll() (in module brainpy.math)": [[748, "brainpy.math.roll"]], "rollaxis() (in module brainpy.math)": [[749, "brainpy.math.rollaxis"]], "roots() (in module brainpy.math)": [[750, "brainpy.math.roots"]], "rot90() (in module brainpy.math)": [[751, "brainpy.math.rot90"]], "round() (in module brainpy.math)": [[752, "brainpy.math.round"]], "round_() (in module brainpy.math)": [[753, "brainpy.math.round_"]], "row_stack() (in module brainpy.math)": [[754, "brainpy.math.row_stack"]], "safe_eval() (in module brainpy.math)": [[755, "brainpy.math.safe_eval"]], "save() (in module brainpy.math)": [[756, "brainpy.math.save"]], "savetxt() (in module brainpy.math)": [[757, "brainpy.math.savetxt"]], "savez() (in module brainpy.math)": [[758, "brainpy.math.savez"]], "savez_compressed() (in module brainpy.math)": [[759, "brainpy.math.savez_compressed"]], "searchsorted() (in module brainpy.math)": [[760, "brainpy.math.searchsorted"]], "segment_max() (in module brainpy.math)": [[761, "brainpy.math.segment_max"]], "segment_mean() (in module brainpy.math)": [[762, "brainpy.math.segment_mean"]], "segment_min() (in module brainpy.math)": [[763, "brainpy.math.segment_min"]], "segment_prod() (in module brainpy.math)": [[764, "brainpy.math.segment_prod"]], "segment_sum() (in module brainpy.math)": [[765, "brainpy.math.segment_sum"]], "select() (in module brainpy.math)": [[766, "brainpy.math.select"]], "selu() (in module brainpy.math)": [[767, "brainpy.math.selu"]], "set_bool() (in module brainpy.math)": [[768, "brainpy.math.set_bool"]], "set_complex() (in module brainpy.math)": [[769, "brainpy.math.set_complex"]], "set_dt() (in module brainpy.math)": [[770, "brainpy.math.set_dt"]], "set_environment() (in module brainpy.math)": [[771, "brainpy.math.set_environment"]], "set_float() (in module brainpy.math)": [[772, "brainpy.math.set_float"]], "set_host_device_count() (in module brainpy.math)": [[773, "brainpy.math.set_host_device_count"]], "set_int() (in module brainpy.math)": [[774, "brainpy.math.set_int"]], "set_mode() (in module brainpy.math)": [[775, "brainpy.math.set_mode"]], "set_platform() (in module brainpy.math)": [[776, "brainpy.math.set_platform"]], "set_printoptions() (in module brainpy.math)": [[777, "brainpy.math.set_printoptions"]], "setdiff1d() (in module brainpy.math)": [[778, "brainpy.math.setdiff1d"]], "setxor1d() (in module brainpy.math)": [[779, "brainpy.math.setxor1d"]], "shape() (in module brainpy.math)": [[780, "brainpy.math.shape"]], "show_config() (in module brainpy.math)": [[781, "brainpy.math.show_config"]], "sigmoid() (in module brainpy.math)": [[782, "brainpy.math.sigmoid"]], "sign() (in module brainpy.math)": [[783, "brainpy.math.sign"]], "signbit() (in module brainpy.math)": [[784, "brainpy.math.signbit"]], "silu() (in module brainpy.math)": [[785, "brainpy.math.silu"]], "sin() (in module brainpy.math)": [[786, "brainpy.math.sin"]], "sinc() (in module brainpy.math)": [[787, "brainpy.math.sinc"]], "sinh() (in module brainpy.math)": [[788, "brainpy.math.sinh"]], "size() (in module brainpy.math)": [[789, "brainpy.math.size"]], "soft_sign() (in module brainpy.math)": [[790, "brainpy.math.soft_sign"]], "softmax() (in module brainpy.math)": [[791, "brainpy.math.softmax"]], "softplus() (in module brainpy.math)": [[792, "brainpy.math.softplus"]], "sometrue() (in module brainpy.math)": [[793, "brainpy.math.sometrue"]], "sort() (in module brainpy.math)": [[794, "brainpy.math.sort"]], "sort_complex() (in module brainpy.math)": [[795, "brainpy.math.sort_complex"]], "sparse_matmul() (in module brainpy.math)": [[796, "brainpy.math.sparse_matmul"]], "split() (in module brainpy.math)": [[797, "brainpy.math.split"]], "sqrt() (in module brainpy.math)": [[798, "brainpy.math.sqrt"]], "square() (in module brainpy.math)": [[799, "brainpy.math.square"]], "squeeze() (in module brainpy.math)": [[800, "brainpy.math.squeeze"]], "stack() (in module brainpy.math)": [[801, "brainpy.math.stack"]], "std() (in module brainpy.math)": [[802, "brainpy.math.std"]], "subtract() (in module brainpy.math)": [[803, "brainpy.math.subtract"]], "sum() (in module brainpy.math)": [[804, "brainpy.math.sum"]], "arctan (in module brainpy.math.surrogate)": [[805, "brainpy.math.surrogate.arctan"]], "erf (in module brainpy.math.surrogate)": [[806, "brainpy.math.surrogate.erf"]], "gaussian_grad (in module brainpy.math.surrogate)": [[807, "brainpy.math.surrogate.gaussian_grad"]], "inv_square_grad (in module brainpy.math.surrogate)": [[808, "brainpy.math.surrogate.inv_square_grad"]], "inv_square_grad2 (in module brainpy.math.surrogate)": [[809, "brainpy.math.surrogate.inv_square_grad2"]], "leaky_relu (in module brainpy.math.surrogate)": [[810, "brainpy.math.surrogate.leaky_relu"]], "log_tailed_relu (in module brainpy.math.surrogate)": [[811, "brainpy.math.surrogate.log_tailed_relu"]], "multi_gaussian_grad (in module brainpy.math.surrogate)": [[812, "brainpy.math.surrogate.multi_gaussian_grad"]], "nonzero_sign_log (in module brainpy.math.surrogate)": [[813, "brainpy.math.surrogate.nonzero_sign_log"]], "piecewise_exp (in module brainpy.math.surrogate)": [[814, "brainpy.math.surrogate.piecewise_exp"]], "piecewise_leaky_relu (in module brainpy.math.surrogate)": [[815, "brainpy.math.surrogate.piecewise_leaky_relu"]], "piecewise_quadratic (in module brainpy.math.surrogate)": [[816, "brainpy.math.surrogate.piecewise_quadratic"]], "q_pseudo_spike (in module brainpy.math.surrogate)": [[817, "brainpy.math.surrogate.q_pseudo_spike"]], "relu_grad (in module brainpy.math.surrogate)": [[818, "brainpy.math.surrogate.relu_grad"]], "relu_grad2 (in module brainpy.math.surrogate)": [[819, "brainpy.math.surrogate.relu_grad2"]], "s2nn (in module brainpy.math.surrogate)": [[820, "brainpy.math.surrogate.s2nn"]], "sigmoid (in module brainpy.math.surrogate)": [[821, "brainpy.math.surrogate.sigmoid"]], "slayer_grad (in module brainpy.math.surrogate)": [[822, "brainpy.math.surrogate.slayer_grad"]], "soft_sign (in module brainpy.math.surrogate)": [[823, "brainpy.math.surrogate.soft_sign"]], "squarewave_fourier_series (in module brainpy.math.surrogate)": [[824, "brainpy.math.surrogate.squarewave_fourier_series"]], "swapaxes() (in module brainpy.math)": [[825, "brainpy.math.swapaxes"]], "swish() (in module brainpy.math)": [[826, "brainpy.math.swish"]], "syn2post() (in module brainpy.math)": [[827, "brainpy.math.syn2post"]], "syn2post_max() (in module brainpy.math)": [[828, "brainpy.math.syn2post_max"]], "syn2post_mean() (in module brainpy.math)": [[829, "brainpy.math.syn2post_mean"]], "syn2post_min() (in module brainpy.math)": [[830, "brainpy.math.syn2post_min"]], "syn2post_prod() (in module brainpy.math)": [[831, "brainpy.math.syn2post_prod"]], "syn2post_softmax() (in module brainpy.math)": [[832, "brainpy.math.syn2post_softmax"]], "syn2post_sum() (in module brainpy.math)": [[833, "brainpy.math.syn2post_sum"]], "take() (in module brainpy.math)": [[834, "brainpy.math.take"]], "take_along_axis() (in module brainpy.math)": [[835, "brainpy.math.take_along_axis"]], "tan() (in module brainpy.math)": [[836, "brainpy.math.tan"]], "tanh() (in module brainpy.math)": [[837, "brainpy.math.tanh"]], "tensordot() (in module brainpy.math)": [[838, "brainpy.math.tensordot"]], "tile() (in module brainpy.math)": [[839, "brainpy.math.tile"]], "to_dynsys() (in module brainpy.math)": [[840, "brainpy.math.to_dynsys"]], "to_object() (in module brainpy.math)": [[841, "brainpy.math.to_object"]], "trace() (in module brainpy.math)": [[842, "brainpy.math.trace"]], "__init__() (brainpy.math.training_environment method)": [[843, "brainpy.math.training_environment.__init__"]], "training_environment (class in brainpy.math)": [[843, "brainpy.math.training_environment"]], "training_mode (in module brainpy.math)": [[844, "brainpy.math.training_mode"]], "transpose() (in module brainpy.math)": [[845, "brainpy.math.transpose"]], "trapz() (in module brainpy.math)": [[846, "brainpy.math.trapz"]], "tri() (in module brainpy.math)": [[847, "brainpy.math.tri"]], "tril() (in module brainpy.math)": [[848, "brainpy.math.tril"]], "tril_indices() (in module brainpy.math)": [[849, "brainpy.math.tril_indices"]], "tril_indices_from() (in module brainpy.math)": [[850, "brainpy.math.tril_indices_from"]], "trim_zeros() (in module brainpy.math)": [[851, "brainpy.math.trim_zeros"]], "triu() (in module brainpy.math)": [[852, "brainpy.math.triu"]], "triu_indices() (in module brainpy.math)": [[853, "brainpy.math.triu_indices"]], "triu_indices_from() (in module brainpy.math)": [[854, "brainpy.math.triu_indices_from"]], "true_divide() (in module brainpy.math)": [[855, "brainpy.math.true_divide"]], "trunc() (in module brainpy.math)": [[856, "brainpy.math.trunc"]], "typename() (in module brainpy.math)": [[857, "brainpy.math.typename"]], "union1d() (in module brainpy.math)": [[858, "brainpy.math.union1d"]], "unique() (in module brainpy.math)": [[859, "brainpy.math.unique"]], "unpackbits() (in module brainpy.math)": [[860, "brainpy.math.unpackbits"]], "unravel_index() (in module brainpy.math)": [[861, "brainpy.math.unravel_index"]], "unsorted_segment_max() (in module brainpy.math)": [[862, "brainpy.math.unsorted_segment_max"]], "unsorted_segment_mean() (in module brainpy.math)": [[863, "brainpy.math.unsorted_segment_mean"]], "unsorted_segment_min() (in module brainpy.math)": [[864, "brainpy.math.unsorted_segment_min"]], "unsorted_segment_prod() (in module brainpy.math)": [[865, "brainpy.math.unsorted_segment_prod"]], "unsorted_segment_sqrt_n() (in module brainpy.math)": [[866, "brainpy.math.unsorted_segment_sqrt_n"]], "unsorted_segment_sum() (in module brainpy.math)": [[867, "brainpy.math.unsorted_segment_sum"]], "unsqueeze() (in module brainpy.math)": [[868, "brainpy.math.unsqueeze"]], "unwrap() (in module brainpy.math)": [[869, "brainpy.math.unwrap"]], "vander() (in module brainpy.math)": [[870, "brainpy.math.vander"]], "var() (in module brainpy.math)": [[871, "brainpy.math.var"]], "vdot() (in module brainpy.math)": [[872, "brainpy.math.vdot"]], "vector_grad() (in module brainpy.math)": [[873, "brainpy.math.vector_grad"]], "vsplit() (in module brainpy.math)": [[874, "brainpy.math.vsplit"]], "vstack() (in module brainpy.math)": [[875, "brainpy.math.vstack"]], "where() (in module brainpy.math)": [[876, "brainpy.math.where"]], "while_loop() (in module brainpy.math)": [[877, "brainpy.math.while_loop"]], "zeros() (in module brainpy.math)": [[878, "brainpy.math.zeros"]], "zeros_like() (in module brainpy.math)": [[879, "brainpy.math.zeros_like"]], "cross_correlation() (in module brainpy.measure)": [[880, "brainpy.measure.cross_correlation"]], "firing_rate() (in module brainpy.measure)": [[881, "brainpy.measure.firing_rate"]], "functional_connectivity() (in module brainpy.measure)": [[882, "brainpy.measure.functional_connectivity"]], "matrix_correlation() (in module brainpy.measure)": [[883, "brainpy.measure.matrix_correlation"]], "raster_plot() (in module brainpy.measure)": [[884, "brainpy.measure.raster_plot"]], "unitary_lfp() (in module brainpy.measure)": [[885, "brainpy.measure.unitary_LFP"]], "voltage_fluctuation() (in module brainpy.measure)": [[886, "brainpy.measure.voltage_fluctuation"]], "weighted_correlation() (in module brainpy.measure)": [[887, "brainpy.measure.weighted_correlation"]], "alifbellec2020 (class in brainpy.neurons)": [[888, "brainpy.neurons.ALIFBellec2020"]], "__init__() (brainpy.neurons.alifbellec2020 method)": [[888, "brainpy.neurons.ALIFBellec2020.__init__"]], "adexif (class in brainpy.neurons)": [[889, "brainpy.neurons.AdExIF"]], "__init__() (brainpy.neurons.adexif method)": [[889, "brainpy.neurons.AdExIF.__init__"]], "adquaif (class in brainpy.neurons)": [[890, "brainpy.neurons.AdQuaIF"]], "__init__() (brainpy.neurons.adquaif method)": [[890, "brainpy.neurons.AdQuaIF.__init__"]], "expif (class in brainpy.neurons)": [[891, "brainpy.neurons.ExpIF"]], "__init__() (brainpy.neurons.expif method)": [[891, "brainpy.neurons.ExpIF.__init__"]], "fhn (class in brainpy.neurons)": [[892, "brainpy.neurons.FHN"]], "__init__() (brainpy.neurons.fhn method)": [[892, "brainpy.neurons.FHN.__init__"]], "fractionalfhr (class in brainpy.neurons)": [[893, "brainpy.neurons.FractionalFHR"]], "__init__() (brainpy.neurons.fractionalfhr method)": [[893, "brainpy.neurons.FractionalFHR.__init__"]], "fractionalizhikevich (class in brainpy.neurons)": [[894, "brainpy.neurons.FractionalIzhikevich"]], "__init__() (brainpy.neurons.fractionalizhikevich method)": [[894, "brainpy.neurons.FractionalIzhikevich.__init__"]], "fractionalneuron (class in brainpy.neurons)": [[895, "brainpy.neurons.FractionalNeuron"]], "__init__() (brainpy.neurons.fractionalneuron method)": [[895, "brainpy.neurons.FractionalNeuron.__init__"]], "gif (class in brainpy.neurons)": [[896, "brainpy.neurons.GIF"]], "__init__() (brainpy.neurons.gif method)": [[896, "brainpy.neurons.GIF.__init__"]], "hh (class in brainpy.neurons)": [[897, "brainpy.neurons.HH"]], "__init__() (brainpy.neurons.hh method)": [[897, "brainpy.neurons.HH.__init__"]], "hindmarshrose (class in brainpy.neurons)": [[898, "brainpy.neurons.HindmarshRose"]], "__init__() (brainpy.neurons.hindmarshrose method)": [[898, "brainpy.neurons.HindmarshRose.__init__"]], "inputgroup (class in brainpy.neurons)": [[899, "brainpy.neurons.InputGroup"]], "__init__() (brainpy.neurons.inputgroup method)": [[899, "brainpy.neurons.InputGroup.__init__"]], "izhikevich (class in brainpy.neurons)": [[900, "brainpy.neurons.Izhikevich"]], "__init__() (brainpy.neurons.izhikevich method)": [[900, "brainpy.neurons.Izhikevich.__init__"]], "lif (class in brainpy.neurons)": [[901, "brainpy.neurons.LIF"]], "__init__() (brainpy.neurons.lif method)": [[901, "brainpy.neurons.LIF.__init__"]], "leakyintegrator (class in brainpy.neurons)": [[902, "brainpy.neurons.LeakyIntegrator"]], "__init__() (brainpy.neurons.leakyintegrator method)": [[902, "brainpy.neurons.LeakyIntegrator.__init__"]], "morrislecar (class in brainpy.neurons)": [[903, "brainpy.neurons.MorrisLecar"]], "__init__() (brainpy.neurons.morrislecar method)": [[903, "brainpy.neurons.MorrisLecar.__init__"]], "ouprocess (class in brainpy.neurons)": [[904, "brainpy.neurons.OUProcess"]], "__init__() (brainpy.neurons.ouprocess method)": [[904, "brainpy.neurons.OUProcess.__init__"]], "outputgroup (class in brainpy.neurons)": [[905, "brainpy.neurons.OutputGroup"]], "__init__() (brainpy.neurons.outputgroup method)": [[905, "brainpy.neurons.OutputGroup.__init__"]], "pinskyrinzelmodel (class in brainpy.neurons)": [[906, "brainpy.neurons.PinskyRinzelModel"]], "__init__() (brainpy.neurons.pinskyrinzelmodel method)": [[906, "brainpy.neurons.PinskyRinzelModel.__init__"]], "poissongroup (class in brainpy.neurons)": [[907, "brainpy.neurons.PoissonGroup"]], "__init__() (brainpy.neurons.poissongroup method)": [[907, "brainpy.neurons.PoissonGroup.__init__"]], "quaif (class in brainpy.neurons)": [[908, "brainpy.neurons.QuaIF"]], "__init__() (brainpy.neurons.quaif method)": [[908, "brainpy.neurons.QuaIF.__init__"]], "spiketimegroup (class in brainpy.neurons)": [[909, "brainpy.neurons.SpikeTimeGroup"]], "__init__() (brainpy.neurons.spiketimegroup method)": [[909, "brainpy.neurons.SpikeTimeGroup.__init__"]], "wangbuzsakimodel (class in brainpy.neurons)": [[910, "brainpy.neurons.WangBuzsakiModel"]], "__init__() (brainpy.neurons.wangbuzsakimodel method)": [[910, "brainpy.neurons.WangBuzsakiModel.__init__"]], "odeint() (in module brainpy)": [[911, "brainpy.odeint"]], "adadelta (class in brainpy.optim)": [[912, "brainpy.optim.Adadelta"]], "__init__() (brainpy.optim.adadelta method)": [[912, "brainpy.optim.Adadelta.__init__"]], "adagrad (class in brainpy.optim)": [[913, "brainpy.optim.Adagrad"]], "__init__() (brainpy.optim.adagrad method)": [[913, "brainpy.optim.Adagrad.__init__"]], "adam (class in brainpy.optim)": [[914, "brainpy.optim.Adam"]], "__init__() (brainpy.optim.adam method)": [[914, "brainpy.optim.Adam.__init__"]], "adamw (class in brainpy.optim)": [[915, "brainpy.optim.AdamW"]], "__init__() (brainpy.optim.adamw method)": [[915, "brainpy.optim.AdamW.__init__"]], "adan (class in brainpy.optim)": [[916, "brainpy.optim.Adan"]], "__init__() (brainpy.optim.adan method)": [[916, "brainpy.optim.Adan.__init__"]], "constant (class in brainpy.optim)": [[917, "brainpy.optim.Constant"]], "__init__() (brainpy.optim.constant method)": [[917, "brainpy.optim.Constant.__init__"]], "cosineannealinglr (class in brainpy.optim)": [[918, "brainpy.optim.CosineAnnealingLR"]], "__init__() (brainpy.optim.cosineannealinglr method)": [[918, "brainpy.optim.CosineAnnealingLR.__init__"]], "cosineannealingwarmrestarts (class in brainpy.optim)": [[919, "brainpy.optim.CosineAnnealingWarmRestarts"]], "__init__() (brainpy.optim.cosineannealingwarmrestarts method)": [[919, "brainpy.optim.CosineAnnealingWarmRestarts.__init__"]], "exponentialdecay (class in brainpy.optim)": [[920, "brainpy.optim.ExponentialDecay"]], "__init__() (brainpy.optim.exponentialdecay method)": [[920, "brainpy.optim.ExponentialDecay.__init__"]], "exponentiallr (class in brainpy.optim)": [[921, "brainpy.optim.ExponentialLR"]], "__init__() (brainpy.optim.exponentiallr method)": [[921, "brainpy.optim.ExponentialLR.__init__"]], "inversetimedecay (class in brainpy.optim)": [[922, "brainpy.optim.InverseTimeDecay"]], "__init__() (brainpy.optim.inversetimedecay method)": [[922, "brainpy.optim.InverseTimeDecay.__init__"]], "lars (class in brainpy.optim)": [[923, "brainpy.optim.LARS"]], "__init__() (brainpy.optim.lars method)": [[923, "brainpy.optim.LARS.__init__"]], "momentum (class in brainpy.optim)": [[924, "brainpy.optim.Momentum"]], "__init__() (brainpy.optim.momentum method)": [[924, "brainpy.optim.Momentum.__init__"]], "momentumnesterov (class in brainpy.optim)": [[925, "brainpy.optim.MomentumNesterov"]], "__init__() (brainpy.optim.momentumnesterov method)": [[925, "brainpy.optim.MomentumNesterov.__init__"]], "multisteplr (class in brainpy.optim)": [[926, "brainpy.optim.MultiStepLR"]], "__init__() (brainpy.optim.multisteplr method)": [[926, "brainpy.optim.MultiStepLR.__init__"]], "optimizer (class in brainpy.optim)": [[927, "brainpy.optim.Optimizer"]], "__init__() (brainpy.optim.optimizer method)": [[927, "brainpy.optim.Optimizer.__init__"]], "piecewiseconstant (class in brainpy.optim)": [[928, "brainpy.optim.PiecewiseConstant"]], "__init__() (brainpy.optim.piecewiseconstant method)": [[928, "brainpy.optim.PiecewiseConstant.__init__"]], "polynomialdecay (class in brainpy.optim)": [[929, "brainpy.optim.PolynomialDecay"]], "__init__() (brainpy.optim.polynomialdecay method)": [[929, "brainpy.optim.PolynomialDecay.__init__"]], "rmsprop (class in brainpy.optim)": [[930, "brainpy.optim.RMSProp"]], "__init__() (brainpy.optim.rmsprop method)": [[930, "brainpy.optim.RMSProp.__init__"]], "sgd (class in brainpy.optim)": [[931, "brainpy.optim.SGD"]], "__init__() (brainpy.optim.sgd method)": [[931, "brainpy.optim.SGD.__init__"]], "scheduler (class in brainpy.optim)": [[932, "brainpy.optim.Scheduler"]], "__init__() (brainpy.optim.scheduler method)": [[932, "brainpy.optim.Scheduler.__init__"]], "steplr (class in brainpy.optim)": [[933, "brainpy.optim.StepLR"]], "__init__() (brainpy.optim.steplr method)": [[933, "brainpy.optim.StepLR.__init__"]], "make_schedule() (in module brainpy.optim)": [[934, "brainpy.optim.make_schedule"]], "fhn (class in brainpy.rates)": [[935, "brainpy.rates.FHN"]], "__init__() (brainpy.rates.fhn method)": [[935, "brainpy.rates.FHN.__init__"]], "feedbackfhn (class in brainpy.rates)": [[936, "brainpy.rates.FeedbackFHN"]], "__init__() (brainpy.rates.feedbackfhn method)": [[936, "brainpy.rates.FeedbackFHN.__init__"]], "qif (class in brainpy.rates)": [[937, "brainpy.rates.QIF"]], "__init__() (brainpy.rates.qif method)": [[937, "brainpy.rates.QIF.__init__"]], "ratemodel (class in brainpy.rates)": [[938, "brainpy.rates.RateModel"]], "__init__() (brainpy.rates.ratemodel method)": [[938, "brainpy.rates.RateModel.__init__"]], "stuartlandauoscillator (class in brainpy.rates)": [[939, "brainpy.rates.StuartLandauOscillator"]], "__init__() (brainpy.rates.stuartlandauoscillator method)": [[939, "brainpy.rates.StuartLandauOscillator.__init__"]], "thresholdlinearmodel (class in brainpy.rates)": [[940, "brainpy.rates.ThresholdLinearModel"]], "__init__() (brainpy.rates.thresholdlinearmodel method)": [[940, "brainpy.rates.ThresholdLinearModel.__init__"]], "wilsoncowanmodel (class in brainpy.rates)": [[941, "brainpy.rates.WilsonCowanModel"]], "__init__() (brainpy.rates.wilsoncowanmodel method)": [[941, "brainpy.rates.WilsonCowanModel.__init__"]], "cpu_ordered_parallel() (in module brainpy.running)": [[942, "brainpy.running.cpu_ordered_parallel"]], "cpu_unordered_parallel() (in module brainpy.running)": [[943, "brainpy.running.cpu_unordered_parallel"]], "jax_parallelize_map() (in module brainpy.running)": [[944, "brainpy.running.jax_parallelize_map"]], "jax_vectorize_map() (in module brainpy.running)": [[945, "brainpy.running.jax_vectorize_map"]], "process_pool() (in module brainpy.running)": [[946, "brainpy.running.process_pool"]], "process_pool_lock() (in module brainpy.running)": [[947, "brainpy.running.process_pool_lock"]], "sdeint() (in module brainpy)": [[948, "brainpy.sdeint"]], "ampa (class in brainpy.synapses)": [[949, "brainpy.synapses.AMPA"]], "__init__() (brainpy.synapses.ampa method)": [[949, "brainpy.synapses.AMPA.__init__"]], "additivecoupling (class in brainpy.synapses)": [[950, "brainpy.synapses.AdditiveCoupling"]], "__init__() (brainpy.synapses.additivecoupling method)": [[950, "brainpy.synapses.AdditiveCoupling.__init__"]], "alpha (class in brainpy.synapses)": [[951, "brainpy.synapses.Alpha"]], "__init__() (brainpy.synapses.alpha method)": [[951, "brainpy.synapses.Alpha.__init__"]], "bionmda (class in brainpy.synapses)": [[952, "brainpy.synapses.BioNMDA"]], "__init__() (brainpy.synapses.bionmda method)": [[952, "brainpy.synapses.BioNMDA.__init__"]], "delaycoupling (class in brainpy.synapses)": [[953, "brainpy.synapses.DelayCoupling"]], "__init__() (brainpy.synapses.delaycoupling method)": [[953, "brainpy.synapses.DelayCoupling.__init__"]], "delta (class in brainpy.synapses)": [[954, "brainpy.synapses.Delta"]], "__init__() (brainpy.synapses.delta method)": [[954, "brainpy.synapses.Delta.__init__"]], "diffusivecoupling (class in brainpy.synapses)": [[955, "brainpy.synapses.DiffusiveCoupling"]], "__init__() (brainpy.synapses.diffusivecoupling method)": [[955, "brainpy.synapses.DiffusiveCoupling.__init__"]], "dualexponential (class in brainpy.synapses)": [[956, "brainpy.synapses.DualExponential"]], "__init__() (brainpy.synapses.dualexponential method)": [[956, "brainpy.synapses.DualExponential.__init__"]], "exponential (class in brainpy.synapses)": [[957, "brainpy.synapses.Exponential"]], "__init__() (brainpy.synapses.exponential method)": [[957, "brainpy.synapses.Exponential.__init__"]], "gabaa (class in brainpy.synapses)": [[958, "brainpy.synapses.GABAa"]], "__init__() (brainpy.synapses.gabaa method)": [[958, "brainpy.synapses.GABAa.__init__"]], "gapjunction (class in brainpy.synapses)": [[959, "brainpy.synapses.GapJunction"]], "__init__() (brainpy.synapses.gapjunction method)": [[959, "brainpy.synapses.GapJunction.__init__"]], "nmda (class in brainpy.synapses)": [[960, "brainpy.synapses.NMDA"]], "__init__() (brainpy.synapses.nmda method)": [[960, "brainpy.synapses.NMDA.__init__"]], "poissoninput (class in brainpy.synapses)": [[961, "brainpy.synapses.PoissonInput"]], "__init__() (brainpy.synapses.poissoninput method)": [[961, "brainpy.synapses.PoissonInput.__init__"]], "coba (class in brainpy.synouts)": [[962, "brainpy.synouts.COBA"]], "__init__() (brainpy.synouts.coba method)": [[962, "brainpy.synouts.COBA.__init__"]], "cuba (class in brainpy.synouts)": [[963, "brainpy.synouts.CUBA"]], "__init__() (brainpy.synouts.cuba method)": [[963, "brainpy.synouts.CUBA.__init__"]], "mgblock (class in brainpy.synouts)": [[964, "brainpy.synouts.MgBlock"]], "__init__() (brainpy.synouts.mgblock method)": [[964, "brainpy.synouts.MgBlock.__init__"]], "std (class in brainpy.synplast)": [[965, "brainpy.synplast.STD"]], "__init__() (brainpy.synplast.std method)": [[965, "brainpy.synplast.STD.__init__"]], "stp (class in brainpy.synplast)": [[966, "brainpy.synplast.STP"]], "__init__() (brainpy.synplast.stp method)": [[966, "brainpy.synplast.STP.__init__"]], "brainpy.initialize": [[967, "module-brainpy.initialize"]], "brainpy.inputs": [[968, "module-brainpy.inputs"]], "brainpy.integrators": [[969, "module-brainpy.integrators"]], "brainpy.integrators.fde": [[969, "module-brainpy.integrators.fde"]], "brainpy.integrators.ode": [[969, "module-brainpy.integrators.ode"]], "brainpy.integrators.sde": [[969, "module-brainpy.integrators.sde"]], "brainpy.layers": [[970, "module-brainpy.layers"]], "brainpy.losses": [[971, "module-brainpy.losses"]], "brainpy.math": [[972, "module-0"], [972, "module-1"], [972, "module-2"], [972, "module-3"], [972, "module-4"], [972, "module-5"], [972, "module-6"], [972, "module-7"], [972, "module-8"], [972, "module-9"], [972, "module-brainpy.math"]], "brainpy.math.fft": [[972, "module-brainpy.math.fft"]], "brainpy.math.linalg": [[972, "module-brainpy.math.linalg"]], "brainpy.math.random": [[972, "module-brainpy.math.random"], [973, "module-brainpy.math.random"]], "brainpy.math.surrogate": [[972, "module-brainpy.math.surrogate"], [974, "module-brainpy.math.surrogate"]], "brainpy.measure": [[975, "module-brainpy.measure"]], "brainpy.neurons": [[976, "module-brainpy.neurons"]], "brainpy.optim": [[977, "module-brainpy.optim"]], "brainpy.rates": [[978, "module-brainpy.rates"]], "brainpy.running": [[979, "module-brainpy.running"]], "brainpy.synapses": [[980, "module-brainpy.synapses"]], "brainpy.synouts": [[981, "module-brainpy.synouts"]], "brainpy.synplast": [[982, "module-brainpy.synplast"]]}})